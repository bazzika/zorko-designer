// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`VegaLiteSchemaPresenter creates default 1`] = `
Object {
  "schema": Object {
    "definitions": Object {},
  },
}
`;

exports[`VegaLiteSchemaPresenter gets all marks as options 1`] = `
Array [
  Object {
    "label": "area",
    "value": "area",
  },
  Object {
    "label": "bar",
    "value": "bar",
  },
  Object {
    "label": "line",
    "value": "line",
  },
  Object {
    "label": "image",
    "value": "image",
  },
  Object {
    "label": "trail",
    "value": "trail",
  },
  Object {
    "label": "point",
    "value": "point",
  },
  Object {
    "label": "text",
    "value": "text",
  },
  Object {
    "label": "tick",
    "value": "tick",
  },
  Object {
    "label": "rect",
    "value": "rect",
  },
  Object {
    "label": "rule",
    "value": "rule",
  },
  Object {
    "label": "circle",
    "value": "circle",
  },
  Object {
    "label": "square",
    "value": "square",
  },
  Object {
    "label": "geoshape",
    "value": "geoshape",
  },
]
`;

exports[`VegaLiteSchemaPresenter sets schema 1`] = `
Object {
  "schema": Object {
    "$ref": "#/definitions/TopLevelSpec",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": Object {
      "Aggregate": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/NonArgAggregateOp",
          },
          Object {
            "$ref": "#/definitions/ArgmaxDef",
          },
          Object {
            "$ref": "#/definitions/ArgminDef",
          },
        ],
      },
      "AggregateOp": Object {
        "enum": Array [
          "argmax",
          "argmin",
          "average",
          "count",
          "distinct",
          "max",
          "mean",
          "median",
          "min",
          "missing",
          "q1",
          "q3",
          "ci0",
          "ci1",
          "stderr",
          "stdev",
          "stdevp",
          "sum",
          "valid",
          "values",
          "variance",
          "variancep",
        ],
        "type": "string",
      },
      "AggregateTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "description": "Array of objects that define fields to aggregate.",
            "items": Object {
              "$ref": "#/definitions/AggregatedFieldDef",
            },
            "type": "array",
          },
          "groupby": Object {
            "description": "The data fields to group by. If not specified, a single group containing all data objects will be used.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
        },
        "required": Array [
          "aggregate",
        ],
        "type": "object",
      },
      "AggregatedFieldDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The output field names to use for each aggregated field.",
          },
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field for which to compute aggregate function. This is required for all aggregation operations except \`\\"count\\"\`.",
          },
          "op": Object {
            "$ref": "#/definitions/AggregateOp",
            "description": "The aggregation operation to apply to the fields (e.g., \`\\"sum\\"\`, \`\\"average\\"\`, or \`\\"count\\"\`).
See the [full list of supported aggregation operations](https://vega.github.io/vega-lite/docs/aggregate.html#ops)
for more information.",
          },
        },
        "required": Array [
          "op",
          "as",
        ],
        "type": "object",
      },
      "Align": Object {
        "enum": Array [
          "left",
          "center",
          "right",
        ],
        "type": "string",
      },
      "AllSortString": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/SortOrder",
          },
          Object {
            "$ref": "#/definitions/SortByChannel",
          },
          Object {
            "$ref": "#/definitions/SortByChannelDesc",
          },
        ],
      },
      "AnyMark": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/CompositeMark",
          },
          Object {
            "$ref": "#/definitions/CompositeMarkDef",
          },
          Object {
            "$ref": "#/definitions/Mark",
          },
          Object {
            "$ref": "#/definitions/MarkDef",
          },
        ],
      },
      "AreaConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "align": Object {
            "$ref": "#/definitions/Align",
            "description": "The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"left\\"\`, \`\\"right\\"\`, \`\\"center\\"\`.",
          },
          "angle": Object {
            "description": "The rotation angle of the text, in degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
          },
          "aspect": Object {
            "description": "Whether to keep aspect ratio of image marks.",
            "type": "boolean",
          },
          "baseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "The vertical alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`.

__Default value:__ \`\\"middle\\"\`",
          },
          "color": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
            ],
            "description": "Default color.

__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> \`\\"#4682b4\\"\`

__Note:__
- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
- The \`fill\` and \`stroke\` properties have higher precedence than \`color\` and will override \`color\`.",
          },
          "cornerRadius": Object {
            "description": "The radius in pixels of rounded rectangle corners.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomLeft": Object {
            "description": "The radius in pixels of rounded rectangle bottom left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomRight": Object {
            "description": "The radius in pixels of rounded rectangle bottom right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopLeft": Object {
            "description": "The radius in pixels of rounded rectangle top right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopRight": Object {
            "description": "The radius in pixels of rounded rectangle top left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cursor": Object {
            "$ref": "#/definitions/Cursor",
            "description": "The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.",
          },
          "dir": Object {
            "$ref": "#/definitions/Dir",
            "description": "The direction of the text. One of \`\\"ltr\\"\` (left-to-right) or \`\\"rtl\\"\` (right-to-left). This property determines on which side is truncated in response to the limit parameter.

__Default value:__ \`\\"ltr\\"\`",
          },
          "dx": Object {
            "description": "The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "dy": Object {
            "description": "The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "ellipsis": Object {
            "description": "The ellipsis string for text truncated in response to the limit parameter.

__Default value:__ \`\\"â€¦\\"\`",
            "type": "string",
          },
          "fill": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Fill Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "fillOpacity": Object {
            "description": "The fill opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "filled": Object {
            "description": "Whether the mark's color should be used as fill color instead of stroke color.

__Default value:__ \`false\` for all \`point\`, \`line\`, and \`rule\` marks as well as \`geoshape\` marks for [\`graticule\`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, \`true\`.

__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",
            "type": "boolean",
          },
          "font": Object {
            "description": "The typeface to set the text in (e.g., \`\\"Helvetica Neue\\"\`).",
            "type": "string",
          },
          "fontSize": Object {
            "description": "The font size, in pixels.",
            "type": "number",
          },
          "fontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style (e.g., \`\\"italic\\"\`).",
          },
          "fontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "The font weight.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "height": Object {
            "description": "Height of the marks.",
            "type": "number",
          },
          "href": Object {
            "description": "A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",
            "format": "uri",
            "type": "string",
          },
          "interpolate": Object {
            "$ref": "#/definitions/Interpolate",
            "description": "The line interpolation method to use for line and area marks. One of the following:
- \`\\"linear\\"\`: piecewise linear segments, as in a polyline.
- \`\\"linear-closed\\"\`: close the linear segments to form a polygon.
- \`\\"step\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"step-before\\"\`: alternate between vertical and horizontal segments, as in a step function.
- \`\\"step-after\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"basis\\"\`: a B-spline, with control point duplication on the ends.
- \`\\"basis-open\\"\`: an open B-spline; may not intersect the start or end.
- \`\\"basis-closed\\"\`: a closed B-spline, as in a loop.
- \`\\"cardinal\\"\`: a Cardinal spline, with control point duplication on the ends.
- \`\\"cardinal-open\\"\`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
- \`\\"cardinal-closed\\"\`: a closed Cardinal spline, as in a loop.
- \`\\"bundle\\"\`: equivalent to basis, except the tension parameter is used to straighten the spline.
- \`\\"monotone\\"\`: cubic interpolation that preserves monotonicity in y.",
          },
          "invalid": Object {
            "description": "Defines how Vega-Lite should handle marks for invalid values (\`null\` and \`NaN\`).
- If set to \`\\"filter\\"\` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
- If \`null\`, all data items are included. In this case, invalid values will be interpreted as zeroes.",
            "enum": Array [
              "filter",
              null,
            ],
            "type": Array [
              "string",
              "null",
            ],
          },
          "limit": Object {
            "description": "The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.

__Default value:__ \`0\`, indicating no limit",
            "type": "number",
          },
          "line": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/OverlayMarkDef",
              },
            ],
            "description": "A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.

- If this value is an empty object (\`{}\`) or \`true\`, lines with default properties will be used.

- If this value is \`false\`, no lines would be automatically added to area marks.

__Default value:__ \`false\`.",
          },
          "lineBreak": Object {
            "description": "A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property will be ignored if the text property is array-valued.",
            "type": "string",
          },
          "lineHeight": Object {
            "description": "The height, in pixels, of each line of text in a multi-line text mark.",
            "type": "number",
          },
          "opacity": Object {
            "description": "The overall opacity (value between [0,1]).

__Default value:__ \`0.7\` for non-aggregate plots with \`point\`, \`tick\`, \`circle\`, or \`square\` marks or layered \`bar\` charts and \`1\` otherwise.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "order": Object {
            "description": "For line and trail marks, this \`order\` property can be set to \`null\` or \`false\` to make the lines use the original order in the data sources.",
            "type": Array [
              "null",
              "boolean",
            ],
          },
          "orient": Object {
            "$ref": "#/definitions/Orientation",
            "description": "The orientation of a non-stacked bar, tick, area, and line charts.
The value is either horizontal (default) or vertical.
- For bar, rule and tick, this determines whether the size of the bar and tick
should be applied to x or y dimension.
- For area, this property determines the orient property of the Vega output.
- For line and trail marks, this property determines the sort order of the points in the line
if \`config.sortLineBy\` is not specified.
For stacked charts, this is always determined by the orientation of the stack;
therefore explicitly specified value will be ignored.",
          },
          "point": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/OverlayMarkDef",
              },
              Object {
                "enum": Array [
                  "transparent",
                ],
                "type": "string",
              },
            ],
            "description": "A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.

- If this property is \`\\"transparent\\"\`, transparent points will be used (for enhancing tooltips and selections).

- If this property is an empty object (\`{}\`) or \`true\`, filled points with default properties will be used.

- If this property is \`false\`, no points would be automatically added to line or area marks.

__Default value:__ \`false\`.",
          },
          "radius": Object {
            "description": "Polar coordinate radial offset, in pixels, of the text label from the origin determined by the \`x\` and \`y\` properties.",
            "minimum": 0,
            "type": "number",
          },
          "shape": Object {
            "description": "Shape of the point marks. Supported values include:
- plotting shapes: \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"cross\\"\`, \`\\"diamond\\"\`, \`\\"triangle-up\\"\`, \`\\"triangle-down\\"\`, \`\\"triangle-right\\"\`, or \`\\"triangle-left\\"\`.
- the line symbol \`\\"stroke\\"\`
- centered directional shapes \`\\"arrow\\"\`, \`\\"wedge\\"\`, or \`\\"triangle\\"\`
- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)

__Default value:__ \`\\"circle\\"\`",
            "type": "string",
          },
          "size": Object {
            "description": "Default size for marks.
- For \`point\`/\`circle\`/\`square\`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.
- For \`bar\`, this represents the band size of the bar, in pixels.
- For \`text\`, this represents the font size, in pixels.

__Default value:__
- \`30\` for point, circle, square marks; width/height's \`step\`
- \`2\` for bar marks with discrete dimensions;
- \`5\` for bar marks with continuous dimensions;
- \`11\` for text marks.",
            "minimum": 0,
            "type": "number",
          },
          "stroke": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Stroke Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "strokeCap": Object {
            "$ref": "#/definitions/StrokeCap",
            "description": "The stroke cap for line ending style. One of \`\\"butt\\"\`, \`\\"round\\"\`, or \`\\"square\\"\`.

__Default value:__ \`\\"square\\"\`",
          },
          "strokeDash": Object {
            "description": "An array of alternating stroke, space lengths for creating dashed or dotted lines.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "strokeDashOffset": Object {
            "description": "The offset (in pixels) into which to begin drawing with the stroke dash array.",
            "type": "number",
          },
          "strokeJoin": Object {
            "$ref": "#/definitions/StrokeJoin",
            "description": "The stroke line join method. One of \`\\"miter\\"\`, \`\\"round\\"\` or \`\\"bevel\\"\`.

__Default value:__ \`\\"miter\\"\`",
          },
          "strokeMiterLimit": Object {
            "description": "The miter limit at which to bevel a line join.",
            "type": "number",
          },
          "strokeOpacity": Object {
            "description": "The stroke opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "strokeWidth": Object {
            "description": "The stroke width, in pixels.",
            "minimum": 0,
            "type": "number",
          },
          "tension": Object {
            "description": "Depending on the interpolation type, sets the tension parameter (for line and area marks).",
            "type": "number",
          },
          "text": Object {
            "$ref": "#/definitions/Text",
            "description": "Placeholder text if the \`text\` channel is not specified",
          },
          "theta": Object {
            "description": "Polar coordinate angle, in radians, of the text label from the origin determined by the \`x\` and \`y\` properties. Values for \`theta\` follow the same convention of \`arc\` mark \`startAngle\` and \`endAngle\` properties: angles are measured in radians, with \`0\` indicating \\"north\\".",
            "type": "number",
          },
          "timeUnitBand": Object {
            "description": "Default relative band size for a time unit. If set to \`1\`, the bandwidth of the marks will be equal to the time unit band step.
If set to \`0.5\`, bandwidth of the marks will be half of the time unit band step.",
            "type": "number",
          },
          "timeUnitBandPosition": Object {
            "description": "Default relative band position for a time unit. If set to \`0\`, the marks will be positioned at the beginning of the time unit band step.
If set to \`0.5\`, the marks will be positioned in the middle of the time unit band step.",
            "type": "number",
          },
          "tooltip": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Value",
              },
              Object {
                "$ref": "#/definitions/TooltipContent",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.

- If \`tooltip\` is \`true\` or \`{\\"content\\": \\"encoding\\"}\`, then all fields from \`encoding\` will be used.
- If \`tooltip\` is \`{\\"content\\": \\"data\\"}\`, then all fields that appear in the highlighted data point will be used.
- If set to \`null\` or \`false\`, then no tooltip will be used.

See the [\`tooltip\`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.

__Default value:__ \`null\`",
          },
          "width": Object {
            "description": "Width of the marks.",
            "type": "number",
          },
          "x": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X coordinates of the marks, or width of horizontal \`\\"bar\\"\` and \`\\"area\\"\` without specified \`x2\` or \`width\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "x2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "y": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y coordinates of the marks, or height of vertical \`\\"bar\\"\` and \`\\"area\\"\` without specified \`y2\` or \`height\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "y2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
        },
        "type": "object",
      },
      "ArgmaxDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "argmax": Object {
            "type": "string",
          },
        },
        "required": Array [
          "argmax",
        ],
        "type": "object",
      },
      "ArgminDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "argmin": Object {
            "type": "string",
          },
        },
        "required": Array [
          "argmin",
        ],
        "type": "object",
      },
      "AutoSizeParams": Object {
        "additionalProperties": false,
        "properties": Object {
          "contains": Object {
            "description": "Determines how size calculation should be performed, one of \`\\"content\\"\` or \`\\"padding\\"\`. The default setting (\`\\"content\\"\`) interprets the width and height settings as the data rectangle (plotting) dimensions, to which padding is then added. In contrast, the \`\\"padding\\"\` setting includes the padding within the view size calculations, such that the width and height settings indicate the **total** intended size of the view.

__Default value__: \`\\"content\\"\`",
            "enum": Array [
              "content",
              "padding",
            ],
            "type": "string",
          },
          "resize": Object {
            "description": "A boolean flag indicating if autosize layout should be re-calculated on every view update.

__Default value__: \`false\`",
            "type": "boolean",
          },
          "type": Object {
            "$ref": "#/definitions/AutosizeType",
            "description": "The sizing format type. One of \`\\"pad\\"\`, \`\\"fit\\"\`, \`\\"fit-x\\"\`, \`\\"fit-y\\"\`,  or \`\\"none\\"\`. See the [autosize type](https://vega.github.io/vega-lite/docs/size.html#autosize) documentation for descriptions of each.

__Default value__: \`\\"pad\\"\`",
          },
        },
        "type": "object",
      },
      "AutosizeType": Object {
        "anyOf": Array [
          Object {
            "enum": Array [
              "pad",
            ],
            "type": "string",
          },
          Object {
            "enum": Array [
              "none",
            ],
            "type": "string",
          },
          Object {
            "$ref": "#/definitions/FitType",
          },
        ],
      },
      "Axis": Object {
        "additionalProperties": false,
        "properties": Object {
          "bandPosition": Object {
            "description": "An interpolation fraction indicating where, for \`band\` scales, axis ticks should be positioned. A value of \`0\` places ticks at the left edge of their bands. A value of \`0.5\` places ticks in the middle of their bands.

  __Default value:__ \`0.5\`",
            "type": "number",
          },
          "domain": Object {
            "description": "A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.

__Default value:__ \`true\`",
            "type": "boolean",
          },
          "domainColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Color of axis domain line.

__Default value:__ \`\\"gray\\"\`.",
          },
          "domainDash": Object {
            "description": "An array of alternating [stroke, space] lengths for dashed domain lines.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "domainDashOffset": Object {
            "description": "The pixel offset at which to start drawing with the domain dash array.",
            "type": "number",
          },
          "domainOpacity": Object {
            "description": "Opacity of the axis domain line.",
            "type": "number",
          },
          "domainWidth": Object {
            "description": "Stroke width of axis domain line

__Default value:__ \`1\`",
            "type": "number",
          },
          "format": Object {
            "description": "The text formatting pattern for labels of guides (axes, legends, headers) and text marks.

- If the format type is \`\\"number\\"\` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
- If the format type is \`\\"time\\"\` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).

See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.

__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.",
            "type": "string",
          },
          "formatType": Object {
            "description": "The format type for labels (\`\\"number\\"\` or \`\\"time\\"\`).

__Default value:__
- \`\\"time\\"\` for temporal fields and ordinal and nomimal fields with \`timeUnit\`.
- \`\\"number\\"\` for quantitative fields as well as ordinal and nomimal fields without \`timeUnit\`.",
            "enum": Array [
              "number",
              "time",
            ],
            "type": "string",
          },
          "grid": Object {
            "description": "A boolean flag indicating if grid lines should be included as part of the axis

__Default value:__ \`true\` for [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous) that are not binned; otherwise, \`false\`.",
            "type": "boolean",
          },
          "gridColor": Object {
            "anyOf": Array [
              Object {
                "anyOf": Array [
                  Object {
                    "type": "null",
                  },
                  Object {
                    "$ref": "#/definitions/Color",
                  },
                ],
                "description": "Color of gridlines.

__Default value:__ \`\\"lightGray\\"\`.",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisColor",
              },
            ],
          },
          "gridDash": Object {
            "anyOf": Array [
              Object {
                "description": "An array of alternating [stroke, space] lengths for dashed grid lines.",
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumberArray",
              },
            ],
          },
          "gridDashOffset": Object {
            "anyOf": Array [
              Object {
                "description": "The pixel offset at which to start drawing with the grid dash array.",
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "gridOpacity": Object {
            "anyOf": Array [
              Object {
                "description": "The stroke opacity of grid (value between [0,1])

__Default value:__ \`1\`",
                "maximum": 1,
                "minimum": 0,
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "gridWidth": Object {
            "anyOf": Array [
              Object {
                "description": "The grid width, in pixels.

__Default value:__ \`1\`",
                "minimum": 0,
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "labelAlign": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Align",
                "description": "Horizontal text alignment of axis tick labels, overriding the default setting for the current axis orientation.",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "labelAngle": Object {
            "description": "The rotation angle of the axis labels.

__Default value:__ \`-90\` for nominal and ordinal fields; \`0\` otherwise.",
            "maximum": 360,
            "minimum": -360,
            "type": "number",
          },
          "labelBaseline": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/TextBaseline",
                "description": "Vertical text baseline of axis tick labels, overriding the default setting for the current axis orientation. Can be \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`, or \`\\"alphabetic\\"\`.",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisLabelBaseline",
              },
            ],
          },
          "labelBound": Object {
            "description": "Indicates if labels should be hidden if they exceed the axis range. If \`false\` (the default) no bounds overlap analysis is performed. If \`true\`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.

__Default value:__ \`false\`.",
            "type": Array [
              "number",
              "boolean",
            ],
          },
          "labelColor": Object {
            "anyOf": Array [
              Object {
                "anyOf": Array [
                  Object {
                    "type": "null",
                  },
                  Object {
                    "$ref": "#/definitions/Color",
                  },
                ],
                "description": "The color of the tick label, can be in hex color code or regular color name.",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisColor",
              },
            ],
          },
          "labelExpr": Object {
            "description": "[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.

__Note:__ The label text and value can be assessed via the \`label\` and \`value\` properties of the axis's backing \`datum\` object.",
            "type": "string",
          },
          "labelFlush": Object {
            "description": "Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.

__Default value:__ \`true\` for axis of a continuous x-scale. Otherwise, \`false\`.",
            "type": Array [
              "boolean",
              "number",
            ],
          },
          "labelFlushOffset": Object {
            "description": "Indicates the number of pixels by which to offset flush-adjusted labels. For example, a value of \`2\` will push flush-adjusted labels 2 pixels outward from the center of the axis. Offsets can help the labels better visually group with corresponding axis ticks.

__Default value:__ \`0\`.",
            "type": "number",
          },
          "labelFont": Object {
            "anyOf": Array [
              Object {
                "description": "The font of the tick label.",
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisString",
              },
            ],
          },
          "labelFontSize": Object {
            "anyOf": Array [
              Object {
                "description": "The font size of the label, in pixels.",
                "minimum": 0,
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "labelFontStyle": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FontStyle",
                "description": "Font style of the title.",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisLabelFontStyle",
              },
            ],
          },
          "labelFontWeight": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FontWeight",
                "description": "Font weight of axis tick labels.",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisLabelFontWeight",
              },
            ],
          },
          "labelLimit": Object {
            "description": "Maximum allowed pixel width of axis tick labels.

__Default value:__ \`180\`",
            "type": "number",
          },
          "labelOpacity": Object {
            "anyOf": Array [
              Object {
                "description": "The opacity of the labels.",
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "labelOverlap": Object {
            "$ref": "#/definitions/LabelOverlap",
            "description": "The strategy to use for resolving overlap of axis labels. If \`false\` (the default), no overlap reduction is attempted. If set to \`true\` or \`\\"parity\\"\`, a strategy of removing every other label is used (this works well for standard linear axes). If set to \`\\"greedy\\"\`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).

__Default value:__ \`true\` for non-nominal fields with non-log scales; \`\\"greedy\\"\` for log scales; otherwise \`false\`.",
          },
          "labelPadding": Object {
            "description": "The padding, in pixels, between axis and text labels.

__Default value:__ \`2\`",
            "type": "number",
          },
          "labelSeparation": Object {
            "description": "The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default \`0\`). This property is ignored if *labelOverlap* resolution is not enabled.",
            "type": "number",
          },
          "labels": Object {
            "description": "A boolean flag indicating if labels should be included as part of the axis.

__Default value:__ \`true\`.",
            "type": "boolean",
          },
          "maxExtent": Object {
            "description": "The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.

__Default value:__ \`undefined\`.",
            "type": "number",
          },
          "minExtent": Object {
            "description": "The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.

__Default value:__ \`30\` for y-axis; \`undefined\` for x-axis.",
            "type": "number",
          },
          "offset": Object {
            "description": "The offset, in pixels, by which to displace the axis from the edge of the enclosing group or data rectangle.

__Default value:__ derived from the [axis config](https://vega.github.io/vega-lite/docs/config.html#facet-scale-config)'s \`offset\` (\`0\` by default)",
            "type": "number",
          },
          "orient": Object {
            "$ref": "#/definitions/AxisOrient",
            "description": "The orientation of the axis. One of \`\\"top\\"\`, \`\\"bottom\\"\`, \`\\"left\\"\` or \`\\"right\\"\`. The orientation can be used to further specialize the axis type (e.g., a y-axis oriented towards the right edge of the chart).

__Default value:__ \`\\"bottom\\"\` for x-axes and \`\\"left\\"\` for y-axes.",
          },
          "position": Object {
            "description": "The anchor position of the axis in pixels. For x-axes with top or bottom orientation, this sets the axis group x coordinate. For y-axes with left or right orientation, this sets the axis group y coordinate.

__Default value__: \`0\`",
            "type": "number",
          },
          "tickBand": Object {
            "description": "For band scales, indicates if ticks and grid lines should be placed at the center of a band (default) or at the band extents to indicate intervals.",
            "enum": Array [
              "center",
              "extent",
            ],
            "type": "string",
          },
          "tickColor": Object {
            "anyOf": Array [
              Object {
                "anyOf": Array [
                  Object {
                    "type": "null",
                  },
                  Object {
                    "$ref": "#/definitions/Color",
                  },
                ],
                "description": "The color of the axis's tick.

__Default value:__ \`\\"gray\\"\`",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisColor",
              },
            ],
          },
          "tickCount": Object {
            "description": "A desired number of ticks, for axes visualizing quantitative scales. The resulting number may be different so that values are \\"nice\\" (multiples of 2, 5, 10) and lie within the underlying scale's range.

__Default value__: Determine using a formula \`ceil(width/40)\` for x and \`ceil(height/40)\` for y.",
            "minimum": 0,
            "type": "number",
          },
          "tickDash": Object {
            "anyOf": Array [
              Object {
                "description": "An array of alternating [stroke, space] lengths for dashed tick mark lines.",
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumberArray",
              },
            ],
          },
          "tickDashOffset": Object {
            "anyOf": Array [
              Object {
                "description": "The pixel offset at which to start drawing with the tick mark dash array.",
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "tickExtra": Object {
            "description": "Boolean flag indicating if an extra axis tick should be added for the initial position of the axis. This flag is useful for styling axes for \`band\` scales such that ticks are placed on band boundaries rather in the middle of a band. Use in conjunction with \`\\"bandPosition\\": 1\` and an axis \`\\"padding\\"\` value of \`0\`.",
            "type": "boolean",
          },
          "tickMinStep": Object {
            "description": "The minimum desired step between axis ticks, in terms of scale domain values. For example, a value of \`1\` indicates that ticks should not be less than 1 unit apart. If \`tickMinStep\` is specified, the \`tickCount\` value will be adjusted, if necessary, to enforce the minimum step value.

__Default value__: \`undefined\`",
            "type": "number",
          },
          "tickOffset": Object {
            "description": "Position offset in pixels to apply to ticks, labels, and gridlines.",
            "type": "number",
          },
          "tickOpacity": Object {
            "anyOf": Array [
              Object {
                "description": "Opacity of the ticks.",
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "tickRound": Object {
            "description": "Boolean flag indicating if pixel position values should be rounded to the nearest integer.

__Default value:__ \`true\`",
            "type": "boolean",
          },
          "tickSize": Object {
            "description": "The size in pixels of axis ticks.

__Default value:__ \`5\`",
            "minimum": 0,
            "type": "number",
          },
          "tickWidth": Object {
            "anyOf": Array [
              Object {
                "description": "The width, in pixels, of ticks.

__Default value:__ \`1\`",
                "minimum": 0,
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "ticks": Object {
            "description": "Boolean value that determines whether the axis should include ticks.

__Default value:__ \`true\`",
            "type": "boolean",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "titleAlign": Object {
            "$ref": "#/definitions/Align",
            "description": "Horizontal text alignment of axis titles.",
          },
          "titleAnchor": Object {
            "$ref": "#/definitions/TitleAnchor",
            "description": "Text anchor position for placing axis titles.",
          },
          "titleAngle": Object {
            "description": "Angle in degrees of axis titles.",
            "type": "number",
          },
          "titleBaseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "Vertical text baseline for axis titles.",
          },
          "titleColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Color of the title, can be in hex color code or regular color name.",
          },
          "titleFont": Object {
            "description": "Font of the title. (e.g., \`\\"Helvetica Neue\\"\`).",
            "type": "string",
          },
          "titleFontSize": Object {
            "description": "Font size of the title.",
            "minimum": 0,
            "type": "number",
          },
          "titleFontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "Font style of the title.",
          },
          "titleFontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "Font weight of the title.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "titleLimit": Object {
            "description": "Maximum allowed pixel width of axis titles.",
            "minimum": 0,
            "type": "number",
          },
          "titleLineHeight": Object {
            "description": "Line height in pixels for multi-line title text.",
            "type": "number",
          },
          "titleOpacity": Object {
            "description": "Opacity of the axis title.",
            "type": "number",
          },
          "titlePadding": Object {
            "description": "The padding, in pixels, between title and axis.",
            "type": "number",
          },
          "titleX": Object {
            "description": "X-coordinate of the axis title relative to the axis group.",
            "type": "number",
          },
          "titleY": Object {
            "description": "Y-coordinate of the axis title relative to the axis group.",
            "type": "number",
          },
          "translate": Object {
            "description": "Translation offset in pixels applied to the axis group mark x and y. If specified, overrides the default behavior of a 0.5 offset to pixel-align stroked lines.",
            "type": "number",
          },
          "values": Object {
            "anyOf": Array [
              Object {
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
              Object {
                "items": Object {
                  "type": "boolean",
                },
                "type": "array",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/DateTime",
                },
                "type": "array",
              },
            ],
            "description": "Explicitly set the visible axis tick values.",
          },
          "zindex": Object {
            "description": "A non-negative integer indicating the z-index of the axis.
If zindex is 0, axes should be drawn behind all chart elements.
To put them in front, set \`zindex\` to \`1\` or more.

__Default value:__ \`0\` (behind the marks).",
            "minimum": 0,
            "type": "number",
          },
        },
        "type": "object",
      },
      "AxisConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "bandPosition": Object {
            "description": "An interpolation fraction indicating where, for \`band\` scales, axis ticks should be positioned. A value of \`0\` places ticks at the left edge of their bands. A value of \`0.5\` places ticks in the middle of their bands.

  __Default value:__ \`0.5\`",
            "type": "number",
          },
          "domain": Object {
            "description": "A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.

__Default value:__ \`true\`",
            "type": "boolean",
          },
          "domainColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Color of axis domain line.

__Default value:__ \`\\"gray\\"\`.",
          },
          "domainDash": Object {
            "description": "An array of alternating [stroke, space] lengths for dashed domain lines.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "domainDashOffset": Object {
            "description": "The pixel offset at which to start drawing with the domain dash array.",
            "type": "number",
          },
          "domainOpacity": Object {
            "description": "Opacity of the axis domain line.",
            "type": "number",
          },
          "domainWidth": Object {
            "description": "Stroke width of axis domain line

__Default value:__ \`1\`",
            "type": "number",
          },
          "grid": Object {
            "description": "A boolean flag indicating if grid lines should be included as part of the axis

__Default value:__ \`true\` for [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous) that are not binned; otherwise, \`false\`.",
            "type": "boolean",
          },
          "gridColor": Object {
            "anyOf": Array [
              Object {
                "anyOf": Array [
                  Object {
                    "type": "null",
                  },
                  Object {
                    "$ref": "#/definitions/Color",
                  },
                ],
                "description": "Color of gridlines.

__Default value:__ \`\\"lightGray\\"\`.",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisColor",
              },
            ],
          },
          "gridDash": Object {
            "anyOf": Array [
              Object {
                "description": "An array of alternating [stroke, space] lengths for dashed grid lines.",
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumberArray",
              },
            ],
          },
          "gridDashOffset": Object {
            "anyOf": Array [
              Object {
                "description": "The pixel offset at which to start drawing with the grid dash array.",
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "gridOpacity": Object {
            "anyOf": Array [
              Object {
                "description": "The stroke opacity of grid (value between [0,1])

__Default value:__ \`1\`",
                "maximum": 1,
                "minimum": 0,
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "gridWidth": Object {
            "anyOf": Array [
              Object {
                "description": "The grid width, in pixels.

__Default value:__ \`1\`",
                "minimum": 0,
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "labelAlign": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Align",
                "description": "Horizontal text alignment of axis tick labels, overriding the default setting for the current axis orientation.",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "labelAngle": Object {
            "description": "The rotation angle of the axis labels.

__Default value:__ \`-90\` for nominal and ordinal fields; \`0\` otherwise.",
            "maximum": 360,
            "minimum": -360,
            "type": "number",
          },
          "labelBaseline": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/TextBaseline",
                "description": "Vertical text baseline of axis tick labels, overriding the default setting for the current axis orientation. Can be \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`, or \`\\"alphabetic\\"\`.",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisLabelBaseline",
              },
            ],
          },
          "labelBound": Object {
            "description": "Indicates if labels should be hidden if they exceed the axis range. If \`false\` (the default) no bounds overlap analysis is performed. If \`true\`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.

__Default value:__ \`false\`.",
            "type": Array [
              "number",
              "boolean",
            ],
          },
          "labelColor": Object {
            "anyOf": Array [
              Object {
                "anyOf": Array [
                  Object {
                    "type": "null",
                  },
                  Object {
                    "$ref": "#/definitions/Color",
                  },
                ],
                "description": "The color of the tick label, can be in hex color code or regular color name.",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisColor",
              },
            ],
          },
          "labelFlush": Object {
            "description": "Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.

__Default value:__ \`true\` for axis of a continuous x-scale. Otherwise, \`false\`.",
            "type": Array [
              "boolean",
              "number",
            ],
          },
          "labelFlushOffset": Object {
            "description": "Indicates the number of pixels by which to offset flush-adjusted labels. For example, a value of \`2\` will push flush-adjusted labels 2 pixels outward from the center of the axis. Offsets can help the labels better visually group with corresponding axis ticks.

__Default value:__ \`0\`.",
            "type": "number",
          },
          "labelFont": Object {
            "anyOf": Array [
              Object {
                "description": "The font of the tick label.",
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisString",
              },
            ],
          },
          "labelFontSize": Object {
            "anyOf": Array [
              Object {
                "description": "The font size of the label, in pixels.",
                "minimum": 0,
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "labelFontStyle": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FontStyle",
                "description": "Font style of the title.",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisLabelFontStyle",
              },
            ],
          },
          "labelFontWeight": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FontWeight",
                "description": "Font weight of axis tick labels.",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisLabelFontWeight",
              },
            ],
          },
          "labelLimit": Object {
            "description": "Maximum allowed pixel width of axis tick labels.

__Default value:__ \`180\`",
            "type": "number",
          },
          "labelOpacity": Object {
            "anyOf": Array [
              Object {
                "description": "The opacity of the labels.",
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "labelOverlap": Object {
            "$ref": "#/definitions/LabelOverlap",
            "description": "The strategy to use for resolving overlap of axis labels. If \`false\` (the default), no overlap reduction is attempted. If set to \`true\` or \`\\"parity\\"\`, a strategy of removing every other label is used (this works well for standard linear axes). If set to \`\\"greedy\\"\`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).

__Default value:__ \`true\` for non-nominal fields with non-log scales; \`\\"greedy\\"\` for log scales; otherwise \`false\`.",
          },
          "labelPadding": Object {
            "description": "The padding, in pixels, between axis and text labels.

__Default value:__ \`2\`",
            "type": "number",
          },
          "labelSeparation": Object {
            "description": "The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default \`0\`). This property is ignored if *labelOverlap* resolution is not enabled.",
            "type": "number",
          },
          "labels": Object {
            "description": "A boolean flag indicating if labels should be included as part of the axis.

__Default value:__ \`true\`.",
            "type": "boolean",
          },
          "maxExtent": Object {
            "description": "The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.

__Default value:__ \`undefined\`.",
            "type": "number",
          },
          "minExtent": Object {
            "description": "The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.

__Default value:__ \`30\` for y-axis; \`undefined\` for x-axis.",
            "type": "number",
          },
          "orient": Object {
            "$ref": "#/definitions/AxisOrient",
            "description": "The orientation of the axis. One of \`\\"top\\"\`, \`\\"bottom\\"\`, \`\\"left\\"\` or \`\\"right\\"\`. The orientation can be used to further specialize the axis type (e.g., a y-axis oriented towards the right edge of the chart).

__Default value:__ \`\\"bottom\\"\` for x-axes and \`\\"left\\"\` for y-axes.",
          },
          "tickBand": Object {
            "description": "For band scales, indicates if ticks and grid lines should be placed at the center of a band (default) or at the band extents to indicate intervals.",
            "enum": Array [
              "center",
              "extent",
            ],
            "type": "string",
          },
          "tickColor": Object {
            "anyOf": Array [
              Object {
                "anyOf": Array [
                  Object {
                    "type": "null",
                  },
                  Object {
                    "$ref": "#/definitions/Color",
                  },
                ],
                "description": "The color of the axis's tick.

__Default value:__ \`\\"gray\\"\`",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisColor",
              },
            ],
          },
          "tickDash": Object {
            "anyOf": Array [
              Object {
                "description": "An array of alternating [stroke, space] lengths for dashed tick mark lines.",
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumberArray",
              },
            ],
          },
          "tickDashOffset": Object {
            "anyOf": Array [
              Object {
                "description": "The pixel offset at which to start drawing with the tick mark dash array.",
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "tickExtra": Object {
            "description": "Boolean flag indicating if an extra axis tick should be added for the initial position of the axis. This flag is useful for styling axes for \`band\` scales such that ticks are placed on band boundaries rather in the middle of a band. Use in conjunction with \`\\"bandPosition\\": 1\` and an axis \`\\"padding\\"\` value of \`0\`.",
            "type": "boolean",
          },
          "tickOffset": Object {
            "description": "Position offset in pixels to apply to ticks, labels, and gridlines.",
            "type": "number",
          },
          "tickOpacity": Object {
            "anyOf": Array [
              Object {
                "description": "Opacity of the ticks.",
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "tickRound": Object {
            "description": "Boolean flag indicating if pixel position values should be rounded to the nearest integer.

__Default value:__ \`true\`",
            "type": "boolean",
          },
          "tickSize": Object {
            "description": "The size in pixels of axis ticks.

__Default value:__ \`5\`",
            "minimum": 0,
            "type": "number",
          },
          "tickWidth": Object {
            "anyOf": Array [
              Object {
                "description": "The width, in pixels, of ticks.

__Default value:__ \`1\`",
                "minimum": 0,
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/ConditionalAxisNumber",
              },
            ],
          },
          "ticks": Object {
            "description": "Boolean value that determines whether the axis should include ticks.

__Default value:__ \`true\`",
            "type": "boolean",
          },
          "title": Object {
            "description": "Set to null to disable title for the axis, legend, or header.",
            "type": "null",
          },
          "titleAlign": Object {
            "$ref": "#/definitions/Align",
            "description": "Horizontal text alignment of axis titles.",
          },
          "titleAnchor": Object {
            "$ref": "#/definitions/TitleAnchor",
            "description": "Text anchor position for placing axis titles.",
          },
          "titleAngle": Object {
            "description": "Angle in degrees of axis titles.",
            "type": "number",
          },
          "titleBaseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "Vertical text baseline for axis titles.",
          },
          "titleColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Color of the title, can be in hex color code or regular color name.",
          },
          "titleFont": Object {
            "description": "Font of the title. (e.g., \`\\"Helvetica Neue\\"\`).",
            "type": "string",
          },
          "titleFontSize": Object {
            "description": "Font size of the title.",
            "minimum": 0,
            "type": "number",
          },
          "titleFontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "Font style of the title.",
          },
          "titleFontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "Font weight of the title.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "titleLimit": Object {
            "description": "Maximum allowed pixel width of axis titles.",
            "minimum": 0,
            "type": "number",
          },
          "titleLineHeight": Object {
            "description": "Line height in pixels for multi-line title text.",
            "type": "number",
          },
          "titleOpacity": Object {
            "description": "Opacity of the axis title.",
            "type": "number",
          },
          "titlePadding": Object {
            "description": "The padding, in pixels, between title and axis.",
            "type": "number",
          },
          "titleX": Object {
            "description": "X-coordinate of the axis title relative to the axis group.",
            "type": "number",
          },
          "titleY": Object {
            "description": "Y-coordinate of the axis title relative to the axis group.",
            "type": "number",
          },
          "translate": Object {
            "description": "Translation offset in pixels applied to the axis group mark x and y. If specified, overrides the default behavior of a 0.5 offset to pixel-align stroked lines.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "AxisOrient": Object {
        "enum": Array [
          "top",
          "bottom",
          "left",
          "right",
        ],
        "type": "string",
      },
      "AxisResolveMap": Object {
        "additionalProperties": false,
        "properties": Object {
          "x": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "y": Object {
            "$ref": "#/definitions/ResolveMode",
          },
        },
        "type": "object",
      },
      "BaseLegendLayout": Object {
        "additionalProperties": false,
        "properties": Object {
          "anchor": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/TitleAnchor",
              },
              Object {
                "$ref": "#/definitions/SignalRef",
              },
            ],
            "description": "The anchor point for legend orient group layout.",
          },
          "bounds": Object {
            "$ref": "#/definitions/LayoutBounds",
            "description": "The bounds calculation to use for legend orient group layout.",
          },
          "center": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/SignalRef",
              },
            ],
            "description": "A flag to center legends within a shared orient group.",
          },
          "direction": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Orientation",
              },
              Object {
                "$ref": "#/definitions/SignalRef",
              },
            ],
            "description": "The layout direction for legend orient group layout.",
          },
          "margin": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/SignalRef",
              },
            ],
            "description": "The pixel margin between legends within a orient group.",
          },
          "offset": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/SignalRef",
              },
            ],
            "description": "The pixel offset from the chart body for a legend orient group.",
          },
        },
        "type": "object",
      },
      "BaseMarkConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "align": Object {
            "$ref": "#/definitions/Align",
            "description": "The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"left\\"\`, \`\\"right\\"\`, \`\\"center\\"\`.",
          },
          "angle": Object {
            "description": "The rotation angle of the text, in degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
          },
          "aspect": Object {
            "description": "Whether to keep aspect ratio of image marks.",
            "type": "boolean",
          },
          "baseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "The vertical alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`.

__Default value:__ \`\\"middle\\"\`",
          },
          "cornerRadius": Object {
            "description": "The radius in pixels of rounded rectangle corners.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomLeft": Object {
            "description": "The radius in pixels of rounded rectangle bottom left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomRight": Object {
            "description": "The radius in pixels of rounded rectangle bottom right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopLeft": Object {
            "description": "The radius in pixels of rounded rectangle top right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopRight": Object {
            "description": "The radius in pixels of rounded rectangle top left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cursor": Object {
            "$ref": "#/definitions/Cursor",
            "description": "The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.",
          },
          "dir": Object {
            "$ref": "#/definitions/Dir",
            "description": "The direction of the text. One of \`\\"ltr\\"\` (left-to-right) or \`\\"rtl\\"\` (right-to-left). This property determines on which side is truncated in response to the limit parameter.

__Default value:__ \`\\"ltr\\"\`",
          },
          "dx": Object {
            "description": "The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "dy": Object {
            "description": "The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "ellipsis": Object {
            "description": "The ellipsis string for text truncated in response to the limit parameter.

__Default value:__ \`\\"â€¦\\"\`",
            "type": "string",
          },
          "fill": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Fill Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "fillOpacity": Object {
            "description": "The fill opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "font": Object {
            "description": "The typeface to set the text in (e.g., \`\\"Helvetica Neue\\"\`).",
            "type": "string",
          },
          "fontSize": Object {
            "description": "The font size, in pixels.",
            "type": "number",
          },
          "fontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style (e.g., \`\\"italic\\"\`).",
          },
          "fontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "The font weight.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "height": Object {
            "description": "Height of the marks.",
            "type": "number",
          },
          "href": Object {
            "description": "A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",
            "format": "uri",
            "type": "string",
          },
          "interpolate": Object {
            "$ref": "#/definitions/Interpolate",
            "description": "The line interpolation method to use for line and area marks. One of the following:
- \`\\"linear\\"\`: piecewise linear segments, as in a polyline.
- \`\\"linear-closed\\"\`: close the linear segments to form a polygon.
- \`\\"step\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"step-before\\"\`: alternate between vertical and horizontal segments, as in a step function.
- \`\\"step-after\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"basis\\"\`: a B-spline, with control point duplication on the ends.
- \`\\"basis-open\\"\`: an open B-spline; may not intersect the start or end.
- \`\\"basis-closed\\"\`: a closed B-spline, as in a loop.
- \`\\"cardinal\\"\`: a Cardinal spline, with control point duplication on the ends.
- \`\\"cardinal-open\\"\`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
- \`\\"cardinal-closed\\"\`: a closed Cardinal spline, as in a loop.
- \`\\"bundle\\"\`: equivalent to basis, except the tension parameter is used to straighten the spline.
- \`\\"monotone\\"\`: cubic interpolation that preserves monotonicity in y.",
          },
          "limit": Object {
            "description": "The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.

__Default value:__ \`0\`, indicating no limit",
            "type": "number",
          },
          "lineBreak": Object {
            "description": "A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property will be ignored if the text property is array-valued.",
            "type": "string",
          },
          "lineHeight": Object {
            "description": "The height, in pixels, of each line of text in a multi-line text mark.",
            "type": "number",
          },
          "opacity": Object {
            "description": "The overall opacity (value between [0,1]).

__Default value:__ \`0.7\` for non-aggregate plots with \`point\`, \`tick\`, \`circle\`, or \`square\` marks or layered \`bar\` charts and \`1\` otherwise.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "orient": Object {
            "$ref": "#/definitions/Orientation",
            "description": "The orientation of a non-stacked bar, tick, area, and line charts.
The value is either horizontal (default) or vertical.
- For bar, rule and tick, this determines whether the size of the bar and tick
should be applied to x or y dimension.
- For area, this property determines the orient property of the Vega output.
- For line and trail marks, this property determines the sort order of the points in the line
if \`config.sortLineBy\` is not specified.
For stacked charts, this is always determined by the orientation of the stack;
therefore explicitly specified value will be ignored.",
          },
          "radius": Object {
            "description": "Polar coordinate radial offset, in pixels, of the text label from the origin determined by the \`x\` and \`y\` properties.",
            "minimum": 0,
            "type": "number",
          },
          "shape": Object {
            "description": "Shape of the point marks. Supported values include:
- plotting shapes: \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"cross\\"\`, \`\\"diamond\\"\`, \`\\"triangle-up\\"\`, \`\\"triangle-down\\"\`, \`\\"triangle-right\\"\`, or \`\\"triangle-left\\"\`.
- the line symbol \`\\"stroke\\"\`
- centered directional shapes \`\\"arrow\\"\`, \`\\"wedge\\"\`, or \`\\"triangle\\"\`
- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)

__Default value:__ \`\\"circle\\"\`",
            "type": "string",
          },
          "size": Object {
            "description": "The pixel area each the point/circle/square.
For example: in the case of circles, the radius is determined in part by the square root of the size value.

__Default value:__ \`30\`",
            "minimum": 0,
            "type": "number",
          },
          "stroke": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Stroke Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "strokeCap": Object {
            "$ref": "#/definitions/StrokeCap",
            "description": "The stroke cap for line ending style. One of \`\\"butt\\"\`, \`\\"round\\"\`, or \`\\"square\\"\`.

__Default value:__ \`\\"square\\"\`",
          },
          "strokeDash": Object {
            "description": "An array of alternating stroke, space lengths for creating dashed or dotted lines.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "strokeDashOffset": Object {
            "description": "The offset (in pixels) into which to begin drawing with the stroke dash array.",
            "type": "number",
          },
          "strokeJoin": Object {
            "$ref": "#/definitions/StrokeJoin",
            "description": "The stroke line join method. One of \`\\"miter\\"\`, \`\\"round\\"\` or \`\\"bevel\\"\`.

__Default value:__ \`\\"miter\\"\`",
          },
          "strokeMiterLimit": Object {
            "description": "The miter limit at which to bevel a line join.",
            "type": "number",
          },
          "strokeOpacity": Object {
            "description": "The stroke opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "strokeWidth": Object {
            "description": "The stroke width, in pixels.",
            "minimum": 0,
            "type": "number",
          },
          "tension": Object {
            "description": "Depending on the interpolation type, sets the tension parameter (for line and area marks).",
            "type": "number",
          },
          "text": Object {
            "$ref": "#/definitions/Text",
            "description": "Placeholder text if the \`text\` channel is not specified",
          },
          "theta": Object {
            "description": "Polar coordinate angle, in radians, of the text label from the origin determined by the \`x\` and \`y\` properties. Values for \`theta\` follow the same convention of \`arc\` mark \`startAngle\` and \`endAngle\` properties: angles are measured in radians, with \`0\` indicating \\"north\\".",
            "type": "number",
          },
          "tooltip": Object {
            "description": "The tooltip text to show upon mouse hover.",
          },
          "width": Object {
            "description": "Width of the marks.",
            "type": "number",
          },
          "x": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X coordinates of the marks, or width of horizontal \`\\"bar\\"\` and \`\\"area\\"\` without specified \`x2\` or \`width\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "x2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "y": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y coordinates of the marks, or height of vertical \`\\"bar\\"\` and \`\\"area\\"\` without specified \`y2\` or \`height\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "y2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
        },
        "type": "object",
      },
      "BaseTitleNoValueRefs": Object {
        "$ref": "#/definitions/ExcludeMappedValueRef<BaseTitle>",
      },
      "Baseline": Object {
        "enum": Array [
          "top",
          "middle",
          "bottom",
        ],
        "type": "string",
      },
      "BinExtent": Object {
        "anyOf": Array [
          Object {
            "items": Array [
              Object {
                "type": "number",
              },
              Object {
                "type": "number",
              },
            ],
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          Object {
            "$ref": "#/definitions/SelectionExtent",
          },
        ],
      },
      "BinParams": Object {
        "additionalProperties": false,
        "description": "Binning properties or boolean flag for determining whether to bin data or not.",
        "properties": Object {
          "anchor": Object {
            "description": "A value in the binned domain at which to anchor the bins, shifting the bin boundaries if necessary to ensure that a boundary aligns with the anchor value.

__Default value:__ the minimum bin extent value",
            "type": "number",
          },
          "base": Object {
            "description": "The number base to use for automatic bin determination (default is base 10).

__Default value:__ \`10\`",
            "type": "number",
          },
          "binned": Object {
            "description": "When set to \`true\`, Vega-Lite treats the input data as already binned.",
            "type": "boolean",
          },
          "divide": Object {
            "description": "Scale factors indicating allowable subdivisions. The default value is [5, 2], which indicates that for base 10 numbers (the default base), the method may consider dividing bin sizes by 5 and/or 2. For example, for an initial step size of 10, the method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1 (= 10/(5*2)) might also satisfy the given constraints.

__Default value:__ \`[5, 2]\`",
            "items": Array [
              Object {
                "type": "number",
              },
              Object {
                "type": "number",
              },
            ],
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
          },
          "extent": Object {
            "$ref": "#/definitions/BinExtent",
            "description": "A two-element (\`[min, max]\`) array indicating the range of desired bin values.",
          },
          "maxbins": Object {
            "description": "Maximum number of bins.

__Default value:__ \`6\` for \`row\`, \`column\` and \`shape\` channels; \`10\` for other channels",
            "minimum": 2,
            "type": "number",
          },
          "minstep": Object {
            "description": "A minimum allowable step size (particularly useful for integer values).",
            "type": "number",
          },
          "nice": Object {
            "description": "If true, attempts to make the bin boundaries use human-friendly boundaries, such as multiples of ten.

__Default value:__ \`true\`",
            "type": "boolean",
          },
          "step": Object {
            "description": "An exact step size to use between bins.

__Note:__ If provided, options such as maxbins will be ignored.",
            "type": "number",
          },
          "steps": Object {
            "description": "An array of allowable step sizes to choose from.",
            "items": Object {
              "type": "number",
            },
            "minItems": 1,
            "type": "array",
          },
        },
        "type": "object",
      },
      "BinTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FieldName",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/FieldName",
                },
                "type": "array",
              },
            ],
            "description": "The output fields at which to write the start and end bin values.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "enum": Array [
                  true,
                ],
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
            ],
            "description": "An object indicating bin properties, or simply \`true\` for using default bin parameters.",
          },
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field to bin.",
          },
        },
        "required": Array [
          "bin",
          "field",
          "as",
        ],
        "type": "object",
      },
      "BindCheckbox": Object {
        "additionalProperties": false,
        "properties": Object {
          "debounce": Object {
            "type": "number",
          },
          "element": Object {
            "$ref": "#/definitions/Element",
          },
          "input": Object {
            "enum": Array [
              "checkbox",
            ],
            "type": "string",
          },
          "name": Object {
            "type": "string",
          },
          "type": Object {
            "type": "string",
          },
        },
        "required": Array [
          "input",
        ],
        "type": "object",
      },
      "BindRadioSelect": Object {
        "additionalProperties": false,
        "properties": Object {
          "debounce": Object {
            "type": "number",
          },
          "element": Object {
            "$ref": "#/definitions/Element",
          },
          "input": Object {
            "enum": Array [
              "radio",
              "select",
            ],
            "type": "string",
          },
          "labels": Object {
            "items": Object {
              "type": "string",
            },
            "type": "array",
          },
          "name": Object {
            "type": "string",
          },
          "options": Object {
            "items": Object {},
            "type": "array",
          },
          "type": Object {
            "type": "string",
          },
        },
        "required": Array [
          "input",
          "options",
        ],
        "type": "object",
      },
      "BindRange": Object {
        "additionalProperties": false,
        "properties": Object {
          "debounce": Object {
            "type": "number",
          },
          "element": Object {
            "$ref": "#/definitions/Element",
          },
          "input": Object {
            "enum": Array [
              "range",
            ],
            "type": "string",
          },
          "max": Object {
            "type": "number",
          },
          "min": Object {
            "type": "number",
          },
          "name": Object {
            "type": "string",
          },
          "step": Object {
            "type": "number",
          },
          "type": Object {
            "type": "string",
          },
        },
        "required": Array [
          "input",
        ],
        "type": "object",
      },
      "Binding": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/BindCheckbox",
          },
          Object {
            "$ref": "#/definitions/BindRadioSelect",
          },
          Object {
            "$ref": "#/definitions/BindRange",
          },
          Object {
            "$ref": "#/definitions/InputBinding",
          },
        ],
      },
      "BoxPlot": Object {
        "enum": Array [
          "boxplot",
        ],
        "type": "string",
      },
      "BoxPlotConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "box": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "extent": Object {
            "anyOf": Array [
              Object {
                "enum": Array [
                  "min-max",
                ],
                "type": "string",
              },
              Object {
                "type": "number",
              },
            ],
            "description": "The extent of the whiskers. Available options include:
- \`\\"min-max\\"\`: min and max are the lower and upper whiskers respectively.
- A number representing multiple of the interquartile range. This number will be multiplied by the IQR to determine whisker boundary, which spans from the smallest data to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_ are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).

__Default value:__ \`1.5\`.",
          },
          "median": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "outliers": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "rule": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "size": Object {
            "description": "Size of the box and median tick of a box plot",
            "type": "number",
          },
          "ticks": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
        },
        "type": "object",
      },
      "BoxPlotDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "box": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "clip": Object {
            "description": "Whether a composite mark be clipped to the enclosing groupâ€™s width and height.",
            "type": "boolean",
          },
          "color": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
            ],
            "description": "Default color.

__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> \`\\"#4682b4\\"\`

__Note:__
- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
- The \`fill\` and \`stroke\` properties have higher precedence than \`color\` and will override \`color\`.",
          },
          "extent": Object {
            "anyOf": Array [
              Object {
                "enum": Array [
                  "min-max",
                ],
                "type": "string",
              },
              Object {
                "type": "number",
              },
            ],
            "description": "The extent of the whiskers. Available options include:
- \`\\"min-max\\"\`: min and max are the lower and upper whiskers respectively.
- A number representing multiple of the interquartile range. This number will be multiplied by the IQR to determine whisker boundary, which spans from the smallest data to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_ are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).

__Default value:__ \`1.5\`.",
          },
          "median": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "opacity": Object {
            "description": "The opacity (value between [0,1]) of the mark.",
            "type": "number",
          },
          "orient": Object {
            "$ref": "#/definitions/Orientation",
            "description": "Orientation of the box plot. This is normally automatically determined based on types of fields on x and y channels. However, an explicit \`orient\` be specified when the orientation is ambiguous.

__Default value:__ \`\\"vertical\\"\`.",
          },
          "outliers": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "rule": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "size": Object {
            "description": "Size of the box and median tick of a box plot",
            "type": "number",
          },
          "ticks": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "type": Object {
            "$ref": "#/definitions/BoxPlot",
            "description": "The mark type. This could a primitive mark type
(one of \`\\"bar\\"\`, \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"tick\\"\`, \`\\"line\\"\`,
\`\\"area\\"\`, \`\\"point\\"\`, \`\\"geoshape\\"\`, \`\\"rule\\"\`, and \`\\"text\\"\`)
or a composite mark type (\`\\"boxplot\\"\`, \`\\"errorband\\"\`, \`\\"errorbar\\"\`).",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "BrushConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "fill": Object {
            "$ref": "#/definitions/Color",
            "description": "The fill color of the interval mark.

__Default value:__ \`\\"#333333\\"\`",
          },
          "fillOpacity": Object {
            "description": "The fill opacity of the interval mark (a value between 0 and 1).

__Default value:__ \`0.125\`",
            "type": "number",
          },
          "stroke": Object {
            "$ref": "#/definitions/Color",
            "description": "The stroke color of the interval mark.

__Default value:__ \`\\"#ffffff\\"\`",
          },
          "strokeDash": Object {
            "description": "An array of alternating stroke and space lengths,
for creating dashed or dotted lines.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "strokeDashOffset": Object {
            "description": "The offset (in pixels) with which to begin drawing the stroke dash array.",
            "type": "number",
          },
          "strokeOpacity": Object {
            "description": "The stroke opacity of the interval mark (a value between \`0\` and \`1\`).",
            "type": "number",
          },
          "strokeWidth": Object {
            "description": "The stroke width of the interval mark.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "CalculateTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The field for storing the computed formula value.",
          },
          "calculate": Object {
            "description": "A [expression](https://vega.github.io/vega-lite/docs/types.html#expression) string. Use the variable \`datum\` to refer to the current data object.",
            "type": "string",
          },
        },
        "required": Array [
          "calculate",
          "as",
        ],
        "type": "object",
      },
      "Categorical": Object {
        "enum": Array [
          "accent",
          "category10",
          "category20",
          "category20b",
          "category20c",
          "dark2",
          "paired",
          "pastel1",
          "pastel2",
          "set1",
          "set2",
          "set3",
          "tableau10",
          "tableau20",
        ],
        "type": "string",
      },
      "Color": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/ColorName",
          },
          Object {
            "$ref": "#/definitions/HexColor",
          },
          Object {
            "type": "string",
          },
        ],
      },
      "ColorGradientFieldDefWithCondition": Object {
        "$ref": "#/definitions/FieldDefWithCondition<MarkPropFieldDef,(Gradient|string|null)>",
      },
      "ColorGradientValueDefWithCondition": Object {
        "$ref": "#/definitions/ValueDefWithCondition<MarkPropFieldDef,(Gradient|string|null)>",
      },
      "ColorName": Object {
        "enum": Array [
          "black",
          "silver",
          "gray",
          "white",
          "maroon",
          "red",
          "purple",
          "fuchsia",
          "green",
          "lime",
          "olive",
          "yellow",
          "navy",
          "blue",
          "teal",
          "aqua",
          "orange",
          "aliceblue",
          "antiquewhite",
          "aquamarine",
          "azure",
          "beige",
          "bisque",
          "blanchedalmond",
          "blueviolet",
          "brown",
          "burlywood",
          "cadetblue",
          "chartreuse",
          "chocolate",
          "coral",
          "cornflowerblue",
          "cornsilk",
          "crimson",
          "cyan",
          "darkblue",
          "darkcyan",
          "darkgoldenrod",
          "darkgray",
          "darkgreen",
          "darkgrey",
          "darkkhaki",
          "darkmagenta",
          "darkolivegreen",
          "darkorange",
          "darkorchid",
          "darkred",
          "darksalmon",
          "darkseagreen",
          "darkslateblue",
          "darkslategray",
          "darkslategrey",
          "darkturquoise",
          "darkviolet",
          "deeppink",
          "deepskyblue",
          "dimgray",
          "dimgrey",
          "dodgerblue",
          "firebrick",
          "floralwhite",
          "forestgreen",
          "gainsboro",
          "ghostwhite",
          "gold",
          "goldenrod",
          "greenyellow",
          "grey",
          "honeydew",
          "hotpink",
          "indianred",
          "indigo",
          "ivory",
          "khaki",
          "lavender",
          "lavenderblush",
          "lawngreen",
          "lemonchiffon",
          "lightblue",
          "lightcoral",
          "lightcyan",
          "lightgoldenrodyellow",
          "lightgray",
          "lightgreen",
          "lightgrey",
          "lightpink",
          "lightsalmon",
          "lightseagreen",
          "lightskyblue",
          "lightslategray",
          "lightslategrey",
          "lightsteelblue",
          "lightyellow",
          "limegreen",
          "linen",
          "magenta",
          "mediumaquamarine",
          "mediumblue",
          "mediumorchid",
          "mediumpurple",
          "mediumseagreen",
          "mediumslateblue",
          "mediumspringgreen",
          "mediumturquoise",
          "mediumvioletred",
          "midnightblue",
          "mintcream",
          "mistyrose",
          "moccasin",
          "navajowhite",
          "oldlace",
          "olivedrab",
          "orangered",
          "orchid",
          "palegoldenrod",
          "palegreen",
          "paleturquoise",
          "palevioletred",
          "papayawhip",
          "peachpuff",
          "peru",
          "pink",
          "plum",
          "powderblue",
          "rosybrown",
          "royalblue",
          "saddlebrown",
          "salmon",
          "sandybrown",
          "seagreen",
          "seashell",
          "sienna",
          "skyblue",
          "slateblue",
          "slategray",
          "slategrey",
          "snow",
          "springgreen",
          "steelblue",
          "tan",
          "thistle",
          "tomato",
          "turquoise",
          "violet",
          "wheat",
          "whitesmoke",
          "yellowgreen",
          "rebeccapurple",
        ],
        "type": "string",
      },
      "ColorScheme": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/Categorical",
          },
          Object {
            "$ref": "#/definitions/SequentialSingleHue",
          },
          Object {
            "$ref": "#/definitions/SequentialMultiHue",
          },
          Object {
            "$ref": "#/definitions/Diverging",
          },
          Object {
            "$ref": "#/definitions/Cyclical",
          },
        ],
      },
      "CompositeMark": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/BoxPlot",
          },
          Object {
            "$ref": "#/definitions/ErrorBar",
          },
          Object {
            "$ref": "#/definitions/ErrorBand",
          },
        ],
      },
      "CompositeMarkDef": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/BoxPlotDef",
          },
          Object {
            "$ref": "#/definitions/ErrorBarDef",
          },
          Object {
            "$ref": "#/definitions/ErrorBandDef",
          },
        ],
      },
      "CompositionConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "columns": Object {
            "description": "The number of columns to include in the view composition layout.

__Default value__: \`undefined\` -- An infinite number of columns (a single row) will be assumed. This is equivalent to
\`hconcat\` (for \`concat\`) and to using the \`column\` channel (for \`facet\` and \`repeat\`).

__Note__:

1) This property is only for:
- the general (wrappable) \`concat\` operator (not \`hconcat\`/\`vconcat\`)
- the \`facet\` and \`repeat\` operator with one field/repetition definition (without row/column nesting)

2) Setting the \`columns\` to \`1\` is equivalent to \`vconcat\` (for \`concat\`) and to using the \`row\` channel (for \`facet\` and \`repeat\`).",
            "type": "number",
          },
          "spacing": Object {
            "description": "The default spacing in pixels between composed sub-views.

__Default value__: \`20\`",
            "type": "number",
          },
        },
        "type": "object",
      },
      "ConcatSpec": Object {
        "additionalProperties": false,
        "description": "Base interface for a generalized concatenation specification.",
        "properties": Object {
          "align": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LayoutAlign",
              },
              Object {
                "$ref": "#/definitions/RowCol<LayoutAlign>",
              },
            ],
            "description": "The alignment to apply to grid rows and columns.
The supported string values are \`\\"all\\"\`, \`\\"each\\"\`, and \`\\"none\\"\`.

- For \`\\"none\\"\`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
- For \`\\"each\\"\`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
- For \`\\"all\\"\`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.

Alternatively, an object value of the form \`{\\"row\\": string, \\"column\\": string}\` can be used to supply different alignments for rows and columns.

__Default value:__ \`\\"all\\"\`.",
          },
          "bounds": Object {
            "description": "The bounds calculation method to use for determining the extent of a sub-plot. One of \`full\` (the default) or \`flush\`.

- If set to \`full\`, the entire calculated bounds (including axes, title, and legend) will be used.
- If set to \`flush\`, only the specified width and height values for the sub-view will be used. The \`flush\` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.

__Default value:__ \`\\"full\\"\`",
            "enum": Array [
              "full",
              "flush",
            ],
            "type": "string",
          },
          "center": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/RowCol<boolean>",
              },
            ],
            "description": "Boolean flag indicating if subviews should be centered relative to their respective rows or columns.

An object value of the form \`{\\"row\\": boolean, \\"column\\": boolean}\` can be used to supply different centering values for rows and columns.

__Default value:__ \`false\`",
          },
          "columns": Object {
            "description": "The number of columns to include in the view composition layout.

__Default value__: \`undefined\` -- An infinite number of columns (a single row) will be assumed. This is equivalent to
\`hconcat\` (for \`concat\`) and to using the \`column\` channel (for \`facet\` and \`repeat\`).

__Note__:

1) This property is only for:
- the general (wrappable) \`concat\` operator (not \`hconcat\`/\`vconcat\`)
- the \`facet\` and \`repeat\` operator with one field/repetition definition (without row/column nesting)

2) Setting the \`columns\` to \`1\` is equivalent to \`vconcat\` (for \`concat\`) and to using the \`row\` channel (for \`facet\` and \`repeat\`).",
            "type": "number",
          },
          "concat": Object {
            "description": "A list of views to be concatenated.",
            "items": Object {
              "$ref": "#/definitions/Spec",
            },
            "type": "array",
          },
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "spacing": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/RowCol<number>",
              },
            ],
            "description": "The spacing in pixels between sub-views of the composition operator.
An object of the form \`{\\"row\\": number, \\"column\\": number}\` can be used to set
different spacing values for rows and columns.

__Default value__: Depends on \`\\"spacing\\"\` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (\`20\` by default)",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
        },
        "required": Array [
          "concat",
        ],
        "type": "object",
      },
      "ConditionalAxisColor": Object {
        "$ref": "#/definitions/ConditionalAxisProperty<(Color|null)>",
      },
      "ConditionalAxisLabelBaseline": Object {
        "$ref": "#/definitions/ConditionalAxisProperty<(TextBaseline|null)>",
      },
      "ConditionalAxisLabelFontStyle": Object {
        "$ref": "#/definitions/ConditionalAxisProperty<(FontStyle|null)>",
      },
      "ConditionalAxisLabelFontWeight": Object {
        "$ref": "#/definitions/ConditionalAxisProperty<(FontWeight|null)>",
      },
      "ConditionalAxisNumber": Object {
        "$ref": "#/definitions/ConditionalAxisProperty<(number|null)>",
      },
      "ConditionalAxisNumberArray": Object {
        "$ref": "#/definitions/ConditionalAxisProperty<(number[]|null)>",
      },
      "ConditionalAxisProperty<(Color|null)>": Object {
        "additionalProperties": false,
        "properties": Object {
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalPredicate<ValueDef<(Color|null)>>",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalPredicate<ValueDef<(Color|null)>>",
                },
                "type": "array",
              },
            ],
          },
          "value": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "condition",
          "value",
        ],
        "type": "object",
      },
      "ConditionalAxisProperty<(FontStyle|null)>": Object {
        "additionalProperties": false,
        "properties": Object {
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalPredicate<ValueDef<(FontStyle|null)>>",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalPredicate<ValueDef<(FontStyle|null)>>",
                },
                "type": "array",
              },
            ],
          },
          "value": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FontStyle",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "condition",
          "value",
        ],
        "type": "object",
      },
      "ConditionalAxisProperty<(FontWeight|null)>": Object {
        "additionalProperties": false,
        "properties": Object {
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalPredicate<ValueDef<(FontWeight|null)>>",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalPredicate<ValueDef<(FontWeight|null)>>",
                },
                "type": "array",
              },
            ],
          },
          "value": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FontWeight",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "condition",
          "value",
        ],
        "type": "object",
      },
      "ConditionalAxisProperty<(TextBaseline|null)>": Object {
        "additionalProperties": false,
        "properties": Object {
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalPredicate<ValueDef<(TextBaseline|null)>>",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalPredicate<ValueDef<(TextBaseline|null)>>",
                },
                "type": "array",
              },
            ],
          },
          "value": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/TextBaseline",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "condition",
          "value",
        ],
        "type": "object",
      },
      "ConditionalAxisProperty<(number[]|null)>": Object {
        "additionalProperties": false,
        "properties": Object {
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalPredicate<ValueDef<(number[]|null)>>",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalPredicate<ValueDef<(number[]|null)>>",
                },
                "type": "array",
              },
            ],
          },
          "value": Object {
            "anyOf": Array [
              Object {
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "condition",
          "value",
        ],
        "type": "object",
      },
      "ConditionalAxisProperty<(number|null)>": Object {
        "additionalProperties": false,
        "properties": Object {
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalPredicate<ValueDef<(number|null)>>",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalPredicate<ValueDef<(number|null)>>",
                },
                "type": "array",
              },
            ],
          },
          "value": Object {
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
            "type": Array [
              "number",
              "null",
            ],
          },
        },
        "required": Array [
          "condition",
          "value",
        ],
        "type": "object",
      },
      "ConditionalAxisProperty<(string|null)>": Object {
        "additionalProperties": false,
        "properties": Object {
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalPredicate<StringValueDef>",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalPredicate<StringValueDef>",
                },
                "type": "array",
              },
            ],
          },
          "value": Object {
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
            "type": Array [
              "string",
              "null",
            ],
          },
        },
        "required": Array [
          "condition",
          "value",
        ],
        "type": "object",
      },
      "ConditionalAxisString": Object {
        "$ref": "#/definitions/ConditionalAxisProperty<(string|null)>",
      },
      "ConditionalMarkPropFieldDef": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/ConditionalPredicate<MarkPropFieldDef>",
          },
          Object {
            "$ref": "#/definitions/ConditionalSelection<MarkPropFieldDef>",
          },
        ],
      },
      "ConditionalMarkPropFieldDef<TypeForShape>": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/ConditionalPredicate<MarkPropFieldDef<TypeForShape>>",
          },
          Object {
            "$ref": "#/definitions/ConditionalSelection<MarkPropFieldDef<TypeForShape>>",
          },
        ],
      },
      "ConditionalNumberValueDef": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/ConditionalPredicate<NumberValueDef>",
          },
          Object {
            "$ref": "#/definitions/ConditionalSelection<NumberValueDef>",
          },
        ],
      },
      "ConditionalPredicate<MarkPropFieldDef<TypeForShape>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "legend": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Legend",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the legend.
If \`null\`, the legend for the encoding channel will be removed.

__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.

__See also:__ [\`legend\`](https://vega.github.io/vega-lite/docs/legend.html) documentation.",
          },
          "scale": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Scale",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.

If \`null\`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).

__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.

__See also:__ [\`scale\`](https://vega.github.io/vega-lite/docs/scale.html) documentation.",
          },
          "sort": Object {
            "$ref": "#/definitions/Sort",
            "description": "Sort order for the encoded field.

For continuous fields (quantitative or temporal), \`sort\` can be either \`\\"ascending\\"\` or \`\\"descending\\"\`.

For discrete fields, \`sort\` can be one of the following:
- \`\\"ascending\\"\` or \`\\"descending\\"\` -- for sorting by the values' natural order in JavaScript.
- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., \`\\"x\\"\` or \`\\"y\\"\`) with an optional minus prefix for descending sort (e.g., \`\\"-x\\"\` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, \`\\"sort\\": \\"-x\\"\` is equivalent to \`\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}\`.
- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units \`\\"month\\"\` and \`\\"day\\"\`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., \`\\"Mon\\"\`, \`\\"Tue\\"\`).
- \`null\` indicating no sort.

__Default value:__ \`\\"ascending\\"\`

__Note:__ \`null\` and sorting by another channel is not supported for \`row\` and \`column\`.

__See also:__ [\`sort\`](https://vega.github.io/vega-lite/docs/sort.html) documentation.",
          },
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/TypeForShape",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "test",
          "type",
        ],
        "type": "object",
      },
      "ConditionalPredicate<MarkPropFieldDef>": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "legend": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Legend",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the legend.
If \`null\`, the legend for the encoding channel will be removed.

__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.

__See also:__ [\`legend\`](https://vega.github.io/vega-lite/docs/legend.html) documentation.",
          },
          "scale": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Scale",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.

If \`null\`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).

__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.

__See also:__ [\`scale\`](https://vega.github.io/vega-lite/docs/scale.html) documentation.",
          },
          "sort": Object {
            "$ref": "#/definitions/Sort",
            "description": "Sort order for the encoded field.

For continuous fields (quantitative or temporal), \`sort\` can be either \`\\"ascending\\"\` or \`\\"descending\\"\`.

For discrete fields, \`sort\` can be one of the following:
- \`\\"ascending\\"\` or \`\\"descending\\"\` -- for sorting by the values' natural order in JavaScript.
- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., \`\\"x\\"\` or \`\\"y\\"\`) with an optional minus prefix for descending sort (e.g., \`\\"-x\\"\` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, \`\\"sort\\": \\"-x\\"\` is equivalent to \`\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}\`.
- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units \`\\"month\\"\` and \`\\"day\\"\`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., \`\\"Mon\\"\`, \`\\"Tue\\"\`).
- \`null\` indicating no sort.

__Default value:__ \`\\"ascending\\"\`

__Note:__ \`null\` and sorting by another channel is not supported for \`row\` and \`column\`.

__See also:__ [\`sort\`](https://vega.github.io/vega-lite/docs/sort.html) documentation.",
          },
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "test",
          "type",
        ],
        "type": "object",
      },
      "ConditionalPredicate<NumberValueDef>": Object {
        "additionalProperties": false,
        "properties": Object {
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "value": Object {
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
            "type": "number",
          },
        },
        "required": Array [
          "test",
          "value",
        ],
        "type": "object",
      },
      "ConditionalPredicate<StringFieldDef>": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "enum": Array [
                  "binned",
                ],
                "type": "string",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "format": Object {
            "description": "The text formatting pattern for labels of guides (axes, legends, headers) and text marks.

- If the format type is \`\\"number\\"\` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
- If the format type is \`\\"time\\"\` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).

See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.

__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.",
            "type": "string",
          },
          "formatType": Object {
            "description": "The format type for labels (\`\\"number\\"\` or \`\\"time\\"\`).

__Default value:__
- \`\\"time\\"\` for temporal fields and ordinal and nomimal fields with \`timeUnit\`.
- \`\\"number\\"\` for quantitative fields as well as ordinal and nomimal fields without \`timeUnit\`.",
            "enum": Array [
              "number",
              "time",
            ],
            "type": "string",
          },
          "labelExpr": Object {
            "description": "[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels text.

__Note:__ The label text and value can be assessed via the \`label\` and \`value\` properties of the axis's backing \`datum\` object.",
            "type": "string",
          },
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "test",
          "type",
        ],
        "type": "object",
      },
      "ConditionalPredicate<StringValueDef>": Object {
        "additionalProperties": false,
        "properties": Object {
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "value": Object {
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
            "type": Array [
              "string",
              "null",
            ],
          },
        },
        "required": Array [
          "test",
          "value",
        ],
        "type": "object",
      },
      "ConditionalPredicate<ValueDef<(Color|null)>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "value": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "test",
          "value",
        ],
        "type": "object",
      },
      "ConditionalPredicate<ValueDef<(FontStyle|null)>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "value": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FontStyle",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "test",
          "value",
        ],
        "type": "object",
      },
      "ConditionalPredicate<ValueDef<(FontWeight|null)>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "value": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FontWeight",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "test",
          "value",
        ],
        "type": "object",
      },
      "ConditionalPredicate<ValueDef<(Gradient|string|null)>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "value": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "string",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "test",
          "value",
        ],
        "type": "object",
      },
      "ConditionalPredicate<ValueDef<(TextBaseline|null)>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "value": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/TextBaseline",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "test",
          "value",
        ],
        "type": "object",
      },
      "ConditionalPredicate<ValueDef<(number[]|null)>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "value": Object {
            "anyOf": Array [
              Object {
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "test",
          "value",
        ],
        "type": "object",
      },
      "ConditionalPredicate<ValueDef<(number|null)>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "value": Object {
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
            "type": Array [
              "number",
              "null",
            ],
          },
        },
        "required": Array [
          "test",
          "value",
        ],
        "type": "object",
      },
      "ConditionalPredicate<ValueDef<Text>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "value": Object {
            "$ref": "#/definitions/Text",
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "test",
          "value",
        ],
        "type": "object",
      },
      "ConditionalPredicate<ValueDef<string>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "test": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "Predicate for triggering the condition",
          },
          "value": Object {
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
            "type": "string",
          },
        },
        "required": Array [
          "test",
          "value",
        ],
        "type": "object",
      },
      "ConditionalSelection<MarkPropFieldDef<TypeForShape>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "legend": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Legend",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the legend.
If \`null\`, the legend for the encoding channel will be removed.

__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.

__See also:__ [\`legend\`](https://vega.github.io/vega-lite/docs/legend.html) documentation.",
          },
          "scale": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Scale",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.

If \`null\`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).

__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.

__See also:__ [\`scale\`](https://vega.github.io/vega-lite/docs/scale.html) documentation.",
          },
          "selection": Object {
            "$ref": "#/definitions/SelectionOperand",
            "description": "A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).",
          },
          "sort": Object {
            "$ref": "#/definitions/Sort",
            "description": "Sort order for the encoded field.

For continuous fields (quantitative or temporal), \`sort\` can be either \`\\"ascending\\"\` or \`\\"descending\\"\`.

For discrete fields, \`sort\` can be one of the following:
- \`\\"ascending\\"\` or \`\\"descending\\"\` -- for sorting by the values' natural order in JavaScript.
- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., \`\\"x\\"\` or \`\\"y\\"\`) with an optional minus prefix for descending sort (e.g., \`\\"-x\\"\` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, \`\\"sort\\": \\"-x\\"\` is equivalent to \`\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}\`.
- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units \`\\"month\\"\` and \`\\"day\\"\`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., \`\\"Mon\\"\`, \`\\"Tue\\"\`).
- \`null\` indicating no sort.

__Default value:__ \`\\"ascending\\"\`

__Note:__ \`null\` and sorting by another channel is not supported for \`row\` and \`column\`.

__See also:__ [\`sort\`](https://vega.github.io/vega-lite/docs/sort.html) documentation.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/TypeForShape",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "selection",
          "type",
        ],
        "type": "object",
      },
      "ConditionalSelection<MarkPropFieldDef>": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "legend": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Legend",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the legend.
If \`null\`, the legend for the encoding channel will be removed.

__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.

__See also:__ [\`legend\`](https://vega.github.io/vega-lite/docs/legend.html) documentation.",
          },
          "scale": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Scale",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.

If \`null\`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).

__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.

__See also:__ [\`scale\`](https://vega.github.io/vega-lite/docs/scale.html) documentation.",
          },
          "selection": Object {
            "$ref": "#/definitions/SelectionOperand",
            "description": "A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).",
          },
          "sort": Object {
            "$ref": "#/definitions/Sort",
            "description": "Sort order for the encoded field.

For continuous fields (quantitative or temporal), \`sort\` can be either \`\\"ascending\\"\` or \`\\"descending\\"\`.

For discrete fields, \`sort\` can be one of the following:
- \`\\"ascending\\"\` or \`\\"descending\\"\` -- for sorting by the values' natural order in JavaScript.
- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., \`\\"x\\"\` or \`\\"y\\"\`) with an optional minus prefix for descending sort (e.g., \`\\"-x\\"\` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, \`\\"sort\\": \\"-x\\"\` is equivalent to \`\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}\`.
- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units \`\\"month\\"\` and \`\\"day\\"\`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., \`\\"Mon\\"\`, \`\\"Tue\\"\`).
- \`null\` indicating no sort.

__Default value:__ \`\\"ascending\\"\`

__Note:__ \`null\` and sorting by another channel is not supported for \`row\` and \`column\`.

__See also:__ [\`sort\`](https://vega.github.io/vega-lite/docs/sort.html) documentation.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "selection",
          "type",
        ],
        "type": "object",
      },
      "ConditionalSelection<NumberValueDef>": Object {
        "additionalProperties": false,
        "properties": Object {
          "selection": Object {
            "$ref": "#/definitions/SelectionOperand",
            "description": "A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).",
          },
          "value": Object {
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
            "type": "number",
          },
        },
        "required": Array [
          "selection",
          "value",
        ],
        "type": "object",
      },
      "ConditionalSelection<StringFieldDef>": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "enum": Array [
                  "binned",
                ],
                "type": "string",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "format": Object {
            "description": "The text formatting pattern for labels of guides (axes, legends, headers) and text marks.

- If the format type is \`\\"number\\"\` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
- If the format type is \`\\"time\\"\` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).

See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.

__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.",
            "type": "string",
          },
          "formatType": Object {
            "description": "The format type for labels (\`\\"number\\"\` or \`\\"time\\"\`).

__Default value:__
- \`\\"time\\"\` for temporal fields and ordinal and nomimal fields with \`timeUnit\`.
- \`\\"number\\"\` for quantitative fields as well as ordinal and nomimal fields without \`timeUnit\`.",
            "enum": Array [
              "number",
              "time",
            ],
            "type": "string",
          },
          "labelExpr": Object {
            "description": "[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels text.

__Note:__ The label text and value can be assessed via the \`label\` and \`value\` properties of the axis's backing \`datum\` object.",
            "type": "string",
          },
          "selection": Object {
            "$ref": "#/definitions/SelectionOperand",
            "description": "A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "selection",
          "type",
        ],
        "type": "object",
      },
      "ConditionalSelection<StringValueDef>": Object {
        "additionalProperties": false,
        "properties": Object {
          "selection": Object {
            "$ref": "#/definitions/SelectionOperand",
            "description": "A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).",
          },
          "value": Object {
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
            "type": Array [
              "string",
              "null",
            ],
          },
        },
        "required": Array [
          "selection",
          "value",
        ],
        "type": "object",
      },
      "ConditionalSelection<ValueDef<(Gradient|string|null)>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "selection": Object {
            "$ref": "#/definitions/SelectionOperand",
            "description": "A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).",
          },
          "value": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "string",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "selection",
          "value",
        ],
        "type": "object",
      },
      "ConditionalSelection<ValueDef<Text>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "selection": Object {
            "$ref": "#/definitions/SelectionOperand",
            "description": "A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).",
          },
          "value": Object {
            "$ref": "#/definitions/Text",
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "selection",
          "value",
        ],
        "type": "object",
      },
      "ConditionalSelection<ValueDef<string>>": Object {
        "additionalProperties": false,
        "properties": Object {
          "selection": Object {
            "$ref": "#/definitions/SelectionOperand",
            "description": "A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).",
          },
          "value": Object {
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
            "type": "string",
          },
        },
        "required": Array [
          "selection",
          "value",
        ],
        "type": "object",
      },
      "ConditionalStringFieldDef": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/ConditionalPredicate<StringFieldDef>",
          },
          Object {
            "$ref": "#/definitions/ConditionalSelection<StringFieldDef>",
          },
        ],
      },
      "ConditionalStringValueDef": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/ConditionalPredicate<StringValueDef>",
          },
          Object {
            "$ref": "#/definitions/ConditionalSelection<StringValueDef>",
          },
        ],
      },
      "ConditionalValueDef<(Gradient|string|null)>": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/ConditionalPredicate<ValueDef<(Gradient|string|null)>>",
          },
          Object {
            "$ref": "#/definitions/ConditionalSelection<ValueDef<(Gradient|string|null)>>",
          },
        ],
      },
      "ConditionalValueDef<Text>": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/ConditionalPredicate<ValueDef<Text>>",
          },
          Object {
            "$ref": "#/definitions/ConditionalSelection<ValueDef<Text>>",
          },
        ],
      },
      "ConditionalValueDef<string>": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/ConditionalPredicate<ValueDef<string>>",
          },
          Object {
            "$ref": "#/definitions/ConditionalSelection<ValueDef<string>>",
          },
        ],
      },
      "Config": Object {
        "additionalProperties": false,
        "properties": Object {
          "area": Object {
            "$ref": "#/definitions/AreaConfig",
            "description": "Area-Specific Config",
          },
          "autosize": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/AutosizeType",
              },
              Object {
                "$ref": "#/definitions/AutoSizeParams",
              },
            ],
            "description": "How the visualization size should be determined. If a string, should be one of \`\\"pad\\"\`, \`\\"fit\\"\` or \`\\"none\\"\`.
Object values can additionally specify parameters for content sizing and automatic resizing.

__Default value__: \`pad\`",
          },
          "axis": Object {
            "$ref": "#/definitions/AxisConfig",
            "description": "Axis configuration, which determines default properties for all \`x\` and \`y\` [axes](https://vega.github.io/vega-lite/docs/axis.html). For a full list of axis configuration options, please see the [corresponding section of the axis documentation](https://vega.github.io/vega-lite/docs/axis.html#config).",
          },
          "axisBand": Object {
            "$ref": "#/definitions/AxisConfig",
            "description": "Specific axis config for axes with \\"band\\" scales.",
          },
          "axisBottom": Object {
            "$ref": "#/definitions/AxisConfig",
            "description": "Specific axis config for x-axis along the bottom edge of the chart.",
          },
          "axisLeft": Object {
            "$ref": "#/definitions/AxisConfig",
            "description": "Specific axis config for y-axis along the left edge of the chart.",
          },
          "axisRight": Object {
            "$ref": "#/definitions/AxisConfig",
            "description": "Specific axis config for y-axis along the right edge of the chart.",
          },
          "axisTop": Object {
            "$ref": "#/definitions/AxisConfig",
            "description": "Specific axis config for x-axis along the top edge of the chart.",
          },
          "axisX": Object {
            "$ref": "#/definitions/AxisConfig",
            "description": "X-axis specific config.",
          },
          "axisY": Object {
            "$ref": "#/definitions/AxisConfig",
            "description": "Y-axis specific config.",
          },
          "background": Object {
            "$ref": "#/definitions/Color",
            "description": "CSS color property to use as the background of the entire view.

__Default value:__ \`\\"white\\"\`",
          },
          "bar": Object {
            "$ref": "#/definitions/RectConfig",
            "description": "Bar-Specific Config",
          },
          "boxplot": Object {
            "$ref": "#/definitions/BoxPlotConfig",
            "description": "Box Config",
          },
          "circle": Object {
            "$ref": "#/definitions/MarkConfig",
            "description": "Circle-Specific Config",
          },
          "concat": Object {
            "$ref": "#/definitions/CompositionConfig",
            "description": "Default configuration for all concatenation view composition operators (\`concat\`, \`hconcat\`, and \`vconcat\`)",
          },
          "countTitle": Object {
            "description": "Default axis and legend title for count fields.

__Default value:__ \`'Count of Records\`.",
            "type": "string",
          },
          "errorband": Object {
            "$ref": "#/definitions/ErrorBandConfig",
            "description": "ErrorBand Config",
          },
          "errorbar": Object {
            "$ref": "#/definitions/ErrorBarConfig",
            "description": "ErrorBar Config",
          },
          "facet": Object {
            "$ref": "#/definitions/CompositionConfig",
            "description": "Default configuration for the \`facet\` view composition operator",
          },
          "fieldTitle": Object {
            "description": "Defines how Vega-Lite generates title for fields. There are three possible styles:
- \`\\"verbal\\"\` (Default) - displays function in a verbal style (e.g., \\"Sum of field\\", \\"Year-month of date\\", \\"field (binned)\\").
- \`\\"function\\"\` - displays function using parentheses and capitalized texts (e.g., \\"SUM(field)\\", \\"YEARMONTH(date)\\", \\"BIN(field)\\").
- \`\\"plain\\"\` - displays only the field name without functions (e.g., \\"field\\", \\"date\\", \\"field\\").",
            "enum": Array [
              "verbal",
              "functional",
              "plain",
            ],
            "type": "string",
          },
          "geoshape": Object {
            "$ref": "#/definitions/MarkConfig",
            "description": "Geoshape-Specific Config",
          },
          "header": Object {
            "$ref": "#/definitions/HeaderConfig",
            "description": "Header configuration, which determines default properties for all [headers](https://vega.github.io/vega-lite/docs/header.html).

For a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).",
          },
          "headerColumn": Object {
            "$ref": "#/definitions/HeaderConfig",
            "description": "Header configuration, which determines default properties for column [headers](https://vega.github.io/vega-lite/docs/header.html).

For a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).",
          },
          "headerFacet": Object {
            "$ref": "#/definitions/HeaderConfig",
            "description": "Header configuration, which determines default properties for non-row/column facet [headers](https://vega.github.io/vega-lite/docs/header.html).

For a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).",
          },
          "headerRow": Object {
            "$ref": "#/definitions/HeaderConfig",
            "description": "Header configuration, which determines default properties for row [headers](https://vega.github.io/vega-lite/docs/header.html).

For a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).",
          },
          "image": Object {
            "$ref": "#/definitions/RectConfig",
            "description": "Image-specific Config",
          },
          "legend": Object {
            "$ref": "#/definitions/LegendConfig",
            "description": "Legend configuration, which determines default properties for all [legends](https://vega.github.io/vega-lite/docs/legend.html). For a full list of legend configuration options, please see the [corresponding section of in the legend documentation](https://vega.github.io/vega-lite/docs/legend.html#config).",
          },
          "line": Object {
            "$ref": "#/definitions/LineConfig",
            "description": "Line-Specific Config",
          },
          "mark": Object {
            "$ref": "#/definitions/MarkConfig",
            "description": "Mark Config",
          },
          "numberFormat": Object {
            "description": "D3 Number format for guide labels and text marks. For example \\"s\\" for SI units. Use [D3's number format pattern](https://github.com/d3/d3-format#locale_format).",
            "type": "string",
          },
          "padding": Object {
            "$ref": "#/definitions/Padding",
            "description": "The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides.
If an object, the value should have the format \`{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}\` to specify padding for each side of the visualization.

__Default value__: \`5\`",
          },
          "point": Object {
            "$ref": "#/definitions/MarkConfig",
            "description": "Point-Specific Config",
          },
          "projection": Object {
            "$ref": "#/definitions/ProjectionConfig",
            "description": "Projection configuration, which determines default properties for all [projections](https://vega.github.io/vega-lite/docs/projection.html). For a full list of projection configuration options, please see the [corresponding section of the projection documentation](https://vega.github.io/vega-lite/docs/projection.html#config).",
          },
          "range": Object {
            "$ref": "#/definitions/RangeConfig",
            "description": "An object hash that defines default range arrays or schemes for using with scales.
For a full list of scale range configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config).",
          },
          "rect": Object {
            "$ref": "#/definitions/RectConfig",
            "description": "Rect-Specific Config",
          },
          "repeat": Object {
            "$ref": "#/definitions/CompositionConfig",
            "description": "Default configuration for the \`repeat\` view composition operator",
          },
          "rule": Object {
            "$ref": "#/definitions/MarkConfig",
            "description": "Rule-Specific Config",
          },
          "scale": Object {
            "$ref": "#/definitions/ScaleConfig",
            "description": "Scale configuration determines default properties for all [scales](https://vega.github.io/vega-lite/docs/scale.html). For a full list of scale configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config).",
          },
          "selection": Object {
            "$ref": "#/definitions/SelectionConfig",
            "description": "An object hash for defining default properties for each type of selections.",
          },
          "square": Object {
            "$ref": "#/definitions/MarkConfig",
            "description": "Square-Specific Config",
          },
          "style": Object {
            "$ref": "#/definitions/StyleConfigIndex",
            "description": "An object hash that defines key-value mappings to determine default properties for marks with a given [style](https://vega.github.io/vega-lite/docs/mark.html#mark-def). The keys represent styles names; the values have to be valid [mark configuration objects](https://vega.github.io/vega-lite/docs/mark.html#config).",
          },
          "text": Object {
            "$ref": "#/definitions/MarkConfig",
            "description": "Text-Specific Config",
          },
          "tick": Object {
            "$ref": "#/definitions/TickConfig",
            "description": "Tick-Specific Config",
          },
          "timeFormat": Object {
            "description": "Default time format for raw time values (without time units) in text marks, legend labels and header labels.

__Default value:__ \`\\"%b %d, %Y\\"\`
__Note:__ Axes automatically determine format each label automatically so this config would not affect axes.",
            "type": "string",
          },
          "title": Object {
            "$ref": "#/definitions/TitleConfig",
            "description": "Title configuration, which determines default properties for all [titles](https://vega.github.io/vega-lite/docs/title.html). For a full list of title configuration options, please see the [corresponding section of the title documentation](https://vega.github.io/vega-lite/docs/title.html#config).",
          },
          "trail": Object {
            "$ref": "#/definitions/LineConfig",
            "description": "Trail-Specific Config",
          },
          "view": Object {
            "$ref": "#/definitions/ViewConfig",
            "description": "Default properties for [single view plots](https://vega.github.io/vega-lite/docs/spec.html#single).",
          },
        },
        "type": "object",
      },
      "CsvDataFormat": Object {
        "additionalProperties": false,
        "properties": Object {
          "parse": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Parse",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "If set to \`null\`, disable type inference based on the spec and only use type inference based on the data.
Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of \`\\"number\\"\`, \`\\"boolean\\"\`, \`\\"date\\"\`, or null (do not parse the field)).
For example, \`\\"parse\\": {\\"modified_on\\": \\"date\\"}\` parses the \`modified_on\` field in each input record a Date value.

For \`\\"date\\"\`, we parse data based using Javascript's [\`Date.parse()\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
For Specific date formats can be provided (e.g., \`{foo: \\"date:'%m%d%Y'\\"}\`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., \`{foo: \\"utc:'%m%d%Y'\\"}\`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)",
          },
          "type": Object {
            "description": "Type of input data: \`\\"json\\"\`, \`\\"csv\\"\`, \`\\"tsv\\"\`, \`\\"dsv\\"\`.

__Default value:__  The default format type is determined by the extension of the file URL.
If no extension is detected, \`\\"json\\"\` will be used by default.",
            "enum": Array [
              "csv",
              "tsv",
            ],
            "type": "string",
          },
        },
        "type": "object",
      },
      "Cursor": Object {
        "enum": Array [
          "auto",
          "default",
          "none",
          "context-menu",
          "help",
          "pointer",
          "progress",
          "wait",
          "cell",
          "crosshair",
          "text",
          "vertical-text",
          "alias",
          "copy",
          "move",
          "no-drop",
          "not-allowed",
          "e-resize",
          "n-resize",
          "ne-resize",
          "nw-resize",
          "s-resize",
          "se-resize",
          "sw-resize",
          "w-resize",
          "ew-resize",
          "ns-resize",
          "nesw-resize",
          "nwse-resize",
          "col-resize",
          "row-resize",
          "all-scroll",
          "zoom-in",
          "zoom-out",
          "grab",
          "grabbing",
        ],
        "type": "string",
      },
      "Cyclical": Object {
        "enum": Array [
          "rainbow",
          "sinebow",
        ],
        "type": "string",
      },
      "Data": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/DataSource",
          },
          Object {
            "$ref": "#/definitions/Generator",
          },
        ],
      },
      "DataFormat": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/CsvDataFormat",
          },
          Object {
            "$ref": "#/definitions/DsvDataFormat",
          },
          Object {
            "$ref": "#/definitions/JsonDataFormat",
          },
          Object {
            "$ref": "#/definitions/TopoDataFormat",
          },
        ],
      },
      "DataSource": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/UrlData",
          },
          Object {
            "$ref": "#/definitions/InlineData",
          },
          Object {
            "$ref": "#/definitions/NamedData",
          },
        ],
      },
      "Datasets": Object {
        "$ref": "#/definitions/Dict<InlineDataset>",
      },
      "DateTime": Object {
        "additionalProperties": false,
        "description": "Object for defining datetime in Vega-Lite Filter.
If both month and quarter are provided, month has higher precedence.
\`day\` cannot be combined with other date.
We accept string for month and day names.",
        "properties": Object {
          "date": Object {
            "description": "Integer value representing the date from 1-31.",
            "maximum": 31,
            "minimum": 1,
            "type": "number",
          },
          "day": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Day",
              },
              Object {
                "type": "string",
              },
            ],
            "description": "Value representing the day of a week. This can be one of:
(1) integer value -- \`1\` represents Monday;
(2) case-insensitive day name (e.g., \`\\"Monday\\"\`);
(3) case-insensitive, 3-character short day name (e.g., \`\\"Mon\\"\`).

**Warning:** A DateTime definition object with \`day\`** should not be combined with \`year\`, \`quarter\`, \`month\`, or \`date\`.",
          },
          "hours": Object {
            "description": "Integer value representing the hour of a day from 0-23.",
            "maximum": 23,
            "minimum": 0,
            "type": "number",
          },
          "milliseconds": Object {
            "description": "Integer value representing the millisecond segment of time.",
            "maximum": 999,
            "minimum": 0,
            "type": "number",
          },
          "minutes": Object {
            "description": "Integer value representing the minute segment of time from 0-59.",
            "maximum": 59,
            "minimum": 0,
            "type": "number",
          },
          "month": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Month",
              },
              Object {
                "type": "string",
              },
            ],
            "description": "One of:
(1) integer value representing the month from \`1\`-\`12\`. \`1\` represents January;
(2) case-insensitive month name (e.g., \`\\"January\\"\`);
(3) case-insensitive, 3-character short month name (e.g., \`\\"Jan\\"\`).",
          },
          "quarter": Object {
            "description": "Integer value representing the quarter of the year (from 1-4).",
            "maximum": 4,
            "minimum": 1,
            "type": "number",
          },
          "seconds": Object {
            "description": "Integer value representing the second segment (0-59) of a time value",
            "maximum": 59,
            "minimum": 0,
            "type": "number",
          },
          "utc": Object {
            "description": "A boolean flag indicating if date time is in utc time. If false, the date time is in local time",
            "type": "boolean",
          },
          "year": Object {
            "description": "Integer value representing the year.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "Day": Object {
        "maximum": 7,
        "minimum": 1,
        "type": "number",
      },
      "DensityTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "description": "The output fields for the sample value and corresponding density estimate.

__Default value:__ \`[\\"value\\", \\"density\\"]\`",
            "items": Array [
              Object {
                "$ref": "#/definitions/FieldName",
              },
              Object {
                "$ref": "#/definitions/FieldName",
              },
            ],
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "bandwidth": Object {
            "description": "The bandwidth (standard deviation) of the Gaussian kernel. If unspecified or set to zero, the bandwidth value is automatically estimated from the input data using Scottâ€™s rule.",
            "type": "number",
          },
          "counts": Object {
            "description": "A boolean flag indicating if the output values should be probability estimates (false) or smoothed counts (true).

__Default value:__ \`false\`",
            "type": "boolean",
          },
          "cumulative": Object {
            "description": "A boolean flag indicating whether to produce density estimates (false) or cumulative density estimates (true).

__Default value:__ \`false\`",
            "type": "boolean",
          },
          "density": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field for which to perform density estimation.",
          },
          "extent": Object {
            "description": "A [min, max] domain from which to sample the distribution. If unspecified, the extent will be determined by the observed minimum and maximum values of the density value field.",
            "items": Array [
              Object {
                "type": "number",
              },
              Object {
                "type": "number",
              },
            ],
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "groupby": Object {
            "description": "The data fields to group by. If not specified, a single group containing all data objects will be used.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "maxsteps": Object {
            "description": "The maximum number of samples to take along the extent domain for plotting the density.

__Default value:__ \`200\`",
            "type": "number",
          },
          "minsteps": Object {
            "description": "The minimum number of samples to take along the extent domain for plotting the density.

__Default value:__ \`25\`",
            "type": "number",
          },
          "steps": Object {
            "description": "The exact number of samples to take along the extent domain for plotting the density. If specified, overrides both minsteps and maxsteps to set an exact number of uniform samples. Potentially useful in conjunction with a fixed extent to ensure consistent sample points for stacked densities.",
            "type": "number",
          },
        },
        "required": Array [
          "density",
        ],
        "type": "object",
      },
      "DerivedStream": Object {
        "additionalProperties": false,
        "properties": Object {
          "between": Object {
            "items": Object {
              "$ref": "#/definitions/Stream",
            },
            "type": "array",
          },
          "consume": Object {
            "type": "boolean",
          },
          "debounce": Object {
            "type": "number",
          },
          "filter": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Expr",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/Expr",
                },
                "type": "array",
              },
            ],
          },
          "markname": Object {
            "type": "string",
          },
          "marktype": Object {
            "$ref": "#/definitions/MarkType",
          },
          "stream": Object {
            "$ref": "#/definitions/Stream",
          },
          "throttle": Object {
            "type": "number",
          },
        },
        "required": Array [
          "stream",
        ],
        "type": "object",
      },
      "Dict<InlineDataset>": Object {
        "additionalProperties": Object {
          "$ref": "#/definitions/InlineDataset",
        },
        "type": "object",
      },
      "Dict<SelectionInit>": Object {
        "additionalProperties": Object {
          "$ref": "#/definitions/SelectionInit",
        },
        "type": "object",
      },
      "Dict<SelectionInitInterval>": Object {
        "additionalProperties": Object {
          "$ref": "#/definitions/SelectionInitInterval",
        },
        "type": "object",
      },
      "Dir": Object {
        "enum": Array [
          "ltr",
          "rtl",
        ],
        "type": "string",
      },
      "Diverging": Object {
        "enum": Array [
          "blueorange",
          "blueorange-3",
          "blueorange-4",
          "blueorange-5",
          "blueorange-6",
          "blueorange-7",
          "blueorange-8",
          "blueorange-9",
          "blueorange-10",
          "blueorange-11",
          "brownbluegreen",
          "brownbluegreen-3",
          "brownbluegreen-4",
          "brownbluegreen-5",
          "brownbluegreen-6",
          "brownbluegreen-7",
          "brownbluegreen-8",
          "brownbluegreen-9",
          "brownbluegreen-10",
          "brownbluegreen-11",
          "purplegreen",
          "purplegreen-3",
          "purplegreen-4",
          "purplegreen-5",
          "purplegreen-6",
          "purplegreen-7",
          "purplegreen-8",
          "purplegreen-9",
          "purplegreen-10",
          "purplegreen-11",
          "pinkyellowgreen",
          "pinkyellowgreen-3",
          "pinkyellowgreen-4",
          "pinkyellowgreen-5",
          "pinkyellowgreen-6",
          "pinkyellowgreen-7",
          "pinkyellowgreen-8",
          "pinkyellowgreen-9",
          "pinkyellowgreen-10",
          "pinkyellowgreen-11",
          "purpleorange",
          "purpleorange-3",
          "purpleorange-4",
          "purpleorange-5",
          "purpleorange-6",
          "purpleorange-7",
          "purpleorange-8",
          "purpleorange-9",
          "purpleorange-10",
          "purpleorange-11",
          "redblue",
          "redblue-3",
          "redblue-4",
          "redblue-5",
          "redblue-6",
          "redblue-7",
          "redblue-8",
          "redblue-9",
          "redblue-10",
          "redblue-11",
          "redgrey",
          "redgrey-3",
          "redgrey-4",
          "redgrey-5",
          "redgrey-6",
          "redgrey-7",
          "redgrey-8",
          "redgrey-9",
          "redgrey-10",
          "redgrey-11",
          "redyellowblue",
          "redyellowblue-3",
          "redyellowblue-4",
          "redyellowblue-5",
          "redyellowblue-6",
          "redyellowblue-7",
          "redyellowblue-8",
          "redyellowblue-9",
          "redyellowblue-10",
          "redyellowblue-11",
          "redyellowgreen",
          "redyellowgreen-3",
          "redyellowgreen-4",
          "redyellowgreen-5",
          "redyellowgreen-6",
          "redyellowgreen-7",
          "redyellowgreen-8",
          "redyellowgreen-9",
          "redyellowgreen-10",
          "redyellowgreen-11",
          "spectral",
          "spectral-3",
          "spectral-4",
          "spectral-5",
          "spectral-6",
          "spectral-7",
          "spectral-8",
          "spectral-9",
          "spectral-10",
          "spectral-11",
        ],
        "type": "string",
      },
      "DsvDataFormat": Object {
        "additionalProperties": false,
        "properties": Object {
          "delimiter": Object {
            "description": "The delimiter between records. The delimiter must be a single character (i.e., a single 16-bit code unit); so, ASCII delimiters are fine, but emoji delimiters are not.",
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
          },
          "parse": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Parse",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "If set to \`null\`, disable type inference based on the spec and only use type inference based on the data.
Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of \`\\"number\\"\`, \`\\"boolean\\"\`, \`\\"date\\"\`, or null (do not parse the field)).
For example, \`\\"parse\\": {\\"modified_on\\": \\"date\\"}\` parses the \`modified_on\` field in each input record a Date value.

For \`\\"date\\"\`, we parse data based using Javascript's [\`Date.parse()\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
For Specific date formats can be provided (e.g., \`{foo: \\"date:'%m%d%Y'\\"}\`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., \`{foo: \\"utc:'%m%d%Y'\\"}\`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)",
          },
          "type": Object {
            "description": "Type of input data: \`\\"json\\"\`, \`\\"csv\\"\`, \`\\"tsv\\"\`, \`\\"dsv\\"\`.

__Default value:__  The default format type is determined by the extension of the file URL.
If no extension is detected, \`\\"json\\"\` will be used by default.",
            "enum": Array [
              "dsv",
            ],
            "type": "string",
          },
        },
        "required": Array [
          "delimiter",
        ],
        "type": "object",
      },
      "Element": Object {
        "type": "string",
      },
      "Encoding": Object {
        "additionalProperties": false,
        "properties": Object {
          "color": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ColorGradientFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/ColorGradientValueDefWithCondition",
              },
            ],
            "description": "Color of the marks â€“ either fill or stroke color based on  the \`filled\` property of mark definition.
By default, \`color\` represents fill color for \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"tick\\"\`,
\`\\"text\\"\`, \`\\"trail\\"\`, \`\\"circle\\"\`, and \`\\"square\\"\` / stroke color for \`\\"line\\"\` and \`\\"point\\"\`.

__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`color\` property.

_Note:_
1) For fine-grained control over both fill and stroke colors of the marks, please use the \`fill\` and \`stroke\` channels. The \`fill\` or \`stroke\` encodings have higher precedence than \`color\`, thus may override the \`color\` encoding if conflicting encodings are specified.
2) See the scale documentation for more information about customizing [color scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).",
          },
          "detail": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FieldDefWithoutScale",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/FieldDefWithoutScale",
                },
                "type": "array",
              },
            ],
            "description": "Additional levels of detail for grouping data in aggregate views and
in line, trail, and area marks without mapping data to a specific visual channel.",
          },
          "fill": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ColorGradientFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/ColorGradientValueDefWithCondition",
              },
            ],
            "description": "Fill color of the marks.
__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`color\` property.

_Note:_ The \`fill\` encoding has higher precedence than \`color\`, thus may override the \`color\` encoding if conflicting encodings are specified.",
          },
          "fillOpacity": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/NumericFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/NumericValueDefWithCondition",
              },
            ],
            "description": "Fill opacity of the marks.

__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`fillOpacity\` property.",
          },
          "href": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/StringFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/StringValueDefWithCondition",
              },
            ],
            "description": "A URL to load upon mouse click.",
          },
          "key": Object {
            "$ref": "#/definitions/FieldDefWithoutScale",
            "description": "A data field to use as a unique key for data binding. When a visualizationâ€™s data is updated, the key value will be used to match data elements to existing mark instances. Use a key channel to enable object constancy for transitions over dynamic data.",
          },
          "latitude": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LatLongFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Latitude position of geographically projected marks.",
          },
          "latitude2": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Latitude-2 position for geographically projected ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.",
          },
          "longitude": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LatLongFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Longitude position of geographically projected marks.",
          },
          "longitude2": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Longitude-2 position for geographically projected ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.",
          },
          "opacity": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/NumericFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/NumericValueDefWithCondition",
              },
            ],
            "description": "Opacity of the marks.

__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`opacity\` property.",
          },
          "order": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/OrderFieldDef",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/OrderFieldDef",
                },
                "type": "array",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Order of the marks.
- For stacked marks, this \`order\` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).
- For line and trail marks, this \`order\` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html). Setting \`order\` to \`{\\"value\\": null}\` makes the line marks use the original order in the data sources.
- Otherwise, this \`order\` channel encodes layer order of the marks.

__Note__: In aggregate plots, \`order\` field should be \`aggregate\`d to avoid creating additional aggregation grouping.",
          },
          "shape": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ShapeFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/ShapeValueDefWithCondition",
              },
            ],
            "description": "Shape of the mark.

1. For \`point\` marks the supported values include:
   - plotting shapes: \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"cross\\"\`, \`\\"diamond\\"\`, \`\\"triangle-up\\"\`, \`\\"triangle-down\\"\`, \`\\"triangle-right\\"\`, or \`\\"triangle-left\\"\`.
   - the line symbol \`\\"stroke\\"\`
   - centered directional shapes \`\\"arrow\\"\`, \`\\"wedge\\"\`, or \`\\"triangle\\"\`
   - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)

2. For \`geoshape\` marks it should be a field definition of the geojson data

__Default value:__ If undefined, the default shape depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#point-config)'s \`shape\` property. (\`\\"circle\\"\` if unset.)",
          },
          "size": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/NumericFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/NumericValueDefWithCondition",
              },
            ],
            "description": "Size of the mark.
- For \`\\"point\\"\`, \`\\"square\\"\` and \`\\"circle\\"\`, â€“ the symbol size, or pixel area of the mark.
- For \`\\"bar\\"\` and \`\\"tick\\"\` â€“ the bar and tick's size.
- For \`\\"text\\"\` â€“ the text's font size.
- Size is unsupported for \`\\"line\\"\`, \`\\"area\\"\`, and \`\\"rect\\"\`. (Use \`\\"trail\\"\` instead of line with varying size)",
          },
          "stroke": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ColorGradientFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/ColorGradientValueDefWithCondition",
              },
            ],
            "description": "Stroke color of the marks.
__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`color\` property.

_Note:_ The \`stroke\` encoding has higher precedence than \`color\`, thus may override the \`color\` encoding if conflicting encodings are specified.",
          },
          "strokeOpacity": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/NumericFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/NumericValueDefWithCondition",
              },
            ],
            "description": "Stroke opacity of the marks.

__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`strokeOpacity\` property.",
          },
          "strokeWidth": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/NumericFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/NumericValueDefWithCondition",
              },
            ],
            "description": "Stroke width of the marks.

__Default value:__ If undefined, the default stroke width depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`strokeWidth\` property.",
          },
          "text": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/TextFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/TextValueDefWithCondition",
              },
            ],
            "description": "Text of the \`text\` mark.",
          },
          "tooltip": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/StringFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/StringValueDefWithCondition",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/StringFieldDef",
                },
                "type": "array",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The tooltip text to show upon mouse hover. Specifying \`tooltip\` encoding overrides [the \`tooltip\` property in the mark definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).

See the [\`tooltip\`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip in Vega-Lite.",
          },
          "url": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/StringFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/StringValueDefWithCondition",
              },
            ],
            "description": "The URL of an image mark.",
          },
          "x": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/PositionFieldDef",
              },
              Object {
                "$ref": "#/definitions/XValueDef",
              },
            ],
            "description": "X coordinates of the marks, or width of horizontal \`\\"bar\\"\` and \`\\"area\\"\` without specified \`x2\` or \`width\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "x2": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/XValueDef",
              },
            ],
            "description": "X2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "xError": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Error value of x coordinates for error specified \`\\"errorbar\\"\` and \`\\"errorband\\"\`.",
          },
          "xError2": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Secondary error value of x coordinates for error specified \`\\"errorbar\\"\` and \`\\"errorband\\"\`.",
          },
          "y": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/PositionFieldDef",
              },
              Object {
                "$ref": "#/definitions/YValueDef",
              },
            ],
            "description": "Y coordinates of the marks, or height of vertical \`\\"bar\\"\` and \`\\"area\\"\` without specified \`y2\` or \`height\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "y2": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/YValueDef",
              },
            ],
            "description": "Y2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "yError": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Error value of y coordinates for error specified \`\\"errorbar\\"\` and \`\\"errorband\\"\`.",
          },
          "yError2": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Secondary error value of y coordinates for error specified \`\\"errorbar\\"\` and \`\\"errorband\\"\`.",
          },
        },
        "type": "object",
      },
      "EncodingSortField": Object {
        "additionalProperties": false,
        "description": "A sort definition for sorting a discrete scale in an encoding field definition.",
        "properties": Object {
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "The data [field](https://vega.github.io/vega-lite/docs/field.html) to sort by.

__Default value:__ If unspecified, defaults to the field specified in the outer data reference.",
          },
          "op": Object {
            "$ref": "#/definitions/NonArgAggregateOp",
            "description": "An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to perform on the field prior to sorting (e.g., \`\\"count\\"\`, \`\\"mean\\"\` and \`\\"median\\"\`).
An aggregation is required when there are multiple values of the sort field for each encoded data field.
The input data objects will be aggregated, grouped by the encoded data field.

For a full list of operations, please see the documentation for [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).

__Default value:__ \`\\"sum\\"\` for stacked plots. Otherwise, \`\\"mean\\"\`.",
          },
          "order": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SortOrder",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The sort order. One of \`\\"ascending\\"\` (default), \`\\"descending\\"\`, or \`null\` (no not sort).",
          },
        },
        "type": "object",
      },
      "ErrorBand": Object {
        "enum": Array [
          "errorband",
        ],
        "type": "string",
      },
      "ErrorBandConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "band": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "borders": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "extent": Object {
            "$ref": "#/definitions/ErrorBarExtent",
            "description": "The extent of the band. Available options include:
- \`\\"ci\\"\`: Extend the band to the confidence interval of the mean.
- \`\\"stderr\\"\`: The size of band are set to the value of standard error, extending from the mean.
- \`\\"stdev\\"\`: The size of band are set to the value of standard deviation, extending from the mean.
- \`\\"iqr\\"\`: Extend the band to the q1 and q3.

__Default value:__ \`\\"stderr\\"\`.",
          },
          "interpolate": Object {
            "$ref": "#/definitions/Interpolate",
            "description": "The line interpolation method for the error band. One of the following:
- \`\\"linear\\"\`: piecewise linear segments, as in a polyline.
- \`\\"linear-closed\\"\`: close the linear segments to form a polygon.
- \`\\"step\\"\`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes at the midpoint of each pair of adjacent x-values.
- \`\\"step-before\\"\`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes before the x-value.
- \`\\"step-after\\"\`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes after the x-value.
- \`\\"basis\\"\`: a B-spline, with control point duplication on the ends.
- \`\\"basis-open\\"\`: an open B-spline; may not intersect the start or end.
- \`\\"basis-closed\\"\`: a closed B-spline, as in a loop.
- \`\\"cardinal\\"\`: a Cardinal spline, with control point duplication on the ends.
- \`\\"cardinal-open\\"\`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
- \`\\"cardinal-closed\\"\`: a closed Cardinal spline, as in a loop.
- \`\\"bundle\\"\`: equivalent to basis, except the tension parameter is used to straighten the spline.
- \`\\"monotone\\"\`: cubic interpolation that preserves monotonicity in y.",
          },
          "tension": Object {
            "description": "The tension parameter for the interpolation type of the error band.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
        },
        "type": "object",
      },
      "ErrorBandDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "band": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "borders": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "clip": Object {
            "description": "Whether a composite mark be clipped to the enclosing groupâ€™s width and height.",
            "type": "boolean",
          },
          "color": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
            ],
            "description": "Default color.

__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> \`\\"#4682b4\\"\`

__Note:__
- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
- The \`fill\` and \`stroke\` properties have higher precedence than \`color\` and will override \`color\`.",
          },
          "extent": Object {
            "$ref": "#/definitions/ErrorBarExtent",
            "description": "The extent of the band. Available options include:
- \`\\"ci\\"\`: Extend the band to the confidence interval of the mean.
- \`\\"stderr\\"\`: The size of band are set to the value of standard error, extending from the mean.
- \`\\"stdev\\"\`: The size of band are set to the value of standard deviation, extending from the mean.
- \`\\"iqr\\"\`: Extend the band to the q1 and q3.

__Default value:__ \`\\"stderr\\"\`.",
          },
          "interpolate": Object {
            "$ref": "#/definitions/Interpolate",
            "description": "The line interpolation method for the error band. One of the following:
- \`\\"linear\\"\`: piecewise linear segments, as in a polyline.
- \`\\"linear-closed\\"\`: close the linear segments to form a polygon.
- \`\\"step\\"\`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes at the midpoint of each pair of adjacent x-values.
- \`\\"step-before\\"\`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes before the x-value.
- \`\\"step-after\\"\`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes after the x-value.
- \`\\"basis\\"\`: a B-spline, with control point duplication on the ends.
- \`\\"basis-open\\"\`: an open B-spline; may not intersect the start or end.
- \`\\"basis-closed\\"\`: a closed B-spline, as in a loop.
- \`\\"cardinal\\"\`: a Cardinal spline, with control point duplication on the ends.
- \`\\"cardinal-open\\"\`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
- \`\\"cardinal-closed\\"\`: a closed Cardinal spline, as in a loop.
- \`\\"bundle\\"\`: equivalent to basis, except the tension parameter is used to straighten the spline.
- \`\\"monotone\\"\`: cubic interpolation that preserves monotonicity in y.",
          },
          "opacity": Object {
            "description": "The opacity (value between [0,1]) of the mark.",
            "type": "number",
          },
          "orient": Object {
            "$ref": "#/definitions/Orientation",
            "description": "Orientation of the error band. This is normally automatically determined, but can be specified when the orientation is ambiguous and cannot be automatically determined.",
          },
          "tension": Object {
            "description": "The tension parameter for the interpolation type of the error band.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "type": Object {
            "$ref": "#/definitions/ErrorBand",
            "description": "The mark type. This could a primitive mark type
(one of \`\\"bar\\"\`, \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"tick\\"\`, \`\\"line\\"\`,
\`\\"area\\"\`, \`\\"point\\"\`, \`\\"geoshape\\"\`, \`\\"rule\\"\`, and \`\\"text\\"\`)
or a composite mark type (\`\\"boxplot\\"\`, \`\\"errorband\\"\`, \`\\"errorbar\\"\`).",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "ErrorBar": Object {
        "enum": Array [
          "errorbar",
        ],
        "type": "string",
      },
      "ErrorBarConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "extent": Object {
            "$ref": "#/definitions/ErrorBarExtent",
            "description": "The extent of the rule. Available options include:
- \`\\"ci\\"\`: Extend the rule to the confidence interval of the mean.
- \`\\"stderr\\"\`: The size of rule are set to the value of standard error, extending from the mean.
- \`\\"stdev\\"\`: The size of rule are set to the value of standard deviation, extending from the mean.
- \`\\"iqr\\"\`: Extend the rule to the q1 and q3.

__Default value:__ \`\\"stderr\\"\`.",
          },
          "rule": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "ticks": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
        },
        "type": "object",
      },
      "ErrorBarDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "clip": Object {
            "description": "Whether a composite mark be clipped to the enclosing groupâ€™s width and height.",
            "type": "boolean",
          },
          "color": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
            ],
            "description": "Default color.

__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> \`\\"#4682b4\\"\`

__Note:__
- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
- The \`fill\` and \`stroke\` properties have higher precedence than \`color\` and will override \`color\`.",
          },
          "extent": Object {
            "$ref": "#/definitions/ErrorBarExtent",
            "description": "The extent of the rule. Available options include:
- \`\\"ci\\"\`: Extend the rule to the confidence interval of the mean.
- \`\\"stderr\\"\`: The size of rule are set to the value of standard error, extending from the mean.
- \`\\"stdev\\"\`: The size of rule are set to the value of standard deviation, extending from the mean.
- \`\\"iqr\\"\`: Extend the rule to the q1 and q3.

__Default value:__ \`\\"stderr\\"\`.",
          },
          "opacity": Object {
            "description": "The opacity (value between [0,1]) of the mark.",
            "type": "number",
          },
          "orient": Object {
            "$ref": "#/definitions/Orientation",
            "description": "Orientation of the error bar. This is normally automatically determined, but can be specified when the orientation is ambiguous and cannot be automatically determined.",
          },
          "rule": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "ticks": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "type": Object {
            "$ref": "#/definitions/ErrorBar",
            "description": "The mark type. This could a primitive mark type
(one of \`\\"bar\\"\`, \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"tick\\"\`, \`\\"line\\"\`,
\`\\"area\\"\`, \`\\"point\\"\`, \`\\"geoshape\\"\`, \`\\"rule\\"\`, and \`\\"text\\"\`)
or a composite mark type (\`\\"boxplot\\"\`, \`\\"errorband\\"\`, \`\\"errorbar\\"\`).",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "ErrorBarExtent": Object {
        "enum": Array [
          "ci",
          "iqr",
          "stderr",
          "stdev",
        ],
        "type": "string",
      },
      "EventStream": Object {
        "anyOf": Array [
          Object {
            "additionalProperties": false,
            "properties": Object {
              "between": Object {
                "items": Object {
                  "$ref": "#/definitions/Stream",
                },
                "type": "array",
              },
              "consume": Object {
                "type": "boolean",
              },
              "debounce": Object {
                "type": "number",
              },
              "filter": Object {
                "anyOf": Array [
                  Object {
                    "$ref": "#/definitions/Expr",
                  },
                  Object {
                    "items": Object {
                      "$ref": "#/definitions/Expr",
                    },
                    "type": "array",
                  },
                ],
              },
              "markname": Object {
                "type": "string",
              },
              "marktype": Object {
                "$ref": "#/definitions/MarkType",
              },
              "source": Object {
                "enum": Array [
                  "view",
                  "scope",
                ],
                "type": "string",
              },
              "throttle": Object {
                "type": "number",
              },
              "type": Object {
                "$ref": "#/definitions/EventType",
              },
            },
            "required": Array [
              "type",
            ],
            "type": "object",
          },
          Object {
            "additionalProperties": false,
            "properties": Object {
              "between": Object {
                "items": Object {
                  "$ref": "#/definitions/Stream",
                },
                "type": "array",
              },
              "consume": Object {
                "type": "boolean",
              },
              "debounce": Object {
                "type": "number",
              },
              "filter": Object {
                "anyOf": Array [
                  Object {
                    "$ref": "#/definitions/Expr",
                  },
                  Object {
                    "items": Object {
                      "$ref": "#/definitions/Expr",
                    },
                    "type": "array",
                  },
                ],
              },
              "markname": Object {
                "type": "string",
              },
              "marktype": Object {
                "$ref": "#/definitions/MarkType",
              },
              "source": Object {
                "enum": Array [
                  "window",
                ],
                "type": "string",
              },
              "throttle": Object {
                "type": "number",
              },
              "type": Object {
                "$ref": "#/definitions/WindowEventType",
              },
            },
            "required": Array [
              "source",
              "type",
            ],
            "type": "object",
          },
        ],
      },
      "EventType": Object {
        "enum": Array [
          "click",
          "dblclick",
          "dragenter",
          "dragleave",
          "dragover",
          "keydown",
          "keypress",
          "keyup",
          "mousedown",
          "mousemove",
          "mouseout",
          "mouseover",
          "mouseup",
          "mousewheel",
          "timer",
          "touchend",
          "touchmove",
          "touchstart",
          "wheel",
        ],
        "type": "string",
      },
      "ExcludeMappedValueRef<BaseTitle>": Object {
        "additionalProperties": false,
        "properties": Object {
          "align": Object {
            "$ref": "#/definitions/Align",
            "description": "Horizontal text alignment for title text. One of \`\\"left\\"\`, \`\\"center\\"\`, or \`\\"right\\"\`.",
          },
          "anchor": Object {
            "$ref": "#/definitions/TitleAnchor",
            "description": "The anchor position for placing the title and subtitle text. One of \`\\"start\\"\`, \`\\"middle\\"\`, or \`\\"end\\"\`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.",
          },
          "angle": Object {
            "description": "Angle in degrees of title and subtitle text.",
            "type": "number",
          },
          "baseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "Vertical text baseline for title and subtitle text. One of \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`, or \`\\"alphabetic\\"\`.",
          },
          "color": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Text color for title text.",
          },
          "dx": Object {
            "description": "Delta offset for title and subtitle text x-coordinate.",
            "type": "number",
          },
          "dy": Object {
            "description": "Delta offset for title and subtitle text y-coordinate.",
            "type": "number",
          },
          "font": Object {
            "description": "Font name for title text.",
            "type": "string",
          },
          "fontSize": Object {
            "description": "Font size in pixels for title text.",
            "minimum": 0,
            "type": "number",
          },
          "fontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "Font style for title text.",
          },
          "fontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "Font weight for title text.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "frame": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/TitleFrame",
              },
              Object {
                "type": "string",
              },
            ],
            "description": "The reference frame for the anchor position, one of \`\\"bounds\\"\` (to anchor relative to the full bounding box) or \`\\"group\\"\` (to anchor relative to the group width or height).",
          },
          "limit": Object {
            "description": "The maximum allowed length in pixels of title and subtitle text.",
            "minimum": 0,
            "type": "number",
          },
          "lineHeight": Object {
            "description": "Line height in pixels for multi-line title text.",
            "type": "number",
          },
          "offset": Object {
            "description": "The orthogonal offset in pixels by which to displace the title group from its position along the edge of the chart.",
            "type": "number",
          },
          "orient": Object {
            "$ref": "#/definitions/TitleOrient",
            "description": "Default title orientation (\`\\"top\\"\`, \`\\"bottom\\"\`, \`\\"left\\"\`, or \`\\"right\\"\`)",
          },
          "subtitleColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Text color for subtitle text.",
          },
          "subtitleFont": Object {
            "description": "Font name for subtitle text.",
            "type": "string",
          },
          "subtitleFontSize": Object {
            "description": "Font size in pixels for subtitle text.",
            "minimum": 0,
            "type": "number",
          },
          "subtitleFontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "Font style for subtitle text.",
          },
          "subtitleFontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "Font weight for subtitle text.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "subtitleLineHeight": Object {
            "description": "Line height in pixels for multi-line subtitle text.",
            "type": "number",
          },
          "subtitlePadding": Object {
            "description": "The padding in pixels between title and subtitle text.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "Expr": Object {
        "type": "string",
      },
      "FacetEncodingFieldDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "align": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LayoutAlign",
              },
              Object {
                "$ref": "#/definitions/RowCol<LayoutAlign>",
              },
            ],
            "description": "The alignment to apply to grid rows and columns.
The supported string values are \`\\"all\\"\`, \`\\"each\\"\`, and \`\\"none\\"\`.

- For \`\\"none\\"\`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
- For \`\\"each\\"\`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
- For \`\\"all\\"\`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.

Alternatively, an object value of the form \`{\\"row\\": string, \\"column\\": string}\` can be used to supply different alignments for rows and columns.

__Default value:__ \`\\"all\\"\`.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "bounds": Object {
            "description": "The bounds calculation method to use for determining the extent of a sub-plot. One of \`full\` (the default) or \`flush\`.

- If set to \`full\`, the entire calculated bounds (including axes, title, and legend) will be used.
- If set to \`flush\`, only the specified width and height values for the sub-view will be used. The \`flush\` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.

__Default value:__ \`\\"full\\"\`",
            "enum": Array [
              "full",
              "flush",
            ],
            "type": "string",
          },
          "center": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/RowCol<boolean>",
              },
            ],
            "description": "Boolean flag indicating if subviews should be centered relative to their respective rows or columns.

An object value of the form \`{\\"row\\": boolean, \\"column\\": boolean}\` can be used to supply different centering values for rows and columns.

__Default value:__ \`false\`",
          },
          "columns": Object {
            "description": "The number of columns to include in the view composition layout.

__Default value__: \`undefined\` -- An infinite number of columns (a single row) will be assumed. This is equivalent to
\`hconcat\` (for \`concat\`) and to using the \`column\` channel (for \`facet\` and \`repeat\`).

__Note__:

1) This property is only for:
- the general (wrappable) \`concat\` operator (not \`hconcat\`/\`vconcat\`)
- the \`facet\` and \`repeat\` operator with one field/repetition definition (without row/column nesting)

2) Setting the \`columns\` to \`1\` is equivalent to \`vconcat\` (for \`concat\`) and to using the \`row\` channel (for \`facet\` and \`repeat\`).",
            "type": "number",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "header": Object {
            "$ref": "#/definitions/Header",
            "description": "An object defining properties of a facet's header.",
          },
          "sort": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SortArray",
              },
              Object {
                "$ref": "#/definitions/SortOrder",
              },
              Object {
                "$ref": "#/definitions/EncodingSortField",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Sort order for the encoded field.

For continuous fields (quantitative or temporal), \`sort\` can be either \`\\"ascending\\"\` or \`\\"descending\\"\`.

For discrete fields, \`sort\` can be one of the following:
- \`\\"ascending\\"\` or \`\\"descending\\"\` -- for sorting by the values' natural order in JavaScript.
- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units \`\\"month\\"\` and \`\\"day\\"\`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., \`\\"Mon\\"\`, \`\\"Tue\\"\`).
- \`null\` indicating no sort.

__Default value:__ \`\\"ascending\\"\`

__Note:__ \`null\` is not supported for \`row\` and \`column\`.",
          },
          "spacing": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/RowCol<number>",
              },
            ],
            "description": "The spacing in pixels between sub-views of the composition operator.
An object of the form \`{\\"row\\": number, \\"column\\": number}\` can be used to set
different spacing values for rows and columns.

__Default value__: Depends on \`\\"spacing\\"\` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (\`20\` by default)",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "FacetFieldDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "header": Object {
            "$ref": "#/definitions/Header",
            "description": "An object defining properties of a facet's header.",
          },
          "sort": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SortArray",
              },
              Object {
                "$ref": "#/definitions/SortOrder",
              },
              Object {
                "$ref": "#/definitions/EncodingSortField",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Sort order for the encoded field.

For continuous fields (quantitative or temporal), \`sort\` can be either \`\\"ascending\\"\` or \`\\"descending\\"\`.

For discrete fields, \`sort\` can be one of the following:
- \`\\"ascending\\"\` or \`\\"descending\\"\` -- for sorting by the values' natural order in JavaScript.
- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units \`\\"month\\"\` and \`\\"day\\"\`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., \`\\"Mon\\"\`, \`\\"Tue\\"\`).
- \`null\` indicating no sort.

__Default value:__ \`\\"ascending\\"\`

__Note:__ \`null\` is not supported for \`row\` and \`column\`.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "FacetMapping": Object {
        "additionalProperties": false,
        "properties": Object {
          "column": Object {
            "$ref": "#/definitions/FacetFieldDef",
            "description": "A field definition for the horizontal facet of trellis plots.",
          },
          "row": Object {
            "$ref": "#/definitions/FacetFieldDef",
            "description": "A field definition for the vertical facet of trellis plots.",
          },
        },
        "type": "object",
      },
      "FacetSpec": Object {
        "additionalProperties": false,
        "description": "Base interface for a facet specification.",
        "properties": Object {
          "align": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LayoutAlign",
              },
              Object {
                "$ref": "#/definitions/RowCol<LayoutAlign>",
              },
            ],
            "description": "The alignment to apply to grid rows and columns.
The supported string values are \`\\"all\\"\`, \`\\"each\\"\`, and \`\\"none\\"\`.

- For \`\\"none\\"\`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
- For \`\\"each\\"\`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
- For \`\\"all\\"\`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.

Alternatively, an object value of the form \`{\\"row\\": string, \\"column\\": string}\` can be used to supply different alignments for rows and columns.

__Default value:__ \`\\"all\\"\`.",
          },
          "bounds": Object {
            "description": "The bounds calculation method to use for determining the extent of a sub-plot. One of \`full\` (the default) or \`flush\`.

- If set to \`full\`, the entire calculated bounds (including axes, title, and legend) will be used.
- If set to \`flush\`, only the specified width and height values for the sub-view will be used. The \`flush\` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.

__Default value:__ \`\\"full\\"\`",
            "enum": Array [
              "full",
              "flush",
            ],
            "type": "string",
          },
          "center": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/RowCol<boolean>",
              },
            ],
            "description": "Boolean flag indicating if subviews should be centered relative to their respective rows or columns.

An object value of the form \`{\\"row\\": boolean, \\"column\\": boolean}\` can be used to supply different centering values for rows and columns.

__Default value:__ \`false\`",
          },
          "columns": Object {
            "description": "The number of columns to include in the view composition layout.

__Default value__: \`undefined\` -- An infinite number of columns (a single row) will be assumed. This is equivalent to
\`hconcat\` (for \`concat\`) and to using the \`column\` channel (for \`facet\` and \`repeat\`).

__Note__:

1) This property is only for:
- the general (wrappable) \`concat\` operator (not \`hconcat\`/\`vconcat\`)
- the \`facet\` and \`repeat\` operator with one field/repetition definition (without row/column nesting)

2) Setting the \`columns\` to \`1\` is equivalent to \`vconcat\` (for \`concat\`) and to using the \`row\` channel (for \`facet\` and \`repeat\`).",
            "type": "number",
          },
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "facet": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FacetFieldDef",
              },
              Object {
                "$ref": "#/definitions/FacetMapping",
              },
            ],
            "description": "Definition for how to facet the data. One of:
1) [a field definition for faceting the plot by one field](https://vega.github.io/vega-lite/docs/facet.html#field-def)
2) [An object that maps \`row\` and \`column\` channels to their field definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "spacing": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/RowCol<number>",
              },
            ],
            "description": "The spacing in pixels between sub-views of the composition operator.
An object of the form \`{\\"row\\": number, \\"column\\": number}\` can be used to set
different spacing values for rows and columns.

__Default value__: Depends on \`\\"spacing\\"\` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (\`20\` by default)",
          },
          "spec": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LayerSpec",
              },
              Object {
                "$ref": "#/definitions/FacetedUnitSpec",
              },
            ],
            "description": "A specification of the view that gets faceted.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
        },
        "required": Array [
          "facet",
          "spec",
        ],
        "type": "object",
      },
      "FacetedEncoding": Object {
        "additionalProperties": false,
        "properties": Object {
          "color": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ColorGradientFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/ColorGradientValueDefWithCondition",
              },
            ],
            "description": "Color of the marks â€“ either fill or stroke color based on  the \`filled\` property of mark definition.
By default, \`color\` represents fill color for \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"tick\\"\`,
\`\\"text\\"\`, \`\\"trail\\"\`, \`\\"circle\\"\`, and \`\\"square\\"\` / stroke color for \`\\"line\\"\` and \`\\"point\\"\`.

__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`color\` property.

_Note:_
1) For fine-grained control over both fill and stroke colors of the marks, please use the \`fill\` and \`stroke\` channels. The \`fill\` or \`stroke\` encodings have higher precedence than \`color\`, thus may override the \`color\` encoding if conflicting encodings are specified.
2) See the scale documentation for more information about customizing [color scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).",
          },
          "column": Object {
            "$ref": "#/definitions/RowColumnEncodingFieldDef",
            "description": "A field definition for the horizontal facet of trellis plots.",
          },
          "detail": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FieldDefWithoutScale",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/FieldDefWithoutScale",
                },
                "type": "array",
              },
            ],
            "description": "Additional levels of detail for grouping data in aggregate views and
in line, trail, and area marks without mapping data to a specific visual channel.",
          },
          "facet": Object {
            "$ref": "#/definitions/FacetEncodingFieldDef",
            "description": "A field definition for the (flexible) facet of trellis plots.

If either \`row\` or \`column\` is specified, this channel will be ignored.",
          },
          "fill": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ColorGradientFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/ColorGradientValueDefWithCondition",
              },
            ],
            "description": "Fill color of the marks.
__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`color\` property.

_Note:_ The \`fill\` encoding has higher precedence than \`color\`, thus may override the \`color\` encoding if conflicting encodings are specified.",
          },
          "fillOpacity": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/NumericFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/NumericValueDefWithCondition",
              },
            ],
            "description": "Fill opacity of the marks.

__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`fillOpacity\` property.",
          },
          "href": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/StringFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/StringValueDefWithCondition",
              },
            ],
            "description": "A URL to load upon mouse click.",
          },
          "key": Object {
            "$ref": "#/definitions/FieldDefWithoutScale",
            "description": "A data field to use as a unique key for data binding. When a visualizationâ€™s data is updated, the key value will be used to match data elements to existing mark instances. Use a key channel to enable object constancy for transitions over dynamic data.",
          },
          "latitude": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LatLongFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Latitude position of geographically projected marks.",
          },
          "latitude2": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Latitude-2 position for geographically projected ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.",
          },
          "longitude": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LatLongFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Longitude position of geographically projected marks.",
          },
          "longitude2": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Longitude-2 position for geographically projected ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.",
          },
          "opacity": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/NumericFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/NumericValueDefWithCondition",
              },
            ],
            "description": "Opacity of the marks.

__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`opacity\` property.",
          },
          "order": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/OrderFieldDef",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/OrderFieldDef",
                },
                "type": "array",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Order of the marks.
- For stacked marks, this \`order\` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).
- For line and trail marks, this \`order\` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html). Setting \`order\` to \`{\\"value\\": null}\` makes the line marks use the original order in the data sources.
- Otherwise, this \`order\` channel encodes layer order of the marks.

__Note__: In aggregate plots, \`order\` field should be \`aggregate\`d to avoid creating additional aggregation grouping.",
          },
          "row": Object {
            "$ref": "#/definitions/RowColumnEncodingFieldDef",
            "description": "A field definition for the vertical facet of trellis plots.",
          },
          "shape": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ShapeFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/ShapeValueDefWithCondition",
              },
            ],
            "description": "Shape of the mark.

1. For \`point\` marks the supported values include:
   - plotting shapes: \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"cross\\"\`, \`\\"diamond\\"\`, \`\\"triangle-up\\"\`, \`\\"triangle-down\\"\`, \`\\"triangle-right\\"\`, or \`\\"triangle-left\\"\`.
   - the line symbol \`\\"stroke\\"\`
   - centered directional shapes \`\\"arrow\\"\`, \`\\"wedge\\"\`, or \`\\"triangle\\"\`
   - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)

2. For \`geoshape\` marks it should be a field definition of the geojson data

__Default value:__ If undefined, the default shape depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#point-config)'s \`shape\` property. (\`\\"circle\\"\` if unset.)",
          },
          "size": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/NumericFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/NumericValueDefWithCondition",
              },
            ],
            "description": "Size of the mark.
- For \`\\"point\\"\`, \`\\"square\\"\` and \`\\"circle\\"\`, â€“ the symbol size, or pixel area of the mark.
- For \`\\"bar\\"\` and \`\\"tick\\"\` â€“ the bar and tick's size.
- For \`\\"text\\"\` â€“ the text's font size.
- Size is unsupported for \`\\"line\\"\`, \`\\"area\\"\`, and \`\\"rect\\"\`. (Use \`\\"trail\\"\` instead of line with varying size)",
          },
          "stroke": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ColorGradientFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/ColorGradientValueDefWithCondition",
              },
            ],
            "description": "Stroke color of the marks.
__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`color\` property.

_Note:_ The \`stroke\` encoding has higher precedence than \`color\`, thus may override the \`color\` encoding if conflicting encodings are specified.",
          },
          "strokeOpacity": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/NumericFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/NumericValueDefWithCondition",
              },
            ],
            "description": "Stroke opacity of the marks.

__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`strokeOpacity\` property.",
          },
          "strokeWidth": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/NumericFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/NumericValueDefWithCondition",
              },
            ],
            "description": "Stroke width of the marks.

__Default value:__ If undefined, the default stroke width depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s \`strokeWidth\` property.",
          },
          "text": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/TextFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/TextValueDefWithCondition",
              },
            ],
            "description": "Text of the \`text\` mark.",
          },
          "tooltip": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/StringFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/StringValueDefWithCondition",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/StringFieldDef",
                },
                "type": "array",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The tooltip text to show upon mouse hover. Specifying \`tooltip\` encoding overrides [the \`tooltip\` property in the mark definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).

See the [\`tooltip\`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip in Vega-Lite.",
          },
          "url": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/StringFieldDefWithCondition",
              },
              Object {
                "$ref": "#/definitions/StringValueDefWithCondition",
              },
            ],
            "description": "The URL of an image mark.",
          },
          "x": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/PositionFieldDef",
              },
              Object {
                "$ref": "#/definitions/XValueDef",
              },
            ],
            "description": "X coordinates of the marks, or width of horizontal \`\\"bar\\"\` and \`\\"area\\"\` without specified \`x2\` or \`width\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "x2": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/XValueDef",
              },
            ],
            "description": "X2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "xError": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Error value of x coordinates for error specified \`\\"errorbar\\"\` and \`\\"errorband\\"\`.",
          },
          "xError2": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Secondary error value of x coordinates for error specified \`\\"errorbar\\"\` and \`\\"errorband\\"\`.",
          },
          "y": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/PositionFieldDef",
              },
              Object {
                "$ref": "#/definitions/YValueDef",
              },
            ],
            "description": "Y coordinates of the marks, or height of vertical \`\\"bar\\"\` and \`\\"area\\"\` without specified \`y2\` or \`height\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "y2": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/YValueDef",
              },
            ],
            "description": "Y2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "yError": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Error value of y coordinates for error specified \`\\"errorbar\\"\` and \`\\"errorband\\"\`.",
          },
          "yError2": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SecondaryFieldDef",
              },
              Object {
                "$ref": "#/definitions/NumberValueDef",
              },
            ],
            "description": "Secondary error value of y coordinates for error specified \`\\"errorbar\\"\` and \`\\"errorband\\"\`.",
          },
        },
        "type": "object",
      },
      "FacetedUnitSpec": Object {
        "additionalProperties": false,
        "description": "Unit spec that can have a composite mark and row or column channels (shorthand for a facet spec).",
        "properties": Object {
          "bounds": Object {
            "description": "The bounds calculation method to use for determining the extent of a sub-plot. One of \`full\` (the default) or \`flush\`.

- If set to \`full\`, the entire calculated bounds (including axes, title, and legend) will be used.
- If set to \`flush\`, only the specified width and height values for the sub-view will be used. The \`flush\` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.

__Default value:__ \`\\"full\\"\`",
            "enum": Array [
              "full",
              "flush",
            ],
            "type": "string",
          },
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "encoding": Object {
            "$ref": "#/definitions/FacetedEncoding",
            "description": "A key-value mapping between encoding channels and definition of fields.",
          },
          "height": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "container",
                ],
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/Step",
              },
            ],
            "description": "The height of a visualization.

- For a plot with a continuous y-field, height should be a number.
- For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of \`{step: number}\` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
- To enable responsive sizing on height, it should be set to \`\\"container\\"\`.

__Default value:__ Based on \`config.view.continuousHeight\` for a plot with a continuous y-field and \`config.view.discreteHeight\` otherwise.

__Note:__ For plots with [\`row\` and \`column\` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the \`\\"container\\"\` option cannot be used.

__See also:__ [\`height\`](https://vega.github.io/vega-lite/docs/size.html) documentation.",
          },
          "mark": Object {
            "$ref": "#/definitions/AnyMark",
            "description": "A string describing the mark type (one of \`\\"bar\\"\`, \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"tick\\"\`, \`\\"line\\"\`,
\`\\"area\\"\`, \`\\"point\\"\`, \`\\"rule\\"\`, \`\\"geoshape\\"\`, and \`\\"text\\"\`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "projection": Object {
            "$ref": "#/definitions/Projection",
            "description": "An object defining properties of geographic projection, which will be applied to \`shape\` path for \`\\"geoshape\\"\` marks
and to \`latitude\` and \`\\"longitude\\"\` channels for other marks.",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "selection": Object {
            "additionalProperties": Object {
              "$ref": "#/definitions/SelectionDef",
            },
            "description": "A key-value mapping between selection names and definitions.",
            "type": "object",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
          "view": Object {
            "$ref": "#/definitions/ViewBackground",
            "description": "An object defining the view background's fill and stroke.

__Default value:__ none (transparent)",
          },
          "width": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "container",
                ],
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/Step",
              },
            ],
            "description": "The width of a visualization.

- For a plot with a continuous x-field, width should be a number.
- For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of \`{step: number}\` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
- To enable responsive sizing on width, it should be set to \`\\"container\\"\`.

__Default value:__
Based on \`config.view.continuousWidth\` for a plot with a continuous x-field and \`config.view.discreteWidth\` otherwise.

__Note:__ For plots with [\`row\` and \`column\` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the \`\\"container\\"\` option cannot be used.

__See also:__ [\`width\`](https://vega.github.io/vega-lite/docs/size.html) documentation.",
          },
        },
        "required": Array [
          "mark",
        ],
        "type": "object",
      },
      "Field": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/FieldName",
          },
          Object {
            "$ref": "#/definitions/RepeatRef",
          },
        ],
      },
      "FieldDefWithCondition<MarkPropFieldDef,(Gradient|string|null)>": Object {
        "additionalProperties": false,
        "description": "A FieldDef with Condition<ValueDef>
{
   condition: {value: ...},
   field: ...,
   ...
}",
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalValueDef<(Gradient|string|null)>",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalValueDef<(Gradient|string|null)>",
                },
                "type": "array",
              },
            ],
            "description": "One or more value definition(s) with [a selection or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).

__Note:__ A field definition's \`condition\` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
since Vega-Lite only allows at most one encoded field per encoding channel.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "legend": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Legend",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the legend.
If \`null\`, the legend for the encoding channel will be removed.

__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.

__See also:__ [\`legend\`](https://vega.github.io/vega-lite/docs/legend.html) documentation.",
          },
          "scale": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Scale",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.

If \`null\`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).

__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.

__See also:__ [\`scale\`](https://vega.github.io/vega-lite/docs/scale.html) documentation.",
          },
          "sort": Object {
            "$ref": "#/definitions/Sort",
            "description": "Sort order for the encoded field.

For continuous fields (quantitative or temporal), \`sort\` can be either \`\\"ascending\\"\` or \`\\"descending\\"\`.

For discrete fields, \`sort\` can be one of the following:
- \`\\"ascending\\"\` or \`\\"descending\\"\` -- for sorting by the values' natural order in JavaScript.
- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., \`\\"x\\"\` or \`\\"y\\"\`) with an optional minus prefix for descending sort (e.g., \`\\"-x\\"\` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, \`\\"sort\\": \\"-x\\"\` is equivalent to \`\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}\`.
- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units \`\\"month\\"\` and \`\\"day\\"\`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., \`\\"Mon\\"\`, \`\\"Tue\\"\`).
- \`null\` indicating no sort.

__Default value:__ \`\\"ascending\\"\`

__Note:__ \`null\` and sorting by another channel is not supported for \`row\` and \`column\`.

__See also:__ [\`sort\`](https://vega.github.io/vega-lite/docs/sort.html) documentation.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "FieldDefWithCondition<MarkPropFieldDef,number>": Object {
        "additionalProperties": false,
        "description": "A FieldDef with Condition<ValueDef>
{
   condition: {value: ...},
   field: ...,
   ...
}",
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalNumberValueDef",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalNumberValueDef",
                },
                "type": "array",
              },
            ],
            "description": "One or more value definition(s) with [a selection or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).

__Note:__ A field definition's \`condition\` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
since Vega-Lite only allows at most one encoded field per encoding channel.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "legend": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Legend",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the legend.
If \`null\`, the legend for the encoding channel will be removed.

__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.

__See also:__ [\`legend\`](https://vega.github.io/vega-lite/docs/legend.html) documentation.",
          },
          "scale": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Scale",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.

If \`null\`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).

__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.

__See also:__ [\`scale\`](https://vega.github.io/vega-lite/docs/scale.html) documentation.",
          },
          "sort": Object {
            "$ref": "#/definitions/Sort",
            "description": "Sort order for the encoded field.

For continuous fields (quantitative or temporal), \`sort\` can be either \`\\"ascending\\"\` or \`\\"descending\\"\`.

For discrete fields, \`sort\` can be one of the following:
- \`\\"ascending\\"\` or \`\\"descending\\"\` -- for sorting by the values' natural order in JavaScript.
- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., \`\\"x\\"\` or \`\\"y\\"\`) with an optional minus prefix for descending sort (e.g., \`\\"-x\\"\` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, \`\\"sort\\": \\"-x\\"\` is equivalent to \`\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}\`.
- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units \`\\"month\\"\` and \`\\"day\\"\`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., \`\\"Mon\\"\`, \`\\"Tue\\"\`).
- \`null\` indicating no sort.

__Default value:__ \`\\"ascending\\"\`

__Note:__ \`null\` and sorting by another channel is not supported for \`row\` and \`column\`.

__See also:__ [\`sort\`](https://vega.github.io/vega-lite/docs/sort.html) documentation.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "FieldDefWithCondition<MarkPropFieldDef<TypeForShape>,(string|null)>": Object {
        "additionalProperties": false,
        "description": "A FieldDef with Condition<ValueDef>
{
   condition: {value: ...},
   field: ...,
   ...
}",
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalStringValueDef",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalStringValueDef",
                },
                "type": "array",
              },
            ],
            "description": "One or more value definition(s) with [a selection or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).

__Note:__ A field definition's \`condition\` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
since Vega-Lite only allows at most one encoded field per encoding channel.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "legend": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Legend",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the legend.
If \`null\`, the legend for the encoding channel will be removed.

__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.

__See also:__ [\`legend\`](https://vega.github.io/vega-lite/docs/legend.html) documentation.",
          },
          "scale": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Scale",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.

If \`null\`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).

__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.

__See also:__ [\`scale\`](https://vega.github.io/vega-lite/docs/scale.html) documentation.",
          },
          "sort": Object {
            "$ref": "#/definitions/Sort",
            "description": "Sort order for the encoded field.

For continuous fields (quantitative or temporal), \`sort\` can be either \`\\"ascending\\"\` or \`\\"descending\\"\`.

For discrete fields, \`sort\` can be one of the following:
- \`\\"ascending\\"\` or \`\\"descending\\"\` -- for sorting by the values' natural order in JavaScript.
- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., \`\\"x\\"\` or \`\\"y\\"\`) with an optional minus prefix for descending sort (e.g., \`\\"-x\\"\` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, \`\\"sort\\": \\"-x\\"\` is equivalent to \`\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}\`.
- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units \`\\"month\\"\` and \`\\"day\\"\`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., \`\\"Mon\\"\`, \`\\"Tue\\"\`).
- \`null\` indicating no sort.

__Default value:__ \`\\"ascending\\"\`

__Note:__ \`null\` and sorting by another channel is not supported for \`row\` and \`column\`.

__See also:__ [\`sort\`](https://vega.github.io/vega-lite/docs/sort.html) documentation.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/TypeForShape",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "FieldDefWithCondition<StringFieldDef,Text>": Object {
        "additionalProperties": false,
        "description": "A FieldDef with Condition<ValueDef>
{
   condition: {value: ...},
   field: ...,
   ...
}",
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "enum": Array [
                  "binned",
                ],
                "type": "string",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalValueDef<Text>",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalValueDef<Text>",
                },
                "type": "array",
              },
            ],
            "description": "One or more value definition(s) with [a selection or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).

__Note:__ A field definition's \`condition\` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
since Vega-Lite only allows at most one encoded field per encoding channel.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "format": Object {
            "description": "The text formatting pattern for labels of guides (axes, legends, headers) and text marks.

- If the format type is \`\\"number\\"\` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
- If the format type is \`\\"time\\"\` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).

See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.

__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.",
            "type": "string",
          },
          "formatType": Object {
            "description": "The format type for labels (\`\\"number\\"\` or \`\\"time\\"\`).

__Default value:__
- \`\\"time\\"\` for temporal fields and ordinal and nomimal fields with \`timeUnit\`.
- \`\\"number\\"\` for quantitative fields as well as ordinal and nomimal fields without \`timeUnit\`.",
            "enum": Array [
              "number",
              "time",
            ],
            "type": "string",
          },
          "labelExpr": Object {
            "description": "[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels text.

__Note:__ The label text and value can be assessed via the \`label\` and \`value\` properties of the axis's backing \`datum\` object.",
            "type": "string",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "FieldDefWithCondition<StringFieldDef,string>": Object {
        "additionalProperties": false,
        "description": "A FieldDef with Condition<ValueDef>
{
   condition: {value: ...},
   field: ...,
   ...
}",
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "enum": Array [
                  "binned",
                ],
                "type": "string",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalValueDef<string>",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalValueDef<string>",
                },
                "type": "array",
              },
            ],
            "description": "One or more value definition(s) with [a selection or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).

__Note:__ A field definition's \`condition\` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
since Vega-Lite only allows at most one encoded field per encoding channel.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "format": Object {
            "description": "The text formatting pattern for labels of guides (axes, legends, headers) and text marks.

- If the format type is \`\\"number\\"\` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
- If the format type is \`\\"time\\"\` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).

See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.

__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.",
            "type": "string",
          },
          "formatType": Object {
            "description": "The format type for labels (\`\\"number\\"\` or \`\\"time\\"\`).

__Default value:__
- \`\\"time\\"\` for temporal fields and ordinal and nomimal fields with \`timeUnit\`.
- \`\\"number\\"\` for quantitative fields as well as ordinal and nomimal fields without \`timeUnit\`.",
            "enum": Array [
              "number",
              "time",
            ],
            "type": "string",
          },
          "labelExpr": Object {
            "description": "[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels text.

__Note:__ The label text and value can be assessed via the \`label\` and \`value\` properties of the axis's backing \`datum\` object.",
            "type": "string",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "FieldDefWithoutScale": Object {
        "$ref": "#/definitions/TypedFieldDef",
        "description": "Field Def without scale (and without bin: \\"binned\\" support).",
      },
      "FieldEqualPredicate": Object {
        "additionalProperties": false,
        "properties": Object {
          "equal": Object {
            "anyOf": Array [
              Object {
                "type": "string",
              },
              Object {
                "type": "number",
              },
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/DateTime",
              },
            ],
            "description": "The value that the field should be equal to.",
          },
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "Field to be filtered.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit for the field to be filtered.",
          },
        },
        "required": Array [
          "equal",
          "field",
        ],
        "type": "object",
      },
      "FieldGTEPredicate": Object {
        "additionalProperties": false,
        "properties": Object {
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "Field to be filtered.",
          },
          "gte": Object {
            "anyOf": Array [
              Object {
                "type": "string",
              },
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/DateTime",
              },
            ],
            "description": "The value that the field should be greater than or equals to.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit for the field to be filtered.",
          },
        },
        "required": Array [
          "field",
          "gte",
        ],
        "type": "object",
      },
      "FieldGTPredicate": Object {
        "additionalProperties": false,
        "properties": Object {
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "Field to be filtered.",
          },
          "gt": Object {
            "anyOf": Array [
              Object {
                "type": "string",
              },
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/DateTime",
              },
            ],
            "description": "The value that the field should be greater than.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit for the field to be filtered.",
          },
        },
        "required": Array [
          "field",
          "gt",
        ],
        "type": "object",
      },
      "FieldLTEPredicate": Object {
        "additionalProperties": false,
        "properties": Object {
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "Field to be filtered.",
          },
          "lte": Object {
            "anyOf": Array [
              Object {
                "type": "string",
              },
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/DateTime",
              },
            ],
            "description": "The value that the field should be less than or equals to.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit for the field to be filtered.",
          },
        },
        "required": Array [
          "field",
          "lte",
        ],
        "type": "object",
      },
      "FieldLTPredicate": Object {
        "additionalProperties": false,
        "properties": Object {
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "Field to be filtered.",
          },
          "lt": Object {
            "anyOf": Array [
              Object {
                "type": "string",
              },
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/DateTime",
              },
            ],
            "description": "The value that the field should be less than.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit for the field to be filtered.",
          },
        },
        "required": Array [
          "field",
          "lt",
        ],
        "type": "object",
      },
      "FieldName": Object {
        "type": "string",
      },
      "FieldOneOfPredicate": Object {
        "additionalProperties": false,
        "properties": Object {
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "Field to be filtered.",
          },
          "oneOf": Object {
            "anyOf": Array [
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
              Object {
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
              Object {
                "items": Object {
                  "type": "boolean",
                },
                "type": "array",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/DateTime",
                },
                "type": "array",
              },
            ],
            "description": "A set of values that the \`field\`'s value should be a member of,
for a data item included in the filtered data.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit for the field to be filtered.",
          },
        },
        "required": Array [
          "field",
          "oneOf",
        ],
        "type": "object",
      },
      "FieldRangePredicate": Object {
        "additionalProperties": false,
        "properties": Object {
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "Field to be filtered.",
          },
          "range": Object {
            "description": "An array of inclusive minimum and maximum values
for a field value of a data item to be included in the filtered data.",
            "items": Object {
              "anyOf": Array [
                Object {
                  "type": "number",
                },
                Object {
                  "$ref": "#/definitions/DateTime",
                },
                Object {
                  "type": "null",
                },
              ],
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit for the field to be filtered.",
          },
        },
        "required": Array [
          "field",
          "range",
        ],
        "type": "object",
      },
      "FieldValidPredicate": Object {
        "additionalProperties": false,
        "properties": Object {
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "Field to be filtered.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit for the field to be filtered.",
          },
          "valid": Object {
            "description": "If set to true the field's value has to be valid, meaning both not \`null\` and not [\`NaN\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).",
            "type": "boolean",
          },
        },
        "required": Array [
          "field",
          "valid",
        ],
        "type": "object",
      },
      "FilterTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "filter": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
            "description": "The \`filter\` property must be one of the predicate definitions:

1) an [expression](https://vega.github.io/vega-lite/docs/types.html#expression) string,
where \`datum\` can be used to refer to the current data object

2) one of the field predicates: [\`equal\`](https://vega.github.io/vega-lite/docs/filter.html#equal-predicate),
[\`lt\`](https://vega.github.io/vega-lite/docs/filter.html#lt-predicate),
[\`lte\`](https://vega.github.io/vega-lite/docs/filter.html#lte-predicate),
[\`gt\`](https://vega.github.io/vega-lite/docs/filter.html#gt-predicate),
[\`gte\`](https://vega.github.io/vega-lite/docs/filter.html#gte-predicate),
[\`range\`](https://vega.github.io/vega-lite/docs/filter.html#range-predicate),
[\`oneOf\`](https://vega.github.io/vega-lite/docs/filter.html#one-of-predicate),
or [\`valid\`](https://vega.github.io/vega-lite/docs/filter.html#valid-predicate),

3) a [selection predicate](https://vega.github.io/vega-lite/docs/filter.html#selection-predicate)

4) a logical operand that combines (1), (2), or (3).",
          },
        },
        "required": Array [
          "filter",
        ],
        "type": "object",
      },
      "FitType": Object {
        "enum": Array [
          "fit",
          "fit-x",
          "fit-y",
        ],
        "type": "string",
      },
      "FlattenTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "description": "The output field names for extracted array values.

__Default value:__ The field name of the corresponding array field",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "flatten": Object {
            "description": "An array of one or more data fields containing arrays to flatten.
If multiple fields are specified, their array values should have a parallel structure, ideally with the same length.
If the lengths of parallel arrays do not match,
the longest array will be used with \`null\` values added for missing entries.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
        },
        "required": Array [
          "flatten",
        ],
        "type": "object",
      },
      "FoldTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "description": "The output field names for the key and value properties produced by the fold transform.
__Default value:__ \`[\\"key\\", \\"value\\"]\`",
            "items": Array [
              Object {
                "$ref": "#/definitions/FieldName",
              },
              Object {
                "$ref": "#/definitions/FieldName",
              },
            ],
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "fold": Object {
            "description": "An array of data fields indicating the properties to fold.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
        },
        "required": Array [
          "fold",
        ],
        "type": "object",
      },
      "FontStyle": Object {
        "type": "string",
      },
      "FontWeight": Object {
        "enum": Array [
          "normal",
          "bold",
          "lighter",
          "bolder",
          100,
          200,
          300,
          400,
          500,
          600,
          700,
          800,
          900,
        ],
        "type": Array [
          "string",
          "number",
        ],
      },
      "Generator": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/SequenceGenerator",
          },
          Object {
            "$ref": "#/definitions/SphereGenerator",
          },
          Object {
            "$ref": "#/definitions/GraticuleGenerator",
          },
        ],
      },
      "GenericUnitSpec<Encoding,AnyMark>": Object {
        "additionalProperties": false,
        "description": "Base interface for a unit (single-view) specification.",
        "properties": Object {
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "encoding": Object {
            "$ref": "#/definitions/Encoding",
            "description": "A key-value mapping between encoding channels and definition of fields.",
          },
          "height": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "container",
                ],
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/Step",
              },
            ],
            "description": "The height of a visualization.

- For a plot with a continuous y-field, height should be a number.
- For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of \`{step: number}\` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
- To enable responsive sizing on height, it should be set to \`\\"container\\"\`.

__Default value:__ Based on \`config.view.continuousHeight\` for a plot with a continuous y-field and \`config.view.discreteHeight\` otherwise.

__Note:__ For plots with [\`row\` and \`column\` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the \`\\"container\\"\` option cannot be used.

__See also:__ [\`height\`](https://vega.github.io/vega-lite/docs/size.html) documentation.",
          },
          "mark": Object {
            "$ref": "#/definitions/AnyMark",
            "description": "A string describing the mark type (one of \`\\"bar\\"\`, \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"tick\\"\`, \`\\"line\\"\`,
\`\\"area\\"\`, \`\\"point\\"\`, \`\\"rule\\"\`, \`\\"geoshape\\"\`, and \`\\"text\\"\`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "projection": Object {
            "$ref": "#/definitions/Projection",
            "description": "An object defining properties of geographic projection, which will be applied to \`shape\` path for \`\\"geoshape\\"\` marks
and to \`latitude\` and \`\\"longitude\\"\` channels for other marks.",
          },
          "selection": Object {
            "additionalProperties": Object {
              "$ref": "#/definitions/SelectionDef",
            },
            "description": "A key-value mapping between selection names and definitions.",
            "type": "object",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
          "view": Object {
            "$ref": "#/definitions/ViewBackground",
            "description": "An object defining the view background's fill and stroke.

__Default value:__ none (transparent)",
          },
          "width": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "container",
                ],
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/Step",
              },
            ],
            "description": "The width of a visualization.

- For a plot with a continuous x-field, width should be a number.
- For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of \`{step: number}\` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
- To enable responsive sizing on width, it should be set to \`\\"container\\"\`.

__Default value:__
Based on \`config.view.continuousWidth\` for a plot with a continuous x-field and \`config.view.discreteWidth\` otherwise.

__Note:__ For plots with [\`row\` and \`column\` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the \`\\"container\\"\` option cannot be used.

__See also:__ [\`width\`](https://vega.github.io/vega-lite/docs/size.html) documentation.",
          },
        },
        "required": Array [
          "mark",
        ],
        "type": "object",
      },
      "Gradient": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/LinearGradient",
          },
          Object {
            "$ref": "#/definitions/RadialGradient",
          },
        ],
      },
      "GradientStop": Object {
        "additionalProperties": false,
        "properties": Object {
          "color": Object {
            "$ref": "#/definitions/Color",
            "description": "The color value at this point in the gradient.",
          },
          "offset": Object {
            "description": "The offset fraction for the color stop, indicating its position within the gradient.",
            "type": "number",
          },
        },
        "required": Array [
          "offset",
          "color",
        ],
        "type": "object",
      },
      "GraticuleGenerator": Object {
        "additionalProperties": false,
        "properties": Object {
          "graticule": Object {
            "anyOf": Array [
              Object {
                "enum": Array [
                  true,
                ],
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/GraticuleParams",
              },
            ],
            "description": "Generate graticule GeoJSON data for geographic reference lines.",
          },
          "name": Object {
            "description": "Provide a placeholder name and bind data at runtime.",
            "type": "string",
          },
        },
        "required": Array [
          "graticule",
        ],
        "type": "object",
      },
      "GraticuleParams": Object {
        "additionalProperties": false,
        "properties": Object {
          "extent": Object {
            "$ref": "#/definitions/Vector2<Vector2<number>>",
            "description": "Sets both the major and minor extents to the same values.",
          },
          "extentMajor": Object {
            "$ref": "#/definitions/Vector2<Vector2<number>>",
            "description": "The major extent of the graticule as a two-element array of coordinates.",
          },
          "extentMinor": Object {
            "$ref": "#/definitions/Vector2<Vector2<number>>",
            "description": "The minor extent of the graticule as a two-element array of coordinates.",
          },
          "precision": Object {
            "description": "The precision of the graticule in degrees.

__Default value:__ \`2.5\`",
            "type": "number",
          },
          "step": Object {
            "$ref": "#/definitions/Vector2<number>",
            "description": "Sets both the major and minor step angles to the same values.",
          },
          "stepMajor": Object {
            "$ref": "#/definitions/Vector2<number>",
            "description": "The major step angles of the graticule.


__Default value:__ \`[90, 360]\`",
          },
          "stepMinor": Object {
            "$ref": "#/definitions/Vector2<number>",
            "description": "The minor step angles of the graticule.

__Default value:__ \`[10, 10]\`",
          },
        },
        "type": "object",
      },
      "HConcatSpec": Object {
        "additionalProperties": false,
        "description": "Base interface for a horizontal concatenation specification.",
        "properties": Object {
          "bounds": Object {
            "description": "The bounds calculation method to use for determining the extent of a sub-plot. One of \`full\` (the default) or \`flush\`.

- If set to \`full\`, the entire calculated bounds (including axes, title, and legend) will be used.
- If set to \`flush\`, only the specified width and height values for the sub-view will be used. The \`flush\` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.

__Default value:__ \`\\"full\\"\`",
            "enum": Array [
              "full",
              "flush",
            ],
            "type": "string",
          },
          "center": Object {
            "description": "Boolean flag indicating if subviews should be centered relative to their respective rows or columns.

__Default value:__ \`false\`",
            "type": "boolean",
          },
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "hconcat": Object {
            "description": "A list of views to be concatenated and put into a row.",
            "items": Object {
              "$ref": "#/definitions/Spec",
            },
            "type": "array",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "spacing": Object {
            "description": "The spacing in pixels between sub-views of the concat operator.

__Default value__: \`10\`",
            "type": "number",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
        },
        "required": Array [
          "hconcat",
        ],
        "type": "object",
      },
      "Header": Object {
        "additionalProperties": false,
        "description": "Headers of row / column channels for faceted plots.",
        "properties": Object {
          "format": Object {
            "description": "The text formatting pattern for labels of guides (axes, legends, headers) and text marks.

- If the format type is \`\\"number\\"\` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
- If the format type is \`\\"time\\"\` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).

See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.

__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.",
            "type": "string",
          },
          "formatType": Object {
            "description": "The format type for labels (\`\\"number\\"\` or \`\\"time\\"\`).

__Default value:__
- \`\\"time\\"\` for temporal fields and ordinal and nomimal fields with \`timeUnit\`.
- \`\\"number\\"\` for quantitative fields as well as ordinal and nomimal fields without \`timeUnit\`.",
            "enum": Array [
              "number",
              "time",
            ],
            "type": "string",
          },
          "labelAlign": Object {
            "$ref": "#/definitions/Align",
            "description": "Horizontal text alignment of header labels. One of \`\\"left\\"\`, \`\\"center\\"\`, or \`\\"right\\"\`.",
          },
          "labelAnchor": Object {
            "$ref": "#/definitions/TitleAnchor",
            "description": "The anchor position for placing the labels. One of \`\\"start\\"\`, \`\\"middle\\"\`, or \`\\"end\\"\`. For example, with a label orientation of top these anchor positions map to a left-, center-, or right-aligned label.",
          },
          "labelAngle": Object {
            "description": "The rotation angle of the header labels.

__Default value:__ \`0\` for column header, \`-90\` for row header.",
            "maximum": 360,
            "minimum": -360,
            "type": "number",
          },
          "labelColor": Object {
            "$ref": "#/definitions/Color",
            "description": "The color of the header label, can be in hex color code or regular color name.",
          },
          "labelExpr": Object {
            "description": "[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.

__Note:__ The label text and value can be assessed via the \`label\` and \`value\` properties of the header's backing \`datum\` object.",
            "type": "string",
          },
          "labelFont": Object {
            "description": "The font of the header label.",
            "type": "string",
          },
          "labelFontSize": Object {
            "description": "The font size of the header label, in pixels.",
            "minimum": 0,
            "type": "number",
          },
          "labelFontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style of the header label.",
          },
          "labelLimit": Object {
            "description": "The maximum length of the header label in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.

__Default value:__ \`0\`, indicating no limit",
            "type": "number",
          },
          "labelOrient": Object {
            "$ref": "#/definitions/Orient",
            "description": "The orientation of the header label. One of \`\\"top\\"\`, \`\\"bottom\\"\`, \`\\"left\\"\` or \`\\"right\\"\`.",
          },
          "labelPadding": Object {
            "description": "The padding, in pixel, between facet header's label and the plot.

__Default value:__ \`10\`",
            "type": "number",
          },
          "labels": Object {
            "description": "A boolean flag indicating if labels should be included as part of the header.

__Default value:__ \`true\`.",
            "type": "boolean",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "titleAlign": Object {
            "$ref": "#/definitions/Align",
            "description": "Horizontal text alignment (to the anchor) of header titles.",
          },
          "titleAnchor": Object {
            "$ref": "#/definitions/TitleAnchor",
            "description": "The anchor position for placing the title. One of \`\\"start\\"\`, \`\\"middle\\"\`, or \`\\"end\\"\`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.",
          },
          "titleAngle": Object {
            "description": "The rotation angle of the header title.

__Default value:__ \`0\`.",
            "maximum": 360,
            "minimum": -360,
            "type": "number",
          },
          "titleBaseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "Vertical text baseline for the header title. One of \`\\"top\\"\`, \`\\"bottom\\"\`, \`\\"middle\\"\`.

__Default value:__ \`\\"middle\\"\`",
          },
          "titleColor": Object {
            "$ref": "#/definitions/Color",
            "description": "Color of the header title, can be in hex color code or regular color name.",
          },
          "titleFont": Object {
            "description": "Font of the header title. (e.g., \`\\"Helvetica Neue\\"\`).",
            "type": "string",
          },
          "titleFontSize": Object {
            "description": "Font size of the header title.",
            "minimum": 0,
            "type": "number",
          },
          "titleFontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style of the header title.",
          },
          "titleFontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "Font weight of the header title.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "titleLimit": Object {
            "description": "The maximum length of the header title in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.

__Default value:__ \`0\`, indicating no limit",
            "type": "number",
          },
          "titleLineHeight": Object {
            "description": "Line height in pixels for multi-line title text.",
            "type": "number",
          },
          "titleOrient": Object {
            "$ref": "#/definitions/Orient",
            "description": "The orientation of the header title. One of \`\\"top\\"\`, \`\\"bottom\\"\`, \`\\"left\\"\` or \`\\"right\\"\`.",
          },
          "titlePadding": Object {
            "description": "The padding, in pixel, between facet header's title and the label.

__Default value:__ \`10\`",
            "type": "number",
          },
        },
        "type": "object",
      },
      "HeaderConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "format": Object {
            "description": "The text formatting pattern for labels of guides (axes, legends, headers) and text marks.

- If the format type is \`\\"number\\"\` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
- If the format type is \`\\"time\\"\` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).

See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.

__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.",
            "type": "string",
          },
          "formatType": Object {
            "description": "The format type for labels (\`\\"number\\"\` or \`\\"time\\"\`).

__Default value:__
- \`\\"time\\"\` for temporal fields and ordinal and nomimal fields with \`timeUnit\`.
- \`\\"number\\"\` for quantitative fields as well as ordinal and nomimal fields without \`timeUnit\`.",
            "enum": Array [
              "number",
              "time",
            ],
            "type": "string",
          },
          "labelAlign": Object {
            "$ref": "#/definitions/Align",
            "description": "Horizontal text alignment of header labels. One of \`\\"left\\"\`, \`\\"center\\"\`, or \`\\"right\\"\`.",
          },
          "labelAnchor": Object {
            "$ref": "#/definitions/TitleAnchor",
            "description": "The anchor position for placing the labels. One of \`\\"start\\"\`, \`\\"middle\\"\`, or \`\\"end\\"\`. For example, with a label orientation of top these anchor positions map to a left-, center-, or right-aligned label.",
          },
          "labelAngle": Object {
            "description": "The rotation angle of the header labels.

__Default value:__ \`0\` for column header, \`-90\` for row header.",
            "maximum": 360,
            "minimum": -360,
            "type": "number",
          },
          "labelColor": Object {
            "$ref": "#/definitions/Color",
            "description": "The color of the header label, can be in hex color code or regular color name.",
          },
          "labelExpr": Object {
            "description": "[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.

__Note:__ The label text and value can be assessed via the \`label\` and \`value\` properties of the header's backing \`datum\` object.",
            "type": "string",
          },
          "labelFont": Object {
            "description": "The font of the header label.",
            "type": "string",
          },
          "labelFontSize": Object {
            "description": "The font size of the header label, in pixels.",
            "minimum": 0,
            "type": "number",
          },
          "labelFontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style of the header label.",
          },
          "labelLimit": Object {
            "description": "The maximum length of the header label in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.

__Default value:__ \`0\`, indicating no limit",
            "type": "number",
          },
          "labelOrient": Object {
            "$ref": "#/definitions/Orient",
            "description": "The orientation of the header label. One of \`\\"top\\"\`, \`\\"bottom\\"\`, \`\\"left\\"\` or \`\\"right\\"\`.",
          },
          "labelPadding": Object {
            "description": "The padding, in pixel, between facet header's label and the plot.

__Default value:__ \`10\`",
            "type": "number",
          },
          "labels": Object {
            "description": "A boolean flag indicating if labels should be included as part of the header.

__Default value:__ \`true\`.",
            "type": "boolean",
          },
          "title": Object {
            "description": "Set to null to disable title for the axis, legend, or header.",
            "type": "null",
          },
          "titleAlign": Object {
            "$ref": "#/definitions/Align",
            "description": "Horizontal text alignment (to the anchor) of header titles.",
          },
          "titleAnchor": Object {
            "$ref": "#/definitions/TitleAnchor",
            "description": "The anchor position for placing the title. One of \`\\"start\\"\`, \`\\"middle\\"\`, or \`\\"end\\"\`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.",
          },
          "titleAngle": Object {
            "description": "The rotation angle of the header title.

__Default value:__ \`0\`.",
            "maximum": 360,
            "minimum": -360,
            "type": "number",
          },
          "titleBaseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "Vertical text baseline for the header title. One of \`\\"top\\"\`, \`\\"bottom\\"\`, \`\\"middle\\"\`.

__Default value:__ \`\\"middle\\"\`",
          },
          "titleColor": Object {
            "$ref": "#/definitions/Color",
            "description": "Color of the header title, can be in hex color code or regular color name.",
          },
          "titleFont": Object {
            "description": "Font of the header title. (e.g., \`\\"Helvetica Neue\\"\`).",
            "type": "string",
          },
          "titleFontSize": Object {
            "description": "Font size of the header title.",
            "minimum": 0,
            "type": "number",
          },
          "titleFontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style of the header title.",
          },
          "titleFontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "Font weight of the header title.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "titleLimit": Object {
            "description": "The maximum length of the header title in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.

__Default value:__ \`0\`, indicating no limit",
            "type": "number",
          },
          "titleLineHeight": Object {
            "description": "Line height in pixels for multi-line title text.",
            "type": "number",
          },
          "titleOrient": Object {
            "$ref": "#/definitions/Orient",
            "description": "The orientation of the header title. One of \`\\"top\\"\`, \`\\"bottom\\"\`, \`\\"left\\"\` or \`\\"right\\"\`.",
          },
          "titlePadding": Object {
            "description": "The padding, in pixel, between facet header's title and the label.

__Default value:__ \`10\`",
            "type": "number",
          },
        },
        "type": "object",
      },
      "HexColor": Object {
        "format": "color-hex",
        "type": "string",
      },
      "ImputeMethod": Object {
        "enum": Array [
          "value",
          "median",
          "max",
          "min",
          "mean",
        ],
        "type": "string",
      },
      "ImputeParams": Object {
        "additionalProperties": false,
        "properties": Object {
          "frame": Object {
            "description": "A frame specification as a two-element array used to control the window over which the specified method is applied. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. For example, the value \`[-5, 5]\` indicates that the window should include five objects preceding and five objects following the current object.

__Default value:__:  \`[null, null]\` indicating that the window includes all objects.",
            "items": Array [
              Object {
                "type": Array [
                  "null",
                  "number",
                ],
              },
              Object {
                "type": Array [
                  "null",
                  "number",
                ],
              },
            ],
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "keyvals": Object {
            "anyOf": Array [
              Object {
                "items": Object {},
                "type": "array",
              },
              Object {
                "$ref": "#/definitions/ImputeSequence",
              },
            ],
            "description": "Defines the key values that should be considered for imputation.
An array of key values or an object defining a [number sequence](https://vega.github.io/vega-lite/docs/impute.html#sequence-def).

If provided, this will be used in addition to the key values observed within the input data. If not provided, the values will be derived from all unique values of the \`key\` field. For \`impute\` in \`encoding\`, the key field is the x-field if the y-field is imputed, or vice versa.

If there is no impute grouping, this property _must_ be specified.",
          },
          "method": Object {
            "$ref": "#/definitions/ImputeMethod",
            "description": "The imputation method to use for the field value of imputed data objects.
One of \`\\"value\\"\`, \`\\"mean\\"\`, \`\\"median\\"\`, \`\\"max\\"\` or \`\\"min\\"\`.

__Default value:__  \`\\"value\\"\`",
          },
          "value": Object {
            "description": "The field value to use when the imputation \`method\` is \`\\"value\\"\`.",
          },
        },
        "type": "object",
      },
      "ImputeSequence": Object {
        "additionalProperties": false,
        "properties": Object {
          "start": Object {
            "description": "The starting value of the sequence.
__Default value:__ \`0\`",
            "type": "number",
          },
          "step": Object {
            "description": "The step value between sequence entries.
__Default value:__ \`1\` or \`-1\` if \`stop < start\`",
            "type": "number",
          },
          "stop": Object {
            "description": "The ending value(exclusive) of the sequence.",
            "type": "number",
          },
        },
        "required": Array [
          "stop",
        ],
        "type": "object",
      },
      "ImputeTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "frame": Object {
            "description": "A frame specification as a two-element array used to control the window over which the specified method is applied. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. For example, the value \`[-5, 5]\` indicates that the window should include five objects preceding and five objects following the current object.

__Default value:__:  \`[null, null]\` indicating that the window includes all objects.",
            "items": Array [
              Object {
                "type": Array [
                  "null",
                  "number",
                ],
              },
              Object {
                "type": Array [
                  "null",
                  "number",
                ],
              },
            ],
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "groupby": Object {
            "description": "An optional array of fields by which to group the values.
Imputation will then be performed on a per-group basis.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "impute": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field for which the missing values should be imputed.",
          },
          "key": Object {
            "$ref": "#/definitions/FieldName",
            "description": "A key field that uniquely identifies data objects within a group.
Missing key values (those occurring in the data but not in the current group) will be imputed.",
          },
          "keyvals": Object {
            "anyOf": Array [
              Object {
                "items": Object {},
                "type": "array",
              },
              Object {
                "$ref": "#/definitions/ImputeSequence",
              },
            ],
            "description": "Defines the key values that should be considered for imputation.
An array of key values or an object defining a [number sequence](https://vega.github.io/vega-lite/docs/impute.html#sequence-def).

If provided, this will be used in addition to the key values observed within the input data. If not provided, the values will be derived from all unique values of the \`key\` field. For \`impute\` in \`encoding\`, the key field is the x-field if the y-field is imputed, or vice versa.

If there is no impute grouping, this property _must_ be specified.",
          },
          "method": Object {
            "$ref": "#/definitions/ImputeMethod",
            "description": "The imputation method to use for the field value of imputed data objects.
One of \`\\"value\\"\`, \`\\"mean\\"\`, \`\\"median\\"\`, \`\\"max\\"\` or \`\\"min\\"\`.

__Default value:__  \`\\"value\\"\`",
          },
          "value": Object {
            "description": "The field value to use when the imputation \`method\` is \`\\"value\\"\`.",
          },
        },
        "required": Array [
          "impute",
          "key",
        ],
        "type": "object",
      },
      "InlineData": Object {
        "additionalProperties": false,
        "properties": Object {
          "format": Object {
            "$ref": "#/definitions/DataFormat",
            "description": "An object that specifies the format for parsing the data.",
          },
          "name": Object {
            "description": "Provide a placeholder name and bind data at runtime.",
            "type": "string",
          },
          "values": Object {
            "$ref": "#/definitions/InlineDataset",
            "description": "The full data set, included inline. This can be an array of objects or primitive values, an object, or a string.
Arrays of primitive values are ingested as objects with a \`data\` property. Strings are parsed according to the specified format type.",
          },
        },
        "required": Array [
          "values",
        ],
        "type": "object",
      },
      "InlineDataset": Object {
        "anyOf": Array [
          Object {
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          Object {
            "items": Object {
              "type": "string",
            },
            "type": "array",
          },
          Object {
            "items": Object {
              "type": "boolean",
            },
            "type": "array",
          },
          Object {
            "items": Object {
              "type": "object",
            },
            "type": "array",
          },
          Object {
            "type": "string",
          },
          Object {
            "type": "object",
          },
        ],
      },
      "InputBinding": Object {
        "additionalProperties": false,
        "properties": Object {
          "autocomplete": Object {
            "type": "string",
          },
          "debounce": Object {
            "type": "number",
          },
          "element": Object {
            "$ref": "#/definitions/Element",
          },
          "input": Object {
            "type": "string",
          },
          "name": Object {
            "type": "string",
          },
          "placeholder": Object {
            "type": "string",
          },
          "type": Object {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Interpolate": Object {
        "enum": Array [
          "basis",
          "basis-open",
          "basis-closed",
          "bundle",
          "cardinal",
          "cardinal-open",
          "cardinal-closed",
          "catmull-rom",
          "linear",
          "linear-closed",
          "monotone",
          "natural",
          "step",
          "step-before",
          "step-after",
        ],
        "maximum": 900,
        "minimum": 100,
        "type": "string",
      },
      "IntervalSelection": Object {
        "additionalProperties": false,
        "properties": Object {
          "bind": Object {
            "description": "Establishes a two-way binding between the interval selection and the scales
used within the same view. This allows a user to interactively pan and
zoom the view.

__See also:__ [\`bind\`](https://vega.github.io/vega-lite/docs/bind.html) documentation.",
            "enum": Array [
              "scales",
            ],
            "type": "string",
          },
          "clear": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Stream",
              },
              Object {
                "type": "string",
              },
              Object {
                "type": "boolean",
              },
            ],
            "description": "Clears the selection, emptying it of all values. Can be a
[Event Stream](https://vega.github.io/vega/docs/event-streams/) or \`false\` to disable.

__Default value:__ \`dblclick\`.

__See also:__ [\`clear\`](https://vega.github.io/vega-lite/docs/clear.html) documentation.",
          },
          "empty": Object {
            "description": "By default, \`all\` data values are considered to lie within an empty selection.
When set to \`none\`, empty selections contain no data values.",
            "enum": Array [
              "all",
              "none",
            ],
            "type": "string",
          },
          "encodings": Object {
            "description": "An array of encoding channels. The corresponding data field values
must match for a data tuple to fall within the selection.

__See also:__ [\`encodings\`](https://vega.github.io/vega-lite/docs/project.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/SingleDefUnitChannel",
            },
            "type": "array",
          },
          "fields": Object {
            "description": "An array of field names whose values must match for a data tuple to
fall within the selection.

__See also:__ [\`fields\`](https://vega.github.io/vega-lite/docs/project.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "init": Object {
            "$ref": "#/definitions/SelectionInitIntervalMapping",
            "description": "Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and arrays of
initial values.

__See also:__ [\`init\`](https://vega.github.io/vega-lite/docs/init.html) documentation.",
          },
          "mark": Object {
            "$ref": "#/definitions/BrushConfig",
            "description": "An interval selection also adds a rectangle mark to depict the
extents of the interval. The \`mark\` property can be used to customize the
appearance of the mark.

__See also:__ [\`mark\`](https://vega.github.io/vega-lite/docs/selection-mark.html) documentation.",
          },
          "on": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Stream",
              },
              Object {
                "type": "string",
              },
            ],
            "description": "A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.
For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).",
          },
          "resolve": Object {
            "$ref": "#/definitions/SelectionResolution",
            "description": "With layered and multi-view displays, a strategy that determines how
selections' data queries are resolved when applied in a filter transform,
conditional encoding rule, or scale domain.

__See also:__ [\`resolve\`](https://vega.github.io/vega-lite/docs/selection-resolve.html) documentation.",
          },
          "translate": Object {
            "description": "When truthy, allows a user to interactively move an interval selection
back-and-forth. Can be \`true\`, \`false\` (to disable panning), or a
[Vega event stream definition](https://vega.github.io/vega/docs/event-streams/)
which must include a start and end event to trigger continuous panning.

__Default value:__ \`true\`, which corresponds to
\`[mousedown, window:mouseup] > window:mousemove!\` which corresponds to
clicks and dragging within an interval selection to reposition it.

__See also:__ [\`translate\`](https://vega.github.io/vega-lite/docs/translate.html) documentation.",
            "type": Array [
              "string",
              "boolean",
            ],
          },
          "type": Object {
            "description": "Determines the default event processing and data query for the selection. Vega-Lite currently supports three selection types:

- \`\\"single\\"\` -- to select a single discrete data value on \`click\`.
- \`\\"multi\\"\` -- to select multiple discrete data value; the first value is selected on \`click\` and additional values toggled on shift-\`click\`.
- \`\\"interval\\"\` -- to select a continuous range of data values on \`drag\`.",
            "enum": Array [
              "interval",
            ],
            "type": "string",
          },
          "zoom": Object {
            "description": "When truthy, allows a user to interactively resize an interval selection.
Can be \`true\`, \`false\` (to disable zooming), or a [Vega event stream
definition](https://vega.github.io/vega/docs/event-streams/). Currently,
only \`wheel\` events are supported.

__Default value:__ \`true\`, which corresponds to \`wheel!\`.

__See also:__ [\`zoom\`](https://vega.github.io/vega-lite/docs/zoom.html) documentation.",
            "type": Array [
              "string",
              "boolean",
            ],
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "IntervalSelectionConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "bind": Object {
            "description": "Establishes a two-way binding between the interval selection and the scales
used within the same view. This allows a user to interactively pan and
zoom the view.

__See also:__ [\`bind\`](https://vega.github.io/vega-lite/docs/bind.html) documentation.",
            "enum": Array [
              "scales",
            ],
            "type": "string",
          },
          "clear": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Stream",
              },
              Object {
                "type": "string",
              },
              Object {
                "type": "boolean",
              },
            ],
            "description": "Clears the selection, emptying it of all values. Can be a
[Event Stream](https://vega.github.io/vega/docs/event-streams/) or \`false\` to disable.

__Default value:__ \`dblclick\`.

__See also:__ [\`clear\`](https://vega.github.io/vega-lite/docs/clear.html) documentation.",
          },
          "empty": Object {
            "description": "By default, \`all\` data values are considered to lie within an empty selection.
When set to \`none\`, empty selections contain no data values.",
            "enum": Array [
              "all",
              "none",
            ],
            "type": "string",
          },
          "encodings": Object {
            "description": "An array of encoding channels. The corresponding data field values
must match for a data tuple to fall within the selection.

__See also:__ [\`encodings\`](https://vega.github.io/vega-lite/docs/project.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/SingleDefUnitChannel",
            },
            "type": "array",
          },
          "fields": Object {
            "description": "An array of field names whose values must match for a data tuple to
fall within the selection.

__See also:__ [\`fields\`](https://vega.github.io/vega-lite/docs/project.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "init": Object {
            "$ref": "#/definitions/SelectionInitIntervalMapping",
            "description": "Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and arrays of
initial values.

__See also:__ [\`init\`](https://vega.github.io/vega-lite/docs/init.html) documentation.",
          },
          "mark": Object {
            "$ref": "#/definitions/BrushConfig",
            "description": "An interval selection also adds a rectangle mark to depict the
extents of the interval. The \`mark\` property can be used to customize the
appearance of the mark.

__See also:__ [\`mark\`](https://vega.github.io/vega-lite/docs/selection-mark.html) documentation.",
          },
          "on": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Stream",
              },
              Object {
                "type": "string",
              },
            ],
            "description": "A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.
For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).",
          },
          "resolve": Object {
            "$ref": "#/definitions/SelectionResolution",
            "description": "With layered and multi-view displays, a strategy that determines how
selections' data queries are resolved when applied in a filter transform,
conditional encoding rule, or scale domain.

__See also:__ [\`resolve\`](https://vega.github.io/vega-lite/docs/selection-resolve.html) documentation.",
          },
          "translate": Object {
            "description": "When truthy, allows a user to interactively move an interval selection
back-and-forth. Can be \`true\`, \`false\` (to disable panning), or a
[Vega event stream definition](https://vega.github.io/vega/docs/event-streams/)
which must include a start and end event to trigger continuous panning.

__Default value:__ \`true\`, which corresponds to
\`[mousedown, window:mouseup] > window:mousemove!\` which corresponds to
clicks and dragging within an interval selection to reposition it.

__See also:__ [\`translate\`](https://vega.github.io/vega-lite/docs/translate.html) documentation.",
            "type": Array [
              "string",
              "boolean",
            ],
          },
          "zoom": Object {
            "description": "When truthy, allows a user to interactively resize an interval selection.
Can be \`true\`, \`false\` (to disable zooming), or a [Vega event stream
definition](https://vega.github.io/vega/docs/event-streams/). Currently,
only \`wheel\` events are supported.

__Default value:__ \`true\`, which corresponds to \`wheel!\`.

__See also:__ [\`zoom\`](https://vega.github.io/vega-lite/docs/zoom.html) documentation.",
            "type": Array [
              "string",
              "boolean",
            ],
          },
        },
        "type": "object",
      },
      "JoinAggregateFieldDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The output name for the join aggregate operation.",
          },
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field for which to compute the aggregate function. This can be omitted for functions that do not operate over a field such as \`\\"count\\"\`.",
          },
          "op": Object {
            "$ref": "#/definitions/AggregateOp",
            "description": "The aggregation operation to apply (e.g., \`\\"sum\\"\`, \`\\"average\\"\` or \`\\"count\\"\`). See the list of all supported operations [here](https://vega.github.io/vega-lite/docs/aggregate.html#ops).",
          },
        },
        "required": Array [
          "op",
          "as",
        ],
        "type": "object",
      },
      "JoinAggregateTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "groupby": Object {
            "description": "The data fields for partitioning the data objects into separate groups. If unspecified, all data points will be in a single group.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "joinaggregate": Object {
            "description": "The definition of the fields in the join aggregate, and what calculations to use.",
            "items": Object {
              "$ref": "#/definitions/JoinAggregateFieldDef",
            },
            "type": "array",
          },
        },
        "required": Array [
          "joinaggregate",
        ],
        "type": "object",
      },
      "JsonDataFormat": Object {
        "additionalProperties": false,
        "properties": Object {
          "parse": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Parse",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "If set to \`null\`, disable type inference based on the spec and only use type inference based on the data.
Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of \`\\"number\\"\`, \`\\"boolean\\"\`, \`\\"date\\"\`, or null (do not parse the field)).
For example, \`\\"parse\\": {\\"modified_on\\": \\"date\\"}\` parses the \`modified_on\` field in each input record a Date value.

For \`\\"date\\"\`, we parse data based using Javascript's [\`Date.parse()\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
For Specific date formats can be provided (e.g., \`{foo: \\"date:'%m%d%Y'\\"}\`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., \`{foo: \\"utc:'%m%d%Y'\\"}\`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)",
          },
          "property": Object {
            "description": "The JSON property containing the desired data.
This parameter can be used when the loaded JSON file may have surrounding structure or meta-data.
For example \`\\"property\\": \\"values.features\\"\` is equivalent to retrieving \`json.values.features\`
from the loaded JSON object.",
            "type": "string",
          },
          "type": Object {
            "description": "Type of input data: \`\\"json\\"\`, \`\\"csv\\"\`, \`\\"tsv\\"\`, \`\\"dsv\\"\`.

__Default value:__  The default format type is determined by the extension of the file URL.
If no extension is detected, \`\\"json\\"\` will be used by default.",
            "enum": Array [
              "json",
            ],
            "type": "string",
          },
        },
        "type": "object",
      },
      "LabelOverlap": Object {
        "anyOf": Array [
          Object {
            "type": "boolean",
          },
          Object {
            "enum": Array [
              "parity",
            ],
            "type": "string",
          },
          Object {
            "enum": Array [
              "greedy",
            ],
            "type": "string",
          },
        ],
      },
      "LatLongFieldDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
            "type": "null",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
            "enum": Array [
              "quantitative",
            ],
            "type": "string",
          },
        },
        "type": "object",
      },
      "LayerSpec": Object {
        "additionalProperties": false,
        "description": "A full layered plot specification, which may contains \`encoding\` and \`projection\` properties that will be applied to underlying unit (single-view) specifications.",
        "properties": Object {
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "encoding": Object {
            "$ref": "#/definitions/Encoding",
            "description": "A shared key-value mapping between encoding channels and definition of fields in the underlying layers.",
          },
          "height": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "container",
                ],
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/Step",
              },
            ],
            "description": "The height of a visualization.

- For a plot with a continuous y-field, height should be a number.
- For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of \`{step: number}\` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
- To enable responsive sizing on height, it should be set to \`\\"container\\"\`.

__Default value:__ Based on \`config.view.continuousHeight\` for a plot with a continuous y-field and \`config.view.discreteHeight\` otherwise.

__Note:__ For plots with [\`row\` and \`column\` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the \`\\"container\\"\` option cannot be used.

__See also:__ [\`height\`](https://vega.github.io/vega-lite/docs/size.html) documentation.",
          },
          "layer": Object {
            "description": "Layer or single view specifications to be layered.

__Note__: Specifications inside \`layer\` cannot use \`row\` and \`column\` channels as layering facet specifications is not allowed. Instead, use the [facet operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a facet.",
            "items": Object {
              "anyOf": Array [
                Object {
                  "$ref": "#/definitions/LayerSpec",
                },
                Object {
                  "$ref": "#/definitions/UnitSpec",
                },
              ],
            },
            "type": "array",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "projection": Object {
            "$ref": "#/definitions/Projection",
            "description": "An object defining properties of the geographic projection shared by underlying layers.",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
          "view": Object {
            "$ref": "#/definitions/ViewBackground",
            "description": "An object defining the view background's fill and stroke.

__Default value:__ none (transparent)",
          },
          "width": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "container",
                ],
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/Step",
              },
            ],
            "description": "The width of a visualization.

- For a plot with a continuous x-field, width should be a number.
- For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of \`{step: number}\` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
- To enable responsive sizing on width, it should be set to \`\\"container\\"\`.

__Default value:__
Based on \`config.view.continuousWidth\` for a plot with a continuous x-field and \`config.view.discreteWidth\` otherwise.

__Note:__ For plots with [\`row\` and \`column\` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the \`\\"container\\"\` option cannot be used.

__See also:__ [\`width\`](https://vega.github.io/vega-lite/docs/size.html) documentation.",
          },
        },
        "required": Array [
          "layer",
        ],
        "type": "object",
      },
      "LayoutAlign": Object {
        "enum": Array [
          "all",
          "each",
          "none",
        ],
        "type": "string",
      },
      "LayoutBounds": Object {
        "anyOf": Array [
          Object {
            "enum": Array [
              "full",
            ],
            "type": "string",
          },
          Object {
            "enum": Array [
              "flush",
            ],
            "type": "string",
          },
          Object {
            "$ref": "#/definitions/SignalRef",
          },
        ],
      },
      "Legend": Object {
        "additionalProperties": false,
        "description": "Properties of a legend or boolean flag for determining whether to show it.",
        "properties": Object {
          "clipHeight": Object {
            "description": "The height in pixels to clip symbol legend entries and limit their size.",
            "type": "number",
          },
          "columnPadding": Object {
            "description": "The horizontal padding in pixels between symbol legend entries.

__Default value:__ \`10\`.",
            "type": "number",
          },
          "columns": Object {
            "description": "The number of columns in which to arrange symbol legend entries. A value of \`0\` or lower indicates a single row with one column per entry.",
            "type": "number",
          },
          "cornerRadius": Object {
            "description": "Corner radius for the full legend.",
            "type": "number",
          },
          "direction": Object {
            "$ref": "#/definitions/Orientation",
            "description": "The direction of the legend, one of \`\\"vertical\\"\` or \`\\"horizontal\\"\`.

__Default value:__
- For top-/bottom-\`orient\`ed legends, \`\\"horizontal\\"\`
- For left-/right-\`orient\`ed legends, \`\\"vertical\\"\`
- For top/bottom-left/right-\`orient\`ed legends, \`\\"horizontal\\"\` for gradient legends and \`\\"vertical\\"\` for symbol legends.",
          },
          "fillColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Background fill color for the full legend.",
          },
          "format": Object {
            "description": "The text formatting pattern for labels of guides (axes, legends, headers) and text marks.

- If the format type is \`\\"number\\"\` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
- If the format type is \`\\"time\\"\` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).

See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.

__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.",
            "type": "string",
          },
          "formatType": Object {
            "description": "The format type for labels (\`\\"number\\"\` or \`\\"time\\"\`).

__Default value:__
- \`\\"time\\"\` for temporal fields and ordinal and nomimal fields with \`timeUnit\`.
- \`\\"number\\"\` for quantitative fields as well as ordinal and nomimal fields without \`timeUnit\`.",
            "enum": Array [
              "number",
              "time",
            ],
            "type": "string",
          },
          "gradientLength": Object {
            "description": "The length in pixels of the primary axis of a color gradient. This value corresponds to the height of a vertical gradient or the width of a horizontal gradient.

__Default value:__ \`200\`.",
            "minimum": 0,
            "type": "number",
          },
          "gradientOpacity": Object {
            "description": "Opacity of the color gradient.",
            "type": "number",
          },
          "gradientStrokeColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "The color of the gradient stroke, can be in hex color code or regular color name.

__Default value:__ \`\\"lightGray\\"\`.",
          },
          "gradientStrokeWidth": Object {
            "description": "The width of the gradient stroke, in pixels.

__Default value:__ \`0\`.",
            "minimum": 0,
            "type": "number",
          },
          "gradientThickness": Object {
            "description": "The thickness in pixels of the color gradient. This value corresponds to the width of a vertical gradient or the height of a horizontal gradient.

__Default value:__ \`16\`.",
            "minimum": 0,
            "type": "number",
          },
          "gridAlign": Object {
            "$ref": "#/definitions/LayoutAlign",
            "description": "The alignment to apply to symbol legends rows and columns. The supported string values are \`\\"all\\"\`, \`\\"each\\"\` (the default), and \`none\`. For more information, see the [grid layout documentation](https://vega.github.io/vega/docs/layout).

__Default value:__ \`\\"each\\"\`.",
          },
          "labelAlign": Object {
            "$ref": "#/definitions/Align",
            "description": "The alignment of the legend label, can be left, center, or right.",
          },
          "labelBaseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "The position of the baseline of legend label, can be \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`, or \`\\"alphabetic\\"\`.

__Default value:__ \`\\"middle\\"\`.",
          },
          "labelColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "The color of the legend label, can be in hex color code or regular color name.",
          },
          "labelExpr": Object {
            "description": "[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.

__Note:__ The label text and value can be assessed via the \`label\` and \`value\` properties of the legend's backing \`datum\` object.",
            "type": "string",
          },
          "labelFont": Object {
            "description": "The font of the legend label.",
            "type": "string",
          },
          "labelFontSize": Object {
            "description": "The font size of legend label.

__Default value:__ \`10\`.",
            "minimum": 0,
            "type": "number",
          },
          "labelFontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style of legend label.",
          },
          "labelFontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "The font weight of legend label.",
          },
          "labelLimit": Object {
            "description": "Maximum allowed pixel width of legend tick labels.

__Default value:__ \`160\`.",
            "type": "number",
          },
          "labelOffset": Object {
            "description": "The offset of the legend label.",
            "type": "number",
          },
          "labelOpacity": Object {
            "description": "Opacity of labels.",
            "type": "number",
          },
          "labelOverlap": Object {
            "$ref": "#/definitions/LabelOverlap",
            "description": "The strategy to use for resolving overlap of labels in gradient legends. If \`false\`, no overlap reduction is attempted. If set to \`true\` (default) or \`\\"parity\\"\`, a strategy of removing every other label is used. If set to \`\\"greedy\\"\`, a linear scan of the labels is performed, removing any label that overlaps with the last visible label (this often works better for log-scaled axes).

__Default value:__ \`true\`.",
          },
          "labelPadding": Object {
            "description": "Padding in pixels between the legend and legend labels.",
            "type": "number",
          },
          "labelSeparation": Object {
            "description": "The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default \`0\`). This property is ignored if *labelOverlap* resolution is not enabled.",
            "type": "number",
          },
          "legendX": Object {
            "description": "Custom x-position for legend with orient \\"none\\".",
            "type": "number",
          },
          "legendY": Object {
            "description": "Custom y-position for legend with orient \\"none\\".",
            "type": "number",
          },
          "offset": Object {
            "description": "The offset in pixels by which to displace the legend from the data rectangle and axes.

__Default value:__ \`18\`.",
            "type": "number",
          },
          "orient": Object {
            "$ref": "#/definitions/LegendOrient",
            "description": "The orientation of the legend, which determines how the legend is positioned within the scene. One of \`\\"left\\"\`, \`\\"right\\"\`, \`\\"top\\"\`, \`\\"bottom\\"\`, \`\\"top-left\\"\`, \`\\"top-right\\"\`, \`\\"bottom-left\\"\`, \`\\"bottom-right\\"\`, \`\\"none\\"\`.

__Default value:__ \`\\"right\\"\`",
          },
          "padding": Object {
            "description": "The padding between the border and content of the legend group.

__Default value:__ \`0\`.",
            "type": "number",
          },
          "rowPadding": Object {
            "description": "The vertical padding in pixels between symbol legend entries.

__Default value:__ \`2\`.",
            "type": "number",
          },
          "strokeColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Border stroke color for the full legend.",
          },
          "symbolDash": Object {
            "description": "An array of alternating [stroke, space] lengths for dashed symbol strokes.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "symbolDashOffset": Object {
            "description": "The pixel offset at which to start drawing with the symbol stroke dash array.",
            "type": "number",
          },
          "symbolFillColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "The color of the legend symbol,",
          },
          "symbolLimit": Object {
            "description": "The maximum number of allowed entries for a symbol legend. Additional entries will be dropped.",
            "type": "number",
          },
          "symbolOffset": Object {
            "description": "Horizontal pixel offset for legend symbols.

__Default value:__ \`0\`.",
            "type": "number",
          },
          "symbolOpacity": Object {
            "description": "Opacity of the legend symbols.",
            "type": "number",
          },
          "symbolSize": Object {
            "description": "The size of the legend symbol, in pixels.

__Default value:__ \`100\`.",
            "minimum": 0,
            "type": "number",
          },
          "symbolStrokeColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Stroke color for legend symbols.",
          },
          "symbolStrokeWidth": Object {
            "description": "The width of the symbol's stroke.

__Default value:__ \`1.5\`.",
            "minimum": 0,
            "type": "number",
          },
          "symbolType": Object {
            "$ref": "#/definitions/SymbolShape",
            "description": "The symbol shape. One of the plotting shapes \`circle\` (default), \`square\`, \`cross\`, \`diamond\`, \`triangle-up\`, \`triangle-down\`, \`triangle-right\`, or \`triangle-left\`, the line symbol \`stroke\`, or one of the centered directional shapes \`arrow\`, \`wedge\`, or \`triangle\`. Alternatively, a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) can be provided. For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.

__Default value:__ \`\\"circle\\"\`.",
          },
          "tickCount": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/TimeInterval",
              },
            ],
            "description": "The desired number of tick values for quantitative legends.",
          },
          "tickMinStep": Object {
            "description": "The minimum desired step between legend ticks, in terms of scale domain values. For example, a value of \`1\` indicates that ticks should not be less than 1 unit apart. If \`tickMinStep\` is specified, the \`tickCount\` value will be adjusted, if necessary, to enforce the minimum step value.

__Default value__: \`undefined\`",
            "type": "number",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "titleAlign": Object {
            "$ref": "#/definitions/Align",
            "description": "Horizontal text alignment for legend titles.

__Default value:__ \`\\"left\\"\`.",
          },
          "titleAnchor": Object {
            "$ref": "#/definitions/TitleAnchor",
            "description": "Text anchor position for placing legend titles.",
          },
          "titleBaseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "Vertical text baseline for legend titles.

__Default value:__ \`\\"top\\"\`.",
          },
          "titleColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "The color of the legend title, can be in hex color code or regular color name.",
          },
          "titleFont": Object {
            "description": "The font of the legend title.",
            "type": "string",
          },
          "titleFontSize": Object {
            "description": "The font size of the legend title.",
            "type": "number",
          },
          "titleFontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style of the legend title.",
          },
          "titleFontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "The font weight of the legend title.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "titleLimit": Object {
            "description": "Maximum allowed pixel width of legend titles.

__Default value:__ \`180\`.",
            "minimum": 0,
            "type": "number",
          },
          "titleLineHeight": Object {
            "description": "Line height in pixels for multi-line title text.",
            "type": "number",
          },
          "titleOpacity": Object {
            "description": "Opacity of the legend title.",
            "type": "number",
          },
          "titleOrient": Object {
            "$ref": "#/definitions/Orient",
            "description": "Orientation of the legend title.",
          },
          "titlePadding": Object {
            "description": "The padding, in pixels, between title and legend.

__Default value:__ \`5\`.",
            "type": "number",
          },
          "type": Object {
            "description": "The type of the legend. Use \`\\"symbol\\"\` to create a discrete legend and \`\\"gradient\\"\` for a continuous color gradient.

__Default value:__ \`\\"gradient\\"\` for non-binned quantitative fields and temporal fields; \`\\"symbol\\"\` otherwise.",
            "enum": Array [
              "symbol",
              "gradient",
            ],
            "type": "string",
          },
          "values": Object {
            "description": "Explicitly set the visible legend values.",
            "items": Object {
              "anyOf": Array [
                Object {
                  "type": "number",
                },
                Object {
                  "type": "string",
                },
                Object {
                  "type": "boolean",
                },
                Object {
                  "$ref": "#/definitions/DateTime",
                },
              ],
            },
            "type": "array",
          },
          "zindex": Object {
            "description": "A non-negative integer indicating the z-index of the legend.
If zindex is 0, legend should be drawn behind all chart elements.
To put them in front, use zindex = 1.",
            "minimum": 0,
            "type": "number",
          },
        },
        "type": "object",
      },
      "LegendBinding": Object {
        "anyOf": Array [
          Object {
            "enum": Array [
              "legend",
            ],
            "type": "string",
          },
          Object {
            "$ref": "#/definitions/LegendStreamBinding",
          },
        ],
      },
      "LegendConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "clipHeight": Object {
            "description": "The height in pixels to clip symbol legend entries and limit their size.",
            "type": "number",
          },
          "columnPadding": Object {
            "description": "The horizontal padding in pixels between symbol legend entries.

__Default value:__ \`10\`.",
            "type": "number",
          },
          "columns": Object {
            "description": "The number of columns in which to arrange symbol legend entries. A value of \`0\` or lower indicates a single row with one column per entry.",
            "type": "number",
          },
          "cornerRadius": Object {
            "description": "Corner radius for the full legend.",
            "type": "number",
          },
          "fillColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Background fill color for the full legend.",
          },
          "gradientDirection": Object {
            "$ref": "#/definitions/Orientation",
            "description": "The default direction (\`\\"horizontal\\"\` or \`\\"vertical\\"\`) for gradient legends.

__Default value:__ \`\\"vertical\\"\`.",
          },
          "gradientHorizontalMaxLength": Object {
            "description": "Max legend length for a horizontal gradient when \`config.legend.gradientLength\` is undefined.

__Default value:__ \`200\`",
            "type": "number",
          },
          "gradientHorizontalMinLength": Object {
            "description": "Min legend length for a horizontal gradient when \`config.legend.gradientLength\` is undefined.

__Default value:__ \`100\`",
            "type": "number",
          },
          "gradientLabelLimit": Object {
            "description": "The maximum allowed length in pixels of color ramp gradient labels.",
            "type": "number",
          },
          "gradientLabelOffset": Object {
            "description": "Vertical offset in pixels for color ramp gradient labels.

__Default value:__ \`2\`.",
            "type": "number",
          },
          "gradientLength": Object {
            "description": "The length in pixels of the primary axis of a color gradient. This value corresponds to the height of a vertical gradient or the width of a horizontal gradient.

__Default value:__ \`200\`.",
            "minimum": 0,
            "type": "number",
          },
          "gradientOpacity": Object {
            "description": "Opacity of the color gradient.",
            "type": "number",
          },
          "gradientStrokeColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "The color of the gradient stroke, can be in hex color code or regular color name.

__Default value:__ \`\\"lightGray\\"\`.",
          },
          "gradientStrokeWidth": Object {
            "description": "The width of the gradient stroke, in pixels.

__Default value:__ \`0\`.",
            "minimum": 0,
            "type": "number",
          },
          "gradientThickness": Object {
            "description": "The thickness in pixels of the color gradient. This value corresponds to the width of a vertical gradient or the height of a horizontal gradient.

__Default value:__ \`16\`.",
            "minimum": 0,
            "type": "number",
          },
          "gradientVerticalMaxLength": Object {
            "description": "Max legend length for a vertical gradient when \`config.legend.gradientLength\` is undefined.

__Default value:__ \`200\`",
            "type": "number",
          },
          "gradientVerticalMinLength": Object {
            "description": "Min legend length for a vertical gradient when \`config.legend.gradientLength\` is undefined.

__Default value:__ \`100\`",
            "type": "number",
          },
          "gridAlign": Object {
            "$ref": "#/definitions/LayoutAlign",
            "description": "The alignment to apply to symbol legends rows and columns. The supported string values are \`\\"all\\"\`, \`\\"each\\"\` (the default), and \`none\`. For more information, see the [grid layout documentation](https://vega.github.io/vega/docs/layout).

__Default value:__ \`\\"each\\"\`.",
          },
          "labelAlign": Object {
            "$ref": "#/definitions/Align",
            "description": "The alignment of the legend label, can be left, center, or right.",
          },
          "labelBaseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "The position of the baseline of legend label, can be \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`, or \`\\"alphabetic\\"\`.

__Default value:__ \`\\"middle\\"\`.",
          },
          "labelColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "The color of the legend label, can be in hex color code or regular color name.",
          },
          "labelFont": Object {
            "description": "The font of the legend label.",
            "type": "string",
          },
          "labelFontSize": Object {
            "description": "The font size of legend label.

__Default value:__ \`10\`.",
            "minimum": 0,
            "type": "number",
          },
          "labelFontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style of legend label.",
          },
          "labelFontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "The font weight of legend label.",
          },
          "labelLimit": Object {
            "description": "Maximum allowed pixel width of legend tick labels.

__Default value:__ \`160\`.",
            "type": "number",
          },
          "labelOffset": Object {
            "description": "The offset of the legend label.",
            "type": "number",
          },
          "labelOpacity": Object {
            "description": "Opacity of labels.",
            "type": "number",
          },
          "labelOverlap": Object {
            "$ref": "#/definitions/LabelOverlap",
            "description": "The strategy to use for resolving overlap of labels in gradient legends. If \`false\`, no overlap reduction is attempted. If set to \`true\` or \`\\"parity\\"\`, a strategy of removing every other label is used. If set to \`\\"greedy\\"\`, a linear scan of the labels is performed, removing any label that overlaps with the last visible label (this often works better for log-scaled axes).

__Default value:__ \`\\"greedy\\"\` for \`log scales otherwise \`true\`.",
          },
          "labelPadding": Object {
            "description": "Padding in pixels between the legend and legend labels.",
            "type": "number",
          },
          "labelSeparation": Object {
            "description": "The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default \`0\`). This property is ignored if *labelOverlap* resolution is not enabled.",
            "type": "number",
          },
          "layout": Object {
            "$ref": "#/definitions/LegendLayout",
            "description": "Legend orient group layout parameters.",
          },
          "legendX": Object {
            "description": "Custom x-position for legend with orient \\"none\\".",
            "type": "number",
          },
          "legendY": Object {
            "description": "Custom y-position for legend with orient \\"none\\".",
            "type": "number",
          },
          "offset": Object {
            "description": "The offset in pixels by which to displace the legend from the data rectangle and axes.

__Default value:__ \`18\`.",
            "type": "number",
          },
          "orient": Object {
            "$ref": "#/definitions/LegendOrient",
            "description": "The orientation of the legend, which determines how the legend is positioned within the scene. One of \\"left\\", \\"right\\", \\"top-left\\", \\"top-right\\", \\"bottom-left\\", \\"bottom-right\\", \\"none\\".

__Default value:__ \`\\"right\\"\`",
          },
          "padding": Object {
            "description": "The padding between the border and content of the legend group.

__Default value:__ \`0\`.",
            "type": "number",
          },
          "rowPadding": Object {
            "description": "The vertical padding in pixels between symbol legend entries.

__Default value:__ \`2\`.",
            "type": "number",
          },
          "strokeColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Border stroke color for the full legend.",
          },
          "strokeDash": Object {
            "description": "Border stroke dash pattern for the full legend.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "strokeWidth": Object {
            "description": "Border stroke width for the full legend.",
            "type": "number",
          },
          "symbolBaseFillColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Default fill color for legend symbols. Only applied if there is no \`\\"fill\\"\` scale color encoding for the legend.

__Default value:__ \`\\"transparent\\"\`.",
          },
          "symbolBaseStrokeColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Default stroke color for legend symbols. Only applied if there is no \`\\"fill\\"\` scale color encoding for the legend.

__Default value:__ \`\\"gray\\"\`.",
          },
          "symbolDash": Object {
            "description": "An array of alternating [stroke, space] lengths for dashed symbol strokes.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "symbolDashOffset": Object {
            "description": "The pixel offset at which to start drawing with the symbol stroke dash array.",
            "type": "number",
          },
          "symbolDirection": Object {
            "$ref": "#/definitions/Orientation",
            "description": "The default direction (\`\\"horizontal\\"\` or \`\\"vertical\\"\`) for symbol legends.

__Default value:__ \`\\"vertical\\"\`.",
          },
          "symbolFillColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "The color of the legend symbol,",
          },
          "symbolLimit": Object {
            "description": "The maximum number of allowed entries for a symbol legend. Additional entries will be dropped.",
            "type": "number",
          },
          "symbolOffset": Object {
            "description": "Horizontal pixel offset for legend symbols.

__Default value:__ \`0\`.",
            "type": "number",
          },
          "symbolOpacity": Object {
            "description": "Opacity of the legend symbols.",
            "type": "number",
          },
          "symbolSize": Object {
            "description": "The size of the legend symbol, in pixels.

__Default value:__ \`100\`.",
            "minimum": 0,
            "type": "number",
          },
          "symbolStrokeColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Stroke color for legend symbols.",
          },
          "symbolStrokeWidth": Object {
            "description": "The width of the symbol's stroke.

__Default value:__ \`1.5\`.",
            "minimum": 0,
            "type": "number",
          },
          "symbolType": Object {
            "$ref": "#/definitions/SymbolShape",
            "description": "The symbol shape. One of the plotting shapes \`circle\` (default), \`square\`, \`cross\`, \`diamond\`, \`triangle-up\`, \`triangle-down\`, \`triangle-right\`, or \`triangle-left\`, the line symbol \`stroke\`, or one of the centered directional shapes \`arrow\`, \`wedge\`, or \`triangle\`. Alternatively, a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) can be provided. For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.

__Default value:__ \`\\"circle\\"\`.",
          },
          "tickCount": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/TimeInterval",
              },
            ],
            "description": "The desired number of tick values for quantitative legends.",
          },
          "title": Object {
            "description": "Set to null to disable title for the axis, legend, or header.",
            "type": "null",
          },
          "titleAlign": Object {
            "$ref": "#/definitions/Align",
            "description": "Horizontal text alignment for legend titles.

__Default value:__ \`\\"left\\"\`.",
          },
          "titleAnchor": Object {
            "$ref": "#/definitions/TitleAnchor",
            "description": "Text anchor position for placing legend titles.",
          },
          "titleBaseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "Vertical text baseline for legend titles.

__Default value:__ \`\\"top\\"\`.",
          },
          "titleColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "The color of the legend title, can be in hex color code or regular color name.",
          },
          "titleFont": Object {
            "description": "The font of the legend title.",
            "type": "string",
          },
          "titleFontSize": Object {
            "description": "The font size of the legend title.",
            "type": "number",
          },
          "titleFontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style of the legend title.",
          },
          "titleFontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "The font weight of the legend title.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "titleLimit": Object {
            "description": "Maximum allowed pixel width of legend titles.

__Default value:__ \`180\`.",
            "minimum": 0,
            "type": "number",
          },
          "titleLineHeight": Object {
            "description": "Line height in pixels for multi-line title text.",
            "type": "number",
          },
          "titleOpacity": Object {
            "description": "Opacity of the legend title.",
            "type": "number",
          },
          "titleOrient": Object {
            "$ref": "#/definitions/Orient",
            "description": "Orientation of the legend title.",
          },
          "titlePadding": Object {
            "description": "The padding, in pixels, between title and legend.

__Default value:__ \`5\`.",
            "type": "number",
          },
          "unselectedOpacity": Object {
            "description": "The opacity of unselected legend entries.

__Default value:__ 0.35.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "LegendLayout": Object {
        "additionalProperties": false,
        "properties": Object {
          "anchor": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/TitleAnchor",
              },
              Object {
                "$ref": "#/definitions/SignalRef",
              },
            ],
            "description": "The anchor point for legend orient group layout.",
          },
          "bottom": Object {
            "$ref": "#/definitions/BaseLegendLayout",
          },
          "bottom-left": Object {
            "$ref": "#/definitions/BaseLegendLayout",
          },
          "bottom-right": Object {
            "$ref": "#/definitions/BaseLegendLayout",
          },
          "bounds": Object {
            "$ref": "#/definitions/LayoutBounds",
            "description": "The bounds calculation to use for legend orient group layout.",
          },
          "center": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/SignalRef",
              },
            ],
            "description": "A flag to center legends within a shared orient group.",
          },
          "direction": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Orientation",
              },
              Object {
                "$ref": "#/definitions/SignalRef",
              },
            ],
            "description": "The layout direction for legend orient group layout.",
          },
          "left": Object {
            "$ref": "#/definitions/BaseLegendLayout",
          },
          "margin": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/SignalRef",
              },
            ],
            "description": "The pixel margin between legends within a orient group.",
          },
          "offset": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/SignalRef",
              },
            ],
            "description": "The pixel offset from the chart body for a legend orient group.",
          },
          "right": Object {
            "$ref": "#/definitions/BaseLegendLayout",
          },
          "top": Object {
            "$ref": "#/definitions/BaseLegendLayout",
          },
          "top-left": Object {
            "$ref": "#/definitions/BaseLegendLayout",
          },
          "top-right": Object {
            "$ref": "#/definitions/BaseLegendLayout",
          },
        },
        "type": "object",
      },
      "LegendOrient": Object {
        "enum": Array [
          "none",
          "left",
          "right",
          "top",
          "bottom",
          "top-left",
          "top-right",
          "bottom-left",
          "bottom-right",
        ],
        "type": "string",
      },
      "LegendResolveMap": Object {
        "additionalProperties": false,
        "properties": Object {
          "color": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "fill": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "fillOpacity": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "opacity": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "shape": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "size": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "stroke": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "strokeOpacity": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "strokeWidth": Object {
            "$ref": "#/definitions/ResolveMode",
          },
        },
        "type": "object",
      },
      "LegendStreamBinding": Object {
        "additionalProperties": false,
        "properties": Object {
          "legend": Object {
            "anyOf": Array [
              Object {
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/Stream",
              },
            ],
          },
        },
        "required": Array [
          "legend",
        ],
        "type": "object",
      },
      "LineConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "align": Object {
            "$ref": "#/definitions/Align",
            "description": "The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"left\\"\`, \`\\"right\\"\`, \`\\"center\\"\`.",
          },
          "angle": Object {
            "description": "The rotation angle of the text, in degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
          },
          "aspect": Object {
            "description": "Whether to keep aspect ratio of image marks.",
            "type": "boolean",
          },
          "baseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "The vertical alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`.

__Default value:__ \`\\"middle\\"\`",
          },
          "color": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
            ],
            "description": "Default color.

__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> \`\\"#4682b4\\"\`

__Note:__
- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
- The \`fill\` and \`stroke\` properties have higher precedence than \`color\` and will override \`color\`.",
          },
          "cornerRadius": Object {
            "description": "The radius in pixels of rounded rectangle corners.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomLeft": Object {
            "description": "The radius in pixels of rounded rectangle bottom left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomRight": Object {
            "description": "The radius in pixels of rounded rectangle bottom right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopLeft": Object {
            "description": "The radius in pixels of rounded rectangle top right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopRight": Object {
            "description": "The radius in pixels of rounded rectangle top left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cursor": Object {
            "$ref": "#/definitions/Cursor",
            "description": "The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.",
          },
          "dir": Object {
            "$ref": "#/definitions/Dir",
            "description": "The direction of the text. One of \`\\"ltr\\"\` (left-to-right) or \`\\"rtl\\"\` (right-to-left). This property determines on which side is truncated in response to the limit parameter.

__Default value:__ \`\\"ltr\\"\`",
          },
          "dx": Object {
            "description": "The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "dy": Object {
            "description": "The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "ellipsis": Object {
            "description": "The ellipsis string for text truncated in response to the limit parameter.

__Default value:__ \`\\"â€¦\\"\`",
            "type": "string",
          },
          "fill": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Fill Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "fillOpacity": Object {
            "description": "The fill opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "filled": Object {
            "description": "Whether the mark's color should be used as fill color instead of stroke color.

__Default value:__ \`false\` for all \`point\`, \`line\`, and \`rule\` marks as well as \`geoshape\` marks for [\`graticule\`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, \`true\`.

__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",
            "type": "boolean",
          },
          "font": Object {
            "description": "The typeface to set the text in (e.g., \`\\"Helvetica Neue\\"\`).",
            "type": "string",
          },
          "fontSize": Object {
            "description": "The font size, in pixels.",
            "type": "number",
          },
          "fontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style (e.g., \`\\"italic\\"\`).",
          },
          "fontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "The font weight.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "height": Object {
            "description": "Height of the marks.",
            "type": "number",
          },
          "href": Object {
            "description": "A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",
            "format": "uri",
            "type": "string",
          },
          "interpolate": Object {
            "$ref": "#/definitions/Interpolate",
            "description": "The line interpolation method to use for line and area marks. One of the following:
- \`\\"linear\\"\`: piecewise linear segments, as in a polyline.
- \`\\"linear-closed\\"\`: close the linear segments to form a polygon.
- \`\\"step\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"step-before\\"\`: alternate between vertical and horizontal segments, as in a step function.
- \`\\"step-after\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"basis\\"\`: a B-spline, with control point duplication on the ends.
- \`\\"basis-open\\"\`: an open B-spline; may not intersect the start or end.
- \`\\"basis-closed\\"\`: a closed B-spline, as in a loop.
- \`\\"cardinal\\"\`: a Cardinal spline, with control point duplication on the ends.
- \`\\"cardinal-open\\"\`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
- \`\\"cardinal-closed\\"\`: a closed Cardinal spline, as in a loop.
- \`\\"bundle\\"\`: equivalent to basis, except the tension parameter is used to straighten the spline.
- \`\\"monotone\\"\`: cubic interpolation that preserves monotonicity in y.",
          },
          "invalid": Object {
            "description": "Defines how Vega-Lite should handle marks for invalid values (\`null\` and \`NaN\`).
- If set to \`\\"filter\\"\` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
- If \`null\`, all data items are included. In this case, invalid values will be interpreted as zeroes.",
            "enum": Array [
              "filter",
              null,
            ],
            "type": Array [
              "string",
              "null",
            ],
          },
          "limit": Object {
            "description": "The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.

__Default value:__ \`0\`, indicating no limit",
            "type": "number",
          },
          "lineBreak": Object {
            "description": "A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property will be ignored if the text property is array-valued.",
            "type": "string",
          },
          "lineHeight": Object {
            "description": "The height, in pixels, of each line of text in a multi-line text mark.",
            "type": "number",
          },
          "opacity": Object {
            "description": "The overall opacity (value between [0,1]).

__Default value:__ \`0.7\` for non-aggregate plots with \`point\`, \`tick\`, \`circle\`, or \`square\` marks or layered \`bar\` charts and \`1\` otherwise.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "order": Object {
            "description": "For line and trail marks, this \`order\` property can be set to \`null\` or \`false\` to make the lines use the original order in the data sources.",
            "type": Array [
              "null",
              "boolean",
            ],
          },
          "orient": Object {
            "$ref": "#/definitions/Orientation",
            "description": "The orientation of a non-stacked bar, tick, area, and line charts.
The value is either horizontal (default) or vertical.
- For bar, rule and tick, this determines whether the size of the bar and tick
should be applied to x or y dimension.
- For area, this property determines the orient property of the Vega output.
- For line and trail marks, this property determines the sort order of the points in the line
if \`config.sortLineBy\` is not specified.
For stacked charts, this is always determined by the orientation of the stack;
therefore explicitly specified value will be ignored.",
          },
          "point": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/OverlayMarkDef",
              },
              Object {
                "enum": Array [
                  "transparent",
                ],
                "type": "string",
              },
            ],
            "description": "A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.

- If this property is \`\\"transparent\\"\`, transparent points will be used (for enhancing tooltips and selections).

- If this property is an empty object (\`{}\`) or \`true\`, filled points with default properties will be used.

- If this property is \`false\`, no points would be automatically added to line or area marks.

__Default value:__ \`false\`.",
          },
          "radius": Object {
            "description": "Polar coordinate radial offset, in pixels, of the text label from the origin determined by the \`x\` and \`y\` properties.",
            "minimum": 0,
            "type": "number",
          },
          "shape": Object {
            "description": "Shape of the point marks. Supported values include:
- plotting shapes: \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"cross\\"\`, \`\\"diamond\\"\`, \`\\"triangle-up\\"\`, \`\\"triangle-down\\"\`, \`\\"triangle-right\\"\`, or \`\\"triangle-left\\"\`.
- the line symbol \`\\"stroke\\"\`
- centered directional shapes \`\\"arrow\\"\`, \`\\"wedge\\"\`, or \`\\"triangle\\"\`
- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)

__Default value:__ \`\\"circle\\"\`",
            "type": "string",
          },
          "size": Object {
            "description": "Default size for marks.
- For \`point\`/\`circle\`/\`square\`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.
- For \`bar\`, this represents the band size of the bar, in pixels.
- For \`text\`, this represents the font size, in pixels.

__Default value:__
- \`30\` for point, circle, square marks; width/height's \`step\`
- \`2\` for bar marks with discrete dimensions;
- \`5\` for bar marks with continuous dimensions;
- \`11\` for text marks.",
            "minimum": 0,
            "type": "number",
          },
          "stroke": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Stroke Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "strokeCap": Object {
            "$ref": "#/definitions/StrokeCap",
            "description": "The stroke cap for line ending style. One of \`\\"butt\\"\`, \`\\"round\\"\`, or \`\\"square\\"\`.

__Default value:__ \`\\"square\\"\`",
          },
          "strokeDash": Object {
            "description": "An array of alternating stroke, space lengths for creating dashed or dotted lines.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "strokeDashOffset": Object {
            "description": "The offset (in pixels) into which to begin drawing with the stroke dash array.",
            "type": "number",
          },
          "strokeJoin": Object {
            "$ref": "#/definitions/StrokeJoin",
            "description": "The stroke line join method. One of \`\\"miter\\"\`, \`\\"round\\"\` or \`\\"bevel\\"\`.

__Default value:__ \`\\"miter\\"\`",
          },
          "strokeMiterLimit": Object {
            "description": "The miter limit at which to bevel a line join.",
            "type": "number",
          },
          "strokeOpacity": Object {
            "description": "The stroke opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "strokeWidth": Object {
            "description": "The stroke width, in pixels.",
            "minimum": 0,
            "type": "number",
          },
          "tension": Object {
            "description": "Depending on the interpolation type, sets the tension parameter (for line and area marks).",
            "type": "number",
          },
          "text": Object {
            "$ref": "#/definitions/Text",
            "description": "Placeholder text if the \`text\` channel is not specified",
          },
          "theta": Object {
            "description": "Polar coordinate angle, in radians, of the text label from the origin determined by the \`x\` and \`y\` properties. Values for \`theta\` follow the same convention of \`arc\` mark \`startAngle\` and \`endAngle\` properties: angles are measured in radians, with \`0\` indicating \\"north\\".",
            "type": "number",
          },
          "timeUnitBand": Object {
            "description": "Default relative band size for a time unit. If set to \`1\`, the bandwidth of the marks will be equal to the time unit band step.
If set to \`0.5\`, bandwidth of the marks will be half of the time unit band step.",
            "type": "number",
          },
          "timeUnitBandPosition": Object {
            "description": "Default relative band position for a time unit. If set to \`0\`, the marks will be positioned at the beginning of the time unit band step.
If set to \`0.5\`, the marks will be positioned in the middle of the time unit band step.",
            "type": "number",
          },
          "tooltip": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Value",
              },
              Object {
                "$ref": "#/definitions/TooltipContent",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.

- If \`tooltip\` is \`true\` or \`{\\"content\\": \\"encoding\\"}\`, then all fields from \`encoding\` will be used.
- If \`tooltip\` is \`{\\"content\\": \\"data\\"}\`, then all fields that appear in the highlighted data point will be used.
- If set to \`null\` or \`false\`, then no tooltip will be used.

See the [\`tooltip\`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.

__Default value:__ \`null\`",
          },
          "width": Object {
            "description": "Width of the marks.",
            "type": "number",
          },
          "x": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X coordinates of the marks, or width of horizontal \`\\"bar\\"\` and \`\\"area\\"\` without specified \`x2\` or \`width\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "x2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "y": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y coordinates of the marks, or height of vertical \`\\"bar\\"\` and \`\\"area\\"\` without specified \`y2\` or \`height\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "y2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
        },
        "type": "object",
      },
      "LinearGradient": Object {
        "additionalProperties": false,
        "properties": Object {
          "gradient": Object {
            "description": "The type of gradient. Use \`\\"linear\\"\` for a linear gradient.",
            "enum": Array [
              "linear",
            ],
            "type": "string",
          },
          "id": Object {
            "type": "string",
          },
          "stops": Object {
            "description": "An array of gradient stops defining the gradient color sequence.",
            "items": Object {
              "$ref": "#/definitions/GradientStop",
            },
            "type": "array",
          },
          "x1": Object {
            "description": "The starting x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.

__Default value:__ \`0\`",
            "type": "number",
          },
          "x2": Object {
            "description": "The ending x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.

__Default value:__ \`1\`",
            "type": "number",
          },
          "y1": Object {
            "description": "The starting y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.

__Default value:__ \`0\`",
            "type": "number",
          },
          "y2": Object {
            "description": "The ending y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.

__Default value:__ \`0\`",
            "type": "number",
          },
        },
        "required": Array [
          "gradient",
          "stops",
        ],
        "type": "object",
      },
      "LocalMultiTimeUnit": Object {
        "enum": Array [
          "yearquarter",
          "yearquartermonth",
          "yearmonth",
          "yearmonthdate",
          "yearmonthdatehours",
          "yearmonthdatehoursminutes",
          "yearmonthdatehoursminutesseconds",
          "quartermonth",
          "monthdate",
          "monthdatehours",
          "hoursminutes",
          "hoursminutesseconds",
          "minutesseconds",
          "secondsmilliseconds",
        ],
        "type": "string",
      },
      "LocalSingleTimeUnit": Object {
        "enum": Array [
          "year",
          "quarter",
          "month",
          "day",
          "date",
          "hours",
          "minutes",
          "seconds",
          "milliseconds",
        ],
        "type": "string",
      },
      "LoessTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "description": "The output field names for the smoothed points generated by the loess transform.

__Default value:__ The field names of the input x and y values.",
            "items": Array [
              Object {
                "$ref": "#/definitions/FieldName",
              },
              Object {
                "$ref": "#/definitions/FieldName",
              },
            ],
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "bandwidth": Object {
            "description": "A bandwidth parameter in the range \`[0, 1]\` that determines the amount of smoothing.

__Default value:__ \`0.3\`",
            "type": "number",
          },
          "groupby": Object {
            "description": "The data fields to group by. If not specified, a single group containing all data objects will be used.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "loess": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field of the dependent variable to smooth.",
          },
          "on": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field of the independent variable to use a predictor.",
          },
        },
        "required": Array [
          "loess",
          "on",
        ],
        "type": "object",
      },
      "LogicalAnd<Predicate>": Object {
        "additionalProperties": false,
        "properties": Object {
          "and": Object {
            "items": Object {
              "$ref": "#/definitions/LogicalOperand<Predicate>",
            },
            "type": "array",
          },
        },
        "required": Array [
          "and",
        ],
        "type": "object",
      },
      "LogicalNot<Predicate>": Object {
        "additionalProperties": false,
        "properties": Object {
          "not": Object {
            "$ref": "#/definitions/LogicalOperand<Predicate>",
          },
        },
        "required": Array [
          "not",
        ],
        "type": "object",
      },
      "LogicalOperand<Predicate>": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/LogicalNot<Predicate>",
          },
          Object {
            "$ref": "#/definitions/LogicalAnd<Predicate>",
          },
          Object {
            "$ref": "#/definitions/LogicalOr<Predicate>",
          },
          Object {
            "$ref": "#/definitions/Predicate",
          },
        ],
      },
      "LogicalOr<Predicate>": Object {
        "additionalProperties": false,
        "properties": Object {
          "or": Object {
            "items": Object {
              "$ref": "#/definitions/LogicalOperand<Predicate>",
            },
            "type": "array",
          },
        },
        "required": Array [
          "or",
        ],
        "type": "object",
      },
      "LookupData": Object {
        "additionalProperties": false,
        "properties": Object {
          "data": Object {
            "$ref": "#/definitions/Data",
            "description": "Secondary data source to lookup in.",
          },
          "fields": Object {
            "description": "Fields in foreign data or selection to lookup.
If not specified, the entire object is queried.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "key": Object {
            "$ref": "#/definitions/FieldName",
            "description": "Key in data to lookup.",
          },
        },
        "required": Array [
          "data",
          "key",
        ],
        "type": "object",
      },
      "LookupSelection": Object {
        "additionalProperties": false,
        "properties": Object {
          "fields": Object {
            "description": "Fields in foreign data or selection to lookup.
If not specified, the entire object is queried.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "key": Object {
            "$ref": "#/definitions/FieldName",
            "description": "Key in data to lookup.",
          },
          "selection": Object {
            "description": "Selection name to look up.",
            "type": "string",
          },
        },
        "required": Array [
          "key",
          "selection",
        ],
        "type": "object",
      },
      "LookupTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FieldName",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/FieldName",
                },
                "type": "array",
              },
            ],
            "description": "The output fields on which to store the looked up data values.

For data lookups, this property may be left blank if \`from.fields\`
has been specified (those field names will be used); if \`from.fields\`
has not been specified, \`as\` must be a string.

For selection lookups, this property is optional: if unspecified,
looked up values will be stored under a property named for the selection;
and if specified, it must correspond to \`from.fields\`.",
          },
          "default": Object {
            "description": "The default value to use if lookup fails.

__Default value:__ \`null\`",
            "type": "string",
          },
          "from": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LookupData",
              },
              Object {
                "$ref": "#/definitions/LookupSelection",
              },
            ],
            "description": "Data source or selection for secondary data reference.",
          },
          "lookup": Object {
            "description": "Key in primary data source.",
            "type": "string",
          },
        },
        "required": Array [
          "lookup",
          "from",
        ],
        "type": "object",
      },
      "Mark": Object {
        "description": "All types of primitive marks.",
        "enum": Array [
          "area",
          "bar",
          "line",
          "image",
          "trail",
          "point",
          "text",
          "tick",
          "rect",
          "rule",
          "circle",
          "square",
          "geoshape",
        ],
        "type": "string",
      },
      "MarkConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "align": Object {
            "$ref": "#/definitions/Align",
            "description": "The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"left\\"\`, \`\\"right\\"\`, \`\\"center\\"\`.",
          },
          "angle": Object {
            "description": "The rotation angle of the text, in degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
          },
          "aspect": Object {
            "description": "Whether to keep aspect ratio of image marks.",
            "type": "boolean",
          },
          "baseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "The vertical alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`.

__Default value:__ \`\\"middle\\"\`",
          },
          "color": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
            ],
            "description": "Default color.

__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> \`\\"#4682b4\\"\`

__Note:__
- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
- The \`fill\` and \`stroke\` properties have higher precedence than \`color\` and will override \`color\`.",
          },
          "cornerRadius": Object {
            "description": "The radius in pixels of rounded rectangle corners.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomLeft": Object {
            "description": "The radius in pixels of rounded rectangle bottom left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomRight": Object {
            "description": "The radius in pixels of rounded rectangle bottom right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopLeft": Object {
            "description": "The radius in pixels of rounded rectangle top right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopRight": Object {
            "description": "The radius in pixels of rounded rectangle top left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cursor": Object {
            "$ref": "#/definitions/Cursor",
            "description": "The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.",
          },
          "dir": Object {
            "$ref": "#/definitions/Dir",
            "description": "The direction of the text. One of \`\\"ltr\\"\` (left-to-right) or \`\\"rtl\\"\` (right-to-left). This property determines on which side is truncated in response to the limit parameter.

__Default value:__ \`\\"ltr\\"\`",
          },
          "dx": Object {
            "description": "The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "dy": Object {
            "description": "The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "ellipsis": Object {
            "description": "The ellipsis string for text truncated in response to the limit parameter.

__Default value:__ \`\\"â€¦\\"\`",
            "type": "string",
          },
          "fill": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Fill Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "fillOpacity": Object {
            "description": "The fill opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "filled": Object {
            "description": "Whether the mark's color should be used as fill color instead of stroke color.

__Default value:__ \`false\` for all \`point\`, \`line\`, and \`rule\` marks as well as \`geoshape\` marks for [\`graticule\`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, \`true\`.

__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",
            "type": "boolean",
          },
          "font": Object {
            "description": "The typeface to set the text in (e.g., \`\\"Helvetica Neue\\"\`).",
            "type": "string",
          },
          "fontSize": Object {
            "description": "The font size, in pixels.",
            "type": "number",
          },
          "fontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style (e.g., \`\\"italic\\"\`).",
          },
          "fontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "The font weight.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "height": Object {
            "description": "Height of the marks.",
            "type": "number",
          },
          "href": Object {
            "description": "A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",
            "format": "uri",
            "type": "string",
          },
          "interpolate": Object {
            "$ref": "#/definitions/Interpolate",
            "description": "The line interpolation method to use for line and area marks. One of the following:
- \`\\"linear\\"\`: piecewise linear segments, as in a polyline.
- \`\\"linear-closed\\"\`: close the linear segments to form a polygon.
- \`\\"step\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"step-before\\"\`: alternate between vertical and horizontal segments, as in a step function.
- \`\\"step-after\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"basis\\"\`: a B-spline, with control point duplication on the ends.
- \`\\"basis-open\\"\`: an open B-spline; may not intersect the start or end.
- \`\\"basis-closed\\"\`: a closed B-spline, as in a loop.
- \`\\"cardinal\\"\`: a Cardinal spline, with control point duplication on the ends.
- \`\\"cardinal-open\\"\`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
- \`\\"cardinal-closed\\"\`: a closed Cardinal spline, as in a loop.
- \`\\"bundle\\"\`: equivalent to basis, except the tension parameter is used to straighten the spline.
- \`\\"monotone\\"\`: cubic interpolation that preserves monotonicity in y.",
          },
          "invalid": Object {
            "description": "Defines how Vega-Lite should handle marks for invalid values (\`null\` and \`NaN\`).
- If set to \`\\"filter\\"\` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
- If \`null\`, all data items are included. In this case, invalid values will be interpreted as zeroes.",
            "enum": Array [
              "filter",
              null,
            ],
            "type": Array [
              "string",
              "null",
            ],
          },
          "limit": Object {
            "description": "The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.

__Default value:__ \`0\`, indicating no limit",
            "type": "number",
          },
          "lineBreak": Object {
            "description": "A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property will be ignored if the text property is array-valued.",
            "type": "string",
          },
          "lineHeight": Object {
            "description": "The height, in pixels, of each line of text in a multi-line text mark.",
            "type": "number",
          },
          "opacity": Object {
            "description": "The overall opacity (value between [0,1]).

__Default value:__ \`0.7\` for non-aggregate plots with \`point\`, \`tick\`, \`circle\`, or \`square\` marks or layered \`bar\` charts and \`1\` otherwise.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "order": Object {
            "description": "For line and trail marks, this \`order\` property can be set to \`null\` or \`false\` to make the lines use the original order in the data sources.",
            "type": Array [
              "null",
              "boolean",
            ],
          },
          "orient": Object {
            "$ref": "#/definitions/Orientation",
            "description": "The orientation of a non-stacked bar, tick, area, and line charts.
The value is either horizontal (default) or vertical.
- For bar, rule and tick, this determines whether the size of the bar and tick
should be applied to x or y dimension.
- For area, this property determines the orient property of the Vega output.
- For line and trail marks, this property determines the sort order of the points in the line
if \`config.sortLineBy\` is not specified.
For stacked charts, this is always determined by the orientation of the stack;
therefore explicitly specified value will be ignored.",
          },
          "radius": Object {
            "description": "Polar coordinate radial offset, in pixels, of the text label from the origin determined by the \`x\` and \`y\` properties.",
            "minimum": 0,
            "type": "number",
          },
          "shape": Object {
            "description": "Shape of the point marks. Supported values include:
- plotting shapes: \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"cross\\"\`, \`\\"diamond\\"\`, \`\\"triangle-up\\"\`, \`\\"triangle-down\\"\`, \`\\"triangle-right\\"\`, or \`\\"triangle-left\\"\`.
- the line symbol \`\\"stroke\\"\`
- centered directional shapes \`\\"arrow\\"\`, \`\\"wedge\\"\`, or \`\\"triangle\\"\`
- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)

__Default value:__ \`\\"circle\\"\`",
            "type": "string",
          },
          "size": Object {
            "description": "Default size for marks.
- For \`point\`/\`circle\`/\`square\`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.
- For \`bar\`, this represents the band size of the bar, in pixels.
- For \`text\`, this represents the font size, in pixels.

__Default value:__
- \`30\` for point, circle, square marks; width/height's \`step\`
- \`2\` for bar marks with discrete dimensions;
- \`5\` for bar marks with continuous dimensions;
- \`11\` for text marks.",
            "minimum": 0,
            "type": "number",
          },
          "stroke": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Stroke Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "strokeCap": Object {
            "$ref": "#/definitions/StrokeCap",
            "description": "The stroke cap for line ending style. One of \`\\"butt\\"\`, \`\\"round\\"\`, or \`\\"square\\"\`.

__Default value:__ \`\\"square\\"\`",
          },
          "strokeDash": Object {
            "description": "An array of alternating stroke, space lengths for creating dashed or dotted lines.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "strokeDashOffset": Object {
            "description": "The offset (in pixels) into which to begin drawing with the stroke dash array.",
            "type": "number",
          },
          "strokeJoin": Object {
            "$ref": "#/definitions/StrokeJoin",
            "description": "The stroke line join method. One of \`\\"miter\\"\`, \`\\"round\\"\` or \`\\"bevel\\"\`.

__Default value:__ \`\\"miter\\"\`",
          },
          "strokeMiterLimit": Object {
            "description": "The miter limit at which to bevel a line join.",
            "type": "number",
          },
          "strokeOpacity": Object {
            "description": "The stroke opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "strokeWidth": Object {
            "description": "The stroke width, in pixels.",
            "minimum": 0,
            "type": "number",
          },
          "tension": Object {
            "description": "Depending on the interpolation type, sets the tension parameter (for line and area marks).",
            "type": "number",
          },
          "text": Object {
            "$ref": "#/definitions/Text",
            "description": "Placeholder text if the \`text\` channel is not specified",
          },
          "theta": Object {
            "description": "Polar coordinate angle, in radians, of the text label from the origin determined by the \`x\` and \`y\` properties. Values for \`theta\` follow the same convention of \`arc\` mark \`startAngle\` and \`endAngle\` properties: angles are measured in radians, with \`0\` indicating \\"north\\".",
            "type": "number",
          },
          "timeUnitBand": Object {
            "description": "Default relative band size for a time unit. If set to \`1\`, the bandwidth of the marks will be equal to the time unit band step.
If set to \`0.5\`, bandwidth of the marks will be half of the time unit band step.",
            "type": "number",
          },
          "timeUnitBandPosition": Object {
            "description": "Default relative band position for a time unit. If set to \`0\`, the marks will be positioned at the beginning of the time unit band step.
If set to \`0.5\`, the marks will be positioned in the middle of the time unit band step.",
            "type": "number",
          },
          "tooltip": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Value",
              },
              Object {
                "$ref": "#/definitions/TooltipContent",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.

- If \`tooltip\` is \`true\` or \`{\\"content\\": \\"encoding\\"}\`, then all fields from \`encoding\` will be used.
- If \`tooltip\` is \`{\\"content\\": \\"data\\"}\`, then all fields that appear in the highlighted data point will be used.
- If set to \`null\` or \`false\`, then no tooltip will be used.

See the [\`tooltip\`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.

__Default value:__ \`null\`",
          },
          "width": Object {
            "description": "Width of the marks.",
            "type": "number",
          },
          "x": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X coordinates of the marks, or width of horizontal \`\\"bar\\"\` and \`\\"area\\"\` without specified \`x2\` or \`width\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "x2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "y": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y coordinates of the marks, or height of vertical \`\\"bar\\"\` and \`\\"area\\"\` without specified \`y2\` or \`height\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "y2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
        },
        "type": "object",
      },
      "MarkDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "align": Object {
            "$ref": "#/definitions/Align",
            "description": "The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"left\\"\`, \`\\"right\\"\`, \`\\"center\\"\`.",
          },
          "angle": Object {
            "description": "The rotation angle of the text, in degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
          },
          "aspect": Object {
            "description": "Whether to keep aspect ratio of image marks.",
            "type": "boolean",
          },
          "baseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "The vertical alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`.

__Default value:__ \`\\"middle\\"\`",
          },
          "binSpacing": Object {
            "description": "Offset between bars for binned field. The ideal value for this is either 0 (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).

__Default value:__ \`1\`",
            "minimum": 0,
            "type": "number",
          },
          "clip": Object {
            "description": "Whether a mark be clipped to the enclosing groupâ€™s width and height.",
            "type": "boolean",
          },
          "color": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
            ],
            "description": "Default color.

__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> \`\\"#4682b4\\"\`

__Note:__
- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
- The \`fill\` and \`stroke\` properties have higher precedence than \`color\` and will override \`color\`.",
          },
          "cornerRadius": Object {
            "description": "The radius in pixels of rounded rectangle corners.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomLeft": Object {
            "description": "The radius in pixels of rounded rectangle bottom left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomRight": Object {
            "description": "The radius in pixels of rounded rectangle bottom right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopLeft": Object {
            "description": "The radius in pixels of rounded rectangle top right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopRight": Object {
            "description": "The radius in pixels of rounded rectangle top left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cursor": Object {
            "$ref": "#/definitions/Cursor",
            "description": "The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.",
          },
          "dir": Object {
            "$ref": "#/definitions/Dir",
            "description": "The direction of the text. One of \`\\"ltr\\"\` (left-to-right) or \`\\"rtl\\"\` (right-to-left). This property determines on which side is truncated in response to the limit parameter.

__Default value:__ \`\\"ltr\\"\`",
          },
          "dx": Object {
            "description": "The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "dy": Object {
            "description": "The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "ellipsis": Object {
            "description": "The ellipsis string for text truncated in response to the limit parameter.

__Default value:__ \`\\"â€¦\\"\`",
            "type": "string",
          },
          "fill": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Fill Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "fillOpacity": Object {
            "description": "The fill opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "filled": Object {
            "description": "Whether the mark's color should be used as fill color instead of stroke color.

__Default value:__ \`false\` for all \`point\`, \`line\`, and \`rule\` marks as well as \`geoshape\` marks for [\`graticule\`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, \`true\`.

__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",
            "type": "boolean",
          },
          "font": Object {
            "description": "The typeface to set the text in (e.g., \`\\"Helvetica Neue\\"\`).",
            "type": "string",
          },
          "fontSize": Object {
            "description": "The font size, in pixels.",
            "type": "number",
          },
          "fontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style (e.g., \`\\"italic\\"\`).",
          },
          "fontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "The font weight.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "height": Object {
            "description": "Height of the marks.",
            "type": "number",
          },
          "href": Object {
            "description": "A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",
            "format": "uri",
            "type": "string",
          },
          "interpolate": Object {
            "$ref": "#/definitions/Interpolate",
            "description": "The line interpolation method to use for line and area marks. One of the following:
- \`\\"linear\\"\`: piecewise linear segments, as in a polyline.
- \`\\"linear-closed\\"\`: close the linear segments to form a polygon.
- \`\\"step\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"step-before\\"\`: alternate between vertical and horizontal segments, as in a step function.
- \`\\"step-after\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"basis\\"\`: a B-spline, with control point duplication on the ends.
- \`\\"basis-open\\"\`: an open B-spline; may not intersect the start or end.
- \`\\"basis-closed\\"\`: a closed B-spline, as in a loop.
- \`\\"cardinal\\"\`: a Cardinal spline, with control point duplication on the ends.
- \`\\"cardinal-open\\"\`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
- \`\\"cardinal-closed\\"\`: a closed Cardinal spline, as in a loop.
- \`\\"bundle\\"\`: equivalent to basis, except the tension parameter is used to straighten the spline.
- \`\\"monotone\\"\`: cubic interpolation that preserves monotonicity in y.",
          },
          "invalid": Object {
            "description": "Defines how Vega-Lite should handle marks for invalid values (\`null\` and \`NaN\`).
- If set to \`\\"filter\\"\` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
- If \`null\`, all data items are included. In this case, invalid values will be interpreted as zeroes.",
            "enum": Array [
              "filter",
              null,
            ],
            "type": Array [
              "string",
              "null",
            ],
          },
          "limit": Object {
            "description": "The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.

__Default value:__ \`0\`, indicating no limit",
            "type": "number",
          },
          "line": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/OverlayMarkDef",
              },
            ],
            "description": "A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.

- If this value is an empty object (\`{}\`) or \`true\`, lines with default properties will be used.

- If this value is \`false\`, no lines would be automatically added to area marks.

__Default value:__ \`false\`.",
          },
          "lineBreak": Object {
            "description": "A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property will be ignored if the text property is array-valued.",
            "type": "string",
          },
          "lineHeight": Object {
            "description": "The height, in pixels, of each line of text in a multi-line text mark.",
            "type": "number",
          },
          "opacity": Object {
            "description": "The overall opacity (value between [0,1]).

__Default value:__ \`0.7\` for non-aggregate plots with \`point\`, \`tick\`, \`circle\`, or \`square\` marks or layered \`bar\` charts and \`1\` otherwise.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "order": Object {
            "description": "For line and trail marks, this \`order\` property can be set to \`null\` or \`false\` to make the lines use the original order in the data sources.",
            "type": Array [
              "null",
              "boolean",
            ],
          },
          "orient": Object {
            "$ref": "#/definitions/Orientation",
            "description": "The orientation of a non-stacked bar, tick, area, and line charts.
The value is either horizontal (default) or vertical.
- For bar, rule and tick, this determines whether the size of the bar and tick
should be applied to x or y dimension.
- For area, this property determines the orient property of the Vega output.
- For line and trail marks, this property determines the sort order of the points in the line
if \`config.sortLineBy\` is not specified.
For stacked charts, this is always determined by the orientation of the stack;
therefore explicitly specified value will be ignored.",
          },
          "point": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/OverlayMarkDef",
              },
              Object {
                "enum": Array [
                  "transparent",
                ],
                "type": "string",
              },
            ],
            "description": "A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.

- If this property is \`\\"transparent\\"\`, transparent points will be used (for enhancing tooltips and selections).

- If this property is an empty object (\`{}\`) or \`true\`, filled points with default properties will be used.

- If this property is \`false\`, no points would be automatically added to line or area marks.

__Default value:__ \`false\`.",
          },
          "radius": Object {
            "description": "Polar coordinate radial offset, in pixels, of the text label from the origin determined by the \`x\` and \`y\` properties.",
            "minimum": 0,
            "type": "number",
          },
          "shape": Object {
            "description": "Shape of the point marks. Supported values include:
- plotting shapes: \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"cross\\"\`, \`\\"diamond\\"\`, \`\\"triangle-up\\"\`, \`\\"triangle-down\\"\`, \`\\"triangle-right\\"\`, or \`\\"triangle-left\\"\`.
- the line symbol \`\\"stroke\\"\`
- centered directional shapes \`\\"arrow\\"\`, \`\\"wedge\\"\`, or \`\\"triangle\\"\`
- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)

__Default value:__ \`\\"circle\\"\`",
            "type": "string",
          },
          "size": Object {
            "description": "Default size for marks.
- For \`point\`/\`circle\`/\`square\`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.
- For \`bar\`, this represents the band size of the bar, in pixels.
- For \`text\`, this represents the font size, in pixels.

__Default value:__
- \`30\` for point, circle, square marks; width/height's \`step\`
- \`2\` for bar marks with discrete dimensions;
- \`5\` for bar marks with continuous dimensions;
- \`11\` for text marks.",
            "minimum": 0,
            "type": "number",
          },
          "stroke": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Stroke Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "strokeCap": Object {
            "$ref": "#/definitions/StrokeCap",
            "description": "The stroke cap for line ending style. One of \`\\"butt\\"\`, \`\\"round\\"\`, or \`\\"square\\"\`.

__Default value:__ \`\\"square\\"\`",
          },
          "strokeDash": Object {
            "description": "An array of alternating stroke, space lengths for creating dashed or dotted lines.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "strokeDashOffset": Object {
            "description": "The offset (in pixels) into which to begin drawing with the stroke dash array.",
            "type": "number",
          },
          "strokeJoin": Object {
            "$ref": "#/definitions/StrokeJoin",
            "description": "The stroke line join method. One of \`\\"miter\\"\`, \`\\"round\\"\` or \`\\"bevel\\"\`.

__Default value:__ \`\\"miter\\"\`",
          },
          "strokeMiterLimit": Object {
            "description": "The miter limit at which to bevel a line join.",
            "type": "number",
          },
          "strokeOpacity": Object {
            "description": "The stroke opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "strokeWidth": Object {
            "description": "The stroke width, in pixels.",
            "minimum": 0,
            "type": "number",
          },
          "style": Object {
            "anyOf": Array [
              Object {
                "type": "string",
              },
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
            ],
            "description": "A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly defined within the \`encoding\` will override a style default.

__Default value:__ The mark's name. For example, a bar mark will have style \`\\"bar\\"\` by default.
__Note:__ Any specified style will augment the default style. For example, a bar mark with \`\\"style\\": \\"foo\\"\` will receive from \`config.style.bar\` and \`config.style.foo\` (the specified style \`\\"foo\\"\` has higher precedence).",
          },
          "tension": Object {
            "description": "Depending on the interpolation type, sets the tension parameter (for line and area marks).",
            "type": "number",
          },
          "text": Object {
            "$ref": "#/definitions/Text",
            "description": "Placeholder text if the \`text\` channel is not specified",
          },
          "theta": Object {
            "description": "Polar coordinate angle, in radians, of the text label from the origin determined by the \`x\` and \`y\` properties. Values for \`theta\` follow the same convention of \`arc\` mark \`startAngle\` and \`endAngle\` properties: angles are measured in radians, with \`0\` indicating \\"north\\".",
            "type": "number",
          },
          "thickness": Object {
            "description": "Thickness of the tick mark.

__Default value:__  \`1\`",
            "minimum": 0,
            "type": "number",
          },
          "timeUnitBand": Object {
            "description": "Default relative band size for a time unit. If set to \`1\`, the bandwidth of the marks will be equal to the time unit band step.
If set to \`0.5\`, bandwidth of the marks will be half of the time unit band step.",
            "type": "number",
          },
          "timeUnitBandPosition": Object {
            "description": "Default relative band position for a time unit. If set to \`0\`, the marks will be positioned at the beginning of the time unit band step.
If set to \`0.5\`, the marks will be positioned in the middle of the time unit band step.",
            "type": "number",
          },
          "tooltip": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Value",
              },
              Object {
                "$ref": "#/definitions/TooltipContent",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.

- If \`tooltip\` is \`true\` or \`{\\"content\\": \\"encoding\\"}\`, then all fields from \`encoding\` will be used.
- If \`tooltip\` is \`{\\"content\\": \\"data\\"}\`, then all fields that appear in the highlighted data point will be used.
- If set to \`null\` or \`false\`, then no tooltip will be used.

See the [\`tooltip\`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.

__Default value:__ \`null\`",
          },
          "type": Object {
            "$ref": "#/definitions/Mark",
            "description": "The mark type. This could a primitive mark type
(one of \`\\"bar\\"\`, \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"tick\\"\`, \`\\"line\\"\`,
\`\\"area\\"\`, \`\\"point\\"\`, \`\\"geoshape\\"\`, \`\\"rule\\"\`, and \`\\"text\\"\`)
or a composite mark type (\`\\"boxplot\\"\`, \`\\"errorband\\"\`, \`\\"errorbar\\"\`).",
          },
          "width": Object {
            "description": "Width of the marks.",
            "type": "number",
          },
          "x": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X coordinates of the marks, or width of horizontal \`\\"bar\\"\` and \`\\"area\\"\` without specified \`x2\` or \`width\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "x2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "x2Offset": Object {
            "description": "Offset for x2-position.",
            "type": "number",
          },
          "xOffset": Object {
            "description": "Offset for x-position.",
            "type": "number",
          },
          "y": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y coordinates of the marks, or height of vertical \`\\"bar\\"\` and \`\\"area\\"\` without specified \`y2\` or \`height\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "y2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "y2Offset": Object {
            "description": "Offset for y2-position.",
            "type": "number",
          },
          "yOffset": Object {
            "description": "Offset for y-position.",
            "type": "number",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "MarkType": Object {
        "enum": Array [
          "arc",
          "area",
          "image",
          "group",
          "line",
          "path",
          "rect",
          "rule",
          "shape",
          "symbol",
          "text",
          "trail",
        ],
        "type": "string",
      },
      "MergedStream": Object {
        "additionalProperties": false,
        "properties": Object {
          "between": Object {
            "items": Object {
              "$ref": "#/definitions/Stream",
            },
            "type": "array",
          },
          "consume": Object {
            "type": "boolean",
          },
          "debounce": Object {
            "type": "number",
          },
          "filter": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Expr",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/Expr",
                },
                "type": "array",
              },
            ],
          },
          "markname": Object {
            "type": "string",
          },
          "marktype": Object {
            "$ref": "#/definitions/MarkType",
          },
          "merge": Object {
            "items": Object {
              "$ref": "#/definitions/Stream",
            },
            "type": "array",
          },
          "throttle": Object {
            "type": "number",
          },
        },
        "required": Array [
          "merge",
        ],
        "type": "object",
      },
      "Month": Object {
        "maximum": 12,
        "minimum": 1,
        "type": "number",
      },
      "MultiSelection": Object {
        "additionalProperties": false,
        "properties": Object {
          "bind": Object {
            "$ref": "#/definitions/LegendBinding",
            "description": "When set, a selection is populated by interacting with the corresponding legend. Direct manipulation interaction is disabled by default;
to re-enable it, set the selection's [\`on\`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties) property.

Legend bindings are restricted to selections that only specify a single field or encoding.",
          },
          "clear": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Stream",
              },
              Object {
                "type": "string",
              },
              Object {
                "type": "boolean",
              },
            ],
            "description": "Clears the selection, emptying it of all values. Can be a
[Event Stream](https://vega.github.io/vega/docs/event-streams/) or \`false\` to disable.

__Default value:__ \`dblclick\`.

__See also:__ [\`clear\`](https://vega.github.io/vega-lite/docs/clear.html) documentation.",
          },
          "empty": Object {
            "description": "By default, \`all\` data values are considered to lie within an empty selection.
When set to \`none\`, empty selections contain no data values.",
            "enum": Array [
              "all",
              "none",
            ],
            "type": "string",
          },
          "encodings": Object {
            "description": "An array of encoding channels. The corresponding data field values
must match for a data tuple to fall within the selection.

__See also:__ [\`encodings\`](https://vega.github.io/vega-lite/docs/project.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/SingleDefUnitChannel",
            },
            "type": "array",
          },
          "fields": Object {
            "description": "An array of field names whose values must match for a data tuple to
fall within the selection.

__See also:__ [\`fields\`](https://vega.github.io/vega-lite/docs/project.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "init": Object {
            "description": "Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and an initial
value (or array of values).

__See also:__ [\`init\`](https://vega.github.io/vega-lite/docs/init.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/SelectionInitMapping",
            },
            "type": "array",
          },
          "nearest": Object {
            "description": "When true, an invisible voronoi diagram is computed to accelerate discrete
selection. The data value _nearest_ the mouse cursor is added to the selection.

__See also:__ [\`nearest\`](https://vega.github.io/vega-lite/docs/nearest.html) documentation.",
            "type": "boolean",
          },
          "on": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Stream",
              },
              Object {
                "type": "string",
              },
            ],
            "description": "A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.
For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).",
          },
          "resolve": Object {
            "$ref": "#/definitions/SelectionResolution",
            "description": "With layered and multi-view displays, a strategy that determines how
selections' data queries are resolved when applied in a filter transform,
conditional encoding rule, or scale domain.

__See also:__ [\`resolve\`](https://vega.github.io/vega-lite/docs/selection-resolve.html) documentation.",
          },
          "toggle": Object {
            "description": "Controls whether data values should be toggled or only ever inserted into
multi selections. Can be \`true\`, \`false\` (for insertion only), or a
[Vega expression](https://vega.github.io/vega/docs/expressions/).

__Default value:__ \`true\`, which corresponds to \`event.shiftKey\` (i.e.,
data values are toggled when a user interacts with the shift-key pressed).

__See also:__ [\`toggle\`](https://vega.github.io/vega-lite/docs/toggle.html) documentation.",
            "type": Array [
              "string",
              "boolean",
            ],
          },
          "type": Object {
            "description": "Determines the default event processing and data query for the selection. Vega-Lite currently supports three selection types:

- \`\\"single\\"\` -- to select a single discrete data value on \`click\`.
- \`\\"multi\\"\` -- to select multiple discrete data value; the first value is selected on \`click\` and additional values toggled on shift-\`click\`.
- \`\\"interval\\"\` -- to select a continuous range of data values on \`drag\`.",
            "enum": Array [
              "multi",
            ],
            "type": "string",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "MultiSelectionConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "bind": Object {
            "$ref": "#/definitions/LegendBinding",
            "description": "When set, a selection is populated by interacting with the corresponding legend. Direct manipulation interaction is disabled by default;
to re-enable it, set the selection's [\`on\`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties) property.

Legend bindings are restricted to selections that only specify a single field or encoding.",
          },
          "clear": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Stream",
              },
              Object {
                "type": "string",
              },
              Object {
                "type": "boolean",
              },
            ],
            "description": "Clears the selection, emptying it of all values. Can be a
[Event Stream](https://vega.github.io/vega/docs/event-streams/) or \`false\` to disable.

__Default value:__ \`dblclick\`.

__See also:__ [\`clear\`](https://vega.github.io/vega-lite/docs/clear.html) documentation.",
          },
          "empty": Object {
            "description": "By default, \`all\` data values are considered to lie within an empty selection.
When set to \`none\`, empty selections contain no data values.",
            "enum": Array [
              "all",
              "none",
            ],
            "type": "string",
          },
          "encodings": Object {
            "description": "An array of encoding channels. The corresponding data field values
must match for a data tuple to fall within the selection.

__See also:__ [\`encodings\`](https://vega.github.io/vega-lite/docs/project.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/SingleDefUnitChannel",
            },
            "type": "array",
          },
          "fields": Object {
            "description": "An array of field names whose values must match for a data tuple to
fall within the selection.

__See also:__ [\`fields\`](https://vega.github.io/vega-lite/docs/project.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "init": Object {
            "description": "Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and an initial
value (or array of values).

__See also:__ [\`init\`](https://vega.github.io/vega-lite/docs/init.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/SelectionInitMapping",
            },
            "type": "array",
          },
          "nearest": Object {
            "description": "When true, an invisible voronoi diagram is computed to accelerate discrete
selection. The data value _nearest_ the mouse cursor is added to the selection.

__See also:__ [\`nearest\`](https://vega.github.io/vega-lite/docs/nearest.html) documentation.",
            "type": "boolean",
          },
          "on": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Stream",
              },
              Object {
                "type": "string",
              },
            ],
            "description": "A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.
For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).",
          },
          "resolve": Object {
            "$ref": "#/definitions/SelectionResolution",
            "description": "With layered and multi-view displays, a strategy that determines how
selections' data queries are resolved when applied in a filter transform,
conditional encoding rule, or scale domain.

__See also:__ [\`resolve\`](https://vega.github.io/vega-lite/docs/selection-resolve.html) documentation.",
          },
          "toggle": Object {
            "description": "Controls whether data values should be toggled or only ever inserted into
multi selections. Can be \`true\`, \`false\` (for insertion only), or a
[Vega expression](https://vega.github.io/vega/docs/expressions/).

__Default value:__ \`true\`, which corresponds to \`event.shiftKey\` (i.e.,
data values are toggled when a user interacts with the shift-key pressed).

__See also:__ [\`toggle\`](https://vega.github.io/vega-lite/docs/toggle.html) documentation.",
            "type": Array [
              "string",
              "boolean",
            ],
          },
        },
        "type": "object",
      },
      "MultiTimeUnit": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/LocalMultiTimeUnit",
          },
          Object {
            "$ref": "#/definitions/UtcMultiTimeUnit",
          },
        ],
      },
      "NamedData": Object {
        "additionalProperties": false,
        "properties": Object {
          "format": Object {
            "$ref": "#/definitions/DataFormat",
            "description": "An object that specifies the format for parsing the data.",
          },
          "name": Object {
            "description": "Provide a placeholder name and bind data at runtime.",
            "type": "string",
          },
        },
        "required": Array [
          "name",
        ],
        "type": "object",
      },
      "NiceTime": Object {
        "enum": Array [
          "second",
          "minute",
          "hour",
          "day",
          "week",
          "month",
          "year",
        ],
        "type": "string",
      },
      "NonArgAggregateOp": Object {
        "enum": Array [
          "average",
          "count",
          "distinct",
          "max",
          "mean",
          "median",
          "min",
          "missing",
          "q1",
          "q3",
          "ci0",
          "ci1",
          "stderr",
          "stdev",
          "stdevp",
          "sum",
          "valid",
          "values",
          "variance",
          "variancep",
        ],
        "type": "string",
      },
      "NumberValueDef": Object {
        "additionalProperties": false,
        "description": "Definition object for a constant value (primitive value or gradient definition) of an encoding channel.",
        "properties": Object {
          "value": Object {
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
            "type": "number",
          },
        },
        "required": Array [
          "value",
        ],
        "type": "object",
      },
      "NumericFieldDefWithCondition": Object {
        "$ref": "#/definitions/FieldDefWithCondition<MarkPropFieldDef,number>",
      },
      "NumericValueDefWithCondition": Object {
        "$ref": "#/definitions/ValueDefWithCondition<MarkPropFieldDef,number>",
      },
      "OrderFieldDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "enum": Array [
                  "binned",
                ],
                "type": "string",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "sort": Object {
            "$ref": "#/definitions/SortOrder",
            "description": "The sort order. One of \`\\"ascending\\"\` (default) or \`\\"descending\\"\`.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "Orient": Object {
        "enum": Array [
          "left",
          "right",
          "top",
          "bottom",
        ],
        "type": "string",
      },
      "Orientation": Object {
        "enum": Array [
          "horizontal",
          "vertical",
        ],
        "type": "string",
      },
      "OverlayMarkDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "align": Object {
            "$ref": "#/definitions/Align",
            "description": "The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"left\\"\`, \`\\"right\\"\`, \`\\"center\\"\`.",
          },
          "angle": Object {
            "description": "The rotation angle of the text, in degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
          },
          "aspect": Object {
            "description": "Whether to keep aspect ratio of image marks.",
            "type": "boolean",
          },
          "baseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "The vertical alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`.

__Default value:__ \`\\"middle\\"\`",
          },
          "clip": Object {
            "description": "Whether a mark be clipped to the enclosing groupâ€™s width and height.",
            "type": "boolean",
          },
          "color": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
            ],
            "description": "Default color.

__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> \`\\"#4682b4\\"\`

__Note:__
- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
- The \`fill\` and \`stroke\` properties have higher precedence than \`color\` and will override \`color\`.",
          },
          "cornerRadius": Object {
            "description": "The radius in pixels of rounded rectangle corners.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomLeft": Object {
            "description": "The radius in pixels of rounded rectangle bottom left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomRight": Object {
            "description": "The radius in pixels of rounded rectangle bottom right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopLeft": Object {
            "description": "The radius in pixels of rounded rectangle top right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopRight": Object {
            "description": "The radius in pixels of rounded rectangle top left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cursor": Object {
            "$ref": "#/definitions/Cursor",
            "description": "The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.",
          },
          "dir": Object {
            "$ref": "#/definitions/Dir",
            "description": "The direction of the text. One of \`\\"ltr\\"\` (left-to-right) or \`\\"rtl\\"\` (right-to-left). This property determines on which side is truncated in response to the limit parameter.

__Default value:__ \`\\"ltr\\"\`",
          },
          "dx": Object {
            "description": "The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "dy": Object {
            "description": "The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "ellipsis": Object {
            "description": "The ellipsis string for text truncated in response to the limit parameter.

__Default value:__ \`\\"â€¦\\"\`",
            "type": "string",
          },
          "fill": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Fill Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "fillOpacity": Object {
            "description": "The fill opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "filled": Object {
            "description": "Whether the mark's color should be used as fill color instead of stroke color.

__Default value:__ \`false\` for all \`point\`, \`line\`, and \`rule\` marks as well as \`geoshape\` marks for [\`graticule\`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, \`true\`.

__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",
            "type": "boolean",
          },
          "font": Object {
            "description": "The typeface to set the text in (e.g., \`\\"Helvetica Neue\\"\`).",
            "type": "string",
          },
          "fontSize": Object {
            "description": "The font size, in pixels.",
            "type": "number",
          },
          "fontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style (e.g., \`\\"italic\\"\`).",
          },
          "fontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "The font weight.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "height": Object {
            "description": "Height of the marks.",
            "type": "number",
          },
          "href": Object {
            "description": "A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",
            "format": "uri",
            "type": "string",
          },
          "interpolate": Object {
            "$ref": "#/definitions/Interpolate",
            "description": "The line interpolation method to use for line and area marks. One of the following:
- \`\\"linear\\"\`: piecewise linear segments, as in a polyline.
- \`\\"linear-closed\\"\`: close the linear segments to form a polygon.
- \`\\"step\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"step-before\\"\`: alternate between vertical and horizontal segments, as in a step function.
- \`\\"step-after\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"basis\\"\`: a B-spline, with control point duplication on the ends.
- \`\\"basis-open\\"\`: an open B-spline; may not intersect the start or end.
- \`\\"basis-closed\\"\`: a closed B-spline, as in a loop.
- \`\\"cardinal\\"\`: a Cardinal spline, with control point duplication on the ends.
- \`\\"cardinal-open\\"\`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
- \`\\"cardinal-closed\\"\`: a closed Cardinal spline, as in a loop.
- \`\\"bundle\\"\`: equivalent to basis, except the tension parameter is used to straighten the spline.
- \`\\"monotone\\"\`: cubic interpolation that preserves monotonicity in y.",
          },
          "invalid": Object {
            "description": "Defines how Vega-Lite should handle marks for invalid values (\`null\` and \`NaN\`).
- If set to \`\\"filter\\"\` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
- If \`null\`, all data items are included. In this case, invalid values will be interpreted as zeroes.",
            "enum": Array [
              "filter",
              null,
            ],
            "type": Array [
              "string",
              "null",
            ],
          },
          "limit": Object {
            "description": "The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.

__Default value:__ \`0\`, indicating no limit",
            "type": "number",
          },
          "lineBreak": Object {
            "description": "A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property will be ignored if the text property is array-valued.",
            "type": "string",
          },
          "lineHeight": Object {
            "description": "The height, in pixels, of each line of text in a multi-line text mark.",
            "type": "number",
          },
          "opacity": Object {
            "description": "The overall opacity (value between [0,1]).

__Default value:__ \`0.7\` for non-aggregate plots with \`point\`, \`tick\`, \`circle\`, or \`square\` marks or layered \`bar\` charts and \`1\` otherwise.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "order": Object {
            "description": "For line and trail marks, this \`order\` property can be set to \`null\` or \`false\` to make the lines use the original order in the data sources.",
            "type": Array [
              "null",
              "boolean",
            ],
          },
          "orient": Object {
            "$ref": "#/definitions/Orientation",
            "description": "The orientation of a non-stacked bar, tick, area, and line charts.
The value is either horizontal (default) or vertical.
- For bar, rule and tick, this determines whether the size of the bar and tick
should be applied to x or y dimension.
- For area, this property determines the orient property of the Vega output.
- For line and trail marks, this property determines the sort order of the points in the line
if \`config.sortLineBy\` is not specified.
For stacked charts, this is always determined by the orientation of the stack;
therefore explicitly specified value will be ignored.",
          },
          "radius": Object {
            "description": "Polar coordinate radial offset, in pixels, of the text label from the origin determined by the \`x\` and \`y\` properties.",
            "minimum": 0,
            "type": "number",
          },
          "shape": Object {
            "description": "Shape of the point marks. Supported values include:
- plotting shapes: \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"cross\\"\`, \`\\"diamond\\"\`, \`\\"triangle-up\\"\`, \`\\"triangle-down\\"\`, \`\\"triangle-right\\"\`, or \`\\"triangle-left\\"\`.
- the line symbol \`\\"stroke\\"\`
- centered directional shapes \`\\"arrow\\"\`, \`\\"wedge\\"\`, or \`\\"triangle\\"\`
- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)

__Default value:__ \`\\"circle\\"\`",
            "type": "string",
          },
          "size": Object {
            "description": "Default size for marks.
- For \`point\`/\`circle\`/\`square\`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.
- For \`bar\`, this represents the band size of the bar, in pixels.
- For \`text\`, this represents the font size, in pixels.

__Default value:__
- \`30\` for point, circle, square marks; width/height's \`step\`
- \`2\` for bar marks with discrete dimensions;
- \`5\` for bar marks with continuous dimensions;
- \`11\` for text marks.",
            "minimum": 0,
            "type": "number",
          },
          "stroke": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Stroke Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "strokeCap": Object {
            "$ref": "#/definitions/StrokeCap",
            "description": "The stroke cap for line ending style. One of \`\\"butt\\"\`, \`\\"round\\"\`, or \`\\"square\\"\`.

__Default value:__ \`\\"square\\"\`",
          },
          "strokeDash": Object {
            "description": "An array of alternating stroke, space lengths for creating dashed or dotted lines.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "strokeDashOffset": Object {
            "description": "The offset (in pixels) into which to begin drawing with the stroke dash array.",
            "type": "number",
          },
          "strokeJoin": Object {
            "$ref": "#/definitions/StrokeJoin",
            "description": "The stroke line join method. One of \`\\"miter\\"\`, \`\\"round\\"\` or \`\\"bevel\\"\`.

__Default value:__ \`\\"miter\\"\`",
          },
          "strokeMiterLimit": Object {
            "description": "The miter limit at which to bevel a line join.",
            "type": "number",
          },
          "strokeOpacity": Object {
            "description": "The stroke opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "strokeWidth": Object {
            "description": "The stroke width, in pixels.",
            "minimum": 0,
            "type": "number",
          },
          "style": Object {
            "anyOf": Array [
              Object {
                "type": "string",
              },
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
            ],
            "description": "A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly defined within the \`encoding\` will override a style default.

__Default value:__ The mark's name. For example, a bar mark will have style \`\\"bar\\"\` by default.
__Note:__ Any specified style will augment the default style. For example, a bar mark with \`\\"style\\": \\"foo\\"\` will receive from \`config.style.bar\` and \`config.style.foo\` (the specified style \`\\"foo\\"\` has higher precedence).",
          },
          "tension": Object {
            "description": "Depending on the interpolation type, sets the tension parameter (for line and area marks).",
            "type": "number",
          },
          "text": Object {
            "$ref": "#/definitions/Text",
            "description": "Placeholder text if the \`text\` channel is not specified",
          },
          "theta": Object {
            "description": "Polar coordinate angle, in radians, of the text label from the origin determined by the \`x\` and \`y\` properties. Values for \`theta\` follow the same convention of \`arc\` mark \`startAngle\` and \`endAngle\` properties: angles are measured in radians, with \`0\` indicating \\"north\\".",
            "type": "number",
          },
          "timeUnitBand": Object {
            "description": "Default relative band size for a time unit. If set to \`1\`, the bandwidth of the marks will be equal to the time unit band step.
If set to \`0.5\`, bandwidth of the marks will be half of the time unit band step.",
            "type": "number",
          },
          "timeUnitBandPosition": Object {
            "description": "Default relative band position for a time unit. If set to \`0\`, the marks will be positioned at the beginning of the time unit band step.
If set to \`0.5\`, the marks will be positioned in the middle of the time unit band step.",
            "type": "number",
          },
          "tooltip": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Value",
              },
              Object {
                "$ref": "#/definitions/TooltipContent",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.

- If \`tooltip\` is \`true\` or \`{\\"content\\": \\"encoding\\"}\`, then all fields from \`encoding\` will be used.
- If \`tooltip\` is \`{\\"content\\": \\"data\\"}\`, then all fields that appear in the highlighted data point will be used.
- If set to \`null\` or \`false\`, then no tooltip will be used.

See the [\`tooltip\`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.

__Default value:__ \`null\`",
          },
          "width": Object {
            "description": "Width of the marks.",
            "type": "number",
          },
          "x": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X coordinates of the marks, or width of horizontal \`\\"bar\\"\` and \`\\"area\\"\` without specified \`x2\` or \`width\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "x2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "x2Offset": Object {
            "description": "Offset for x2-position.",
            "type": "number",
          },
          "xOffset": Object {
            "description": "Offset for x-position.",
            "type": "number",
          },
          "y": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y coordinates of the marks, or height of vertical \`\\"bar\\"\` and \`\\"area\\"\` without specified \`y2\` or \`height\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "y2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "y2Offset": Object {
            "description": "Offset for y2-position.",
            "type": "number",
          },
          "yOffset": Object {
            "description": "Offset for y-position.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "Padding": Object {
        "anyOf": Array [
          Object {
            "type": "number",
          },
          Object {
            "additionalProperties": false,
            "properties": Object {
              "bottom": Object {
                "type": "number",
              },
              "left": Object {
                "type": "number",
              },
              "right": Object {
                "type": "number",
              },
              "top": Object {
                "type": "number",
              },
            },
            "type": "object",
          },
        ],
        "minimum": 0,
      },
      "Parse": Object {
        "additionalProperties": Object {
          "$ref": "#/definitions/ParseValue",
        },
        "type": "object",
      },
      "ParseValue": Object {
        "anyOf": Array [
          Object {
            "type": "null",
          },
          Object {
            "type": "string",
          },
          Object {
            "enum": Array [
              "string",
            ],
            "type": "string",
          },
          Object {
            "enum": Array [
              "boolean",
            ],
            "type": "string",
          },
          Object {
            "enum": Array [
              "date",
            ],
            "type": "string",
          },
          Object {
            "enum": Array [
              "number",
            ],
            "type": "string",
          },
        ],
      },
      "PartsMixins<BoxPlotPart>": Object {
        "additionalProperties": false,
        "properties": Object {
          "box": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "median": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "outliers": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "rule": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "ticks": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
        },
        "type": "object",
      },
      "PartsMixins<ErrorBandPart>": Object {
        "additionalProperties": false,
        "properties": Object {
          "band": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "borders": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
        },
        "type": "object",
      },
      "PartsMixins<ErrorBarPart>": Object {
        "additionalProperties": false,
        "properties": Object {
          "rule": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
          "ticks": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/MarkConfig",
              },
            ],
          },
        },
        "type": "object",
      },
      "PivotTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "groupby": Object {
            "description": "The optional data fields to group by. If not specified, a single group containing all data objects will be used.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "limit": Object {
            "description": "An optional parameter indicating the maximum number of pivoted fields to generate.
The default (\`0\`) applies no limit. The pivoted \`pivot\` names are sorted in ascending order prior to enforcing the limit.
__Default value:__ \`0\`",
            "type": "number",
          },
          "op": Object {
            "description": "The aggregation operation to apply to grouped \`value\` field values.
__Default value:__ \`sum\`",
            "type": "string",
          },
          "pivot": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field to pivot on. The unique values of this field become new field names in the output stream.",
          },
          "value": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field to populate pivoted fields. The aggregate values of this field become the values of the new pivoted fields.",
          },
        },
        "required": Array [
          "pivot",
          "value",
        ],
        "type": "object",
      },
      "PositionFieldDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "axis": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Axis",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of axis's gridlines, ticks and labels.
If \`null\`, the axis for the encoding channel will be removed.

__Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.

__See also:__ [\`axis\`](https://vega.github.io/vega-lite/docs/axis.html) documentation.",
          },
          "band": Object {
            "description": "For rect-based marks (\`rect\`, \`bar\`, and \`image\`), mark size relative to bandwidth of [band scales](https://vega.github.io/vega-lite/docs/scale.html#band) or time units. If set to \`1\`, the mark size is set to the bandwidth or the time unit interval. If set to \`0.5\`, the mark size is half of the bandwidth or the time unit interval.

For other marks, relative position on a band of a stacked, binned, time unit or band scale. If set to \`0\`, the marks will be positioned at the beginning of the band. If set to \`0.5\`, the marks will be positioned in the middle of the band.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "enum": Array [
                  "binned",
                ],
                "type": "string",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "impute": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ImputeParams",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining the properties of the Impute Operation to be applied.
The field value of the other positional channel is taken as \`key\` of the \`Impute\` Operation.
The field of the \`color\` channel if specified is used as \`groupby\` of the \`Impute\` Operation.

__See also:__ [\`impute\`](https://vega.github.io/vega-lite/docs/impute.html) documentation.",
          },
          "scale": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Scale",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.

If \`null\`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).

__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.

__See also:__ [\`scale\`](https://vega.github.io/vega-lite/docs/scale.html) documentation.",
          },
          "sort": Object {
            "$ref": "#/definitions/Sort",
            "description": "Sort order for the encoded field.

For continuous fields (quantitative or temporal), \`sort\` can be either \`\\"ascending\\"\` or \`\\"descending\\"\`.

For discrete fields, \`sort\` can be one of the following:
- \`\\"ascending\\"\` or \`\\"descending\\"\` -- for sorting by the values' natural order in JavaScript.
- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., \`\\"x\\"\` or \`\\"y\\"\`) with an optional minus prefix for descending sort (e.g., \`\\"-x\\"\` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, \`\\"sort\\": \\"-x\\"\` is equivalent to \`\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}\`.
- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units \`\\"month\\"\` and \`\\"day\\"\`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., \`\\"Mon\\"\`, \`\\"Tue\\"\`).
- \`null\` indicating no sort.

__Default value:__ \`\\"ascending\\"\`

__Note:__ \`null\` and sorting by another channel is not supported for \`row\` and \`column\`.

__See also:__ [\`sort\`](https://vega.github.io/vega-lite/docs/sort.html) documentation.",
          },
          "stack": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/StackOffset",
              },
              Object {
                "type": "null",
              },
              Object {
                "type": "boolean",
              },
            ],
            "description": "Type of stacking offset if the field should be stacked.
\`stack\` is only applicable for \`x\` and \`y\` channels with continuous domains.
For example, \`stack\` of \`y\` can be used to customize stacking for a vertical bar chart.

\`stack\` can be one of the following values:
- \`\\"zero\\"\` or \`true\`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
- \`\\"normalize\\"\` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
-\`\\"center\\"\` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
- \`null\` or \`false\` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.

__Default value:__ \`zero\` for plots with all of the following conditions are true:
(1) the mark is \`bar\` or \`area\`;
(2) the stacked measure channel (x or y) has a linear scale;
(3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, \`null\` by default.

__See also:__ [\`stack\`](https://vega.github.io/vega-lite/docs/stack.html) documentation.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "Predicate": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/FieldEqualPredicate",
          },
          Object {
            "$ref": "#/definitions/FieldRangePredicate",
          },
          Object {
            "$ref": "#/definitions/FieldOneOfPredicate",
          },
          Object {
            "$ref": "#/definitions/FieldLTPredicate",
          },
          Object {
            "$ref": "#/definitions/FieldGTPredicate",
          },
          Object {
            "$ref": "#/definitions/FieldLTEPredicate",
          },
          Object {
            "$ref": "#/definitions/FieldGTEPredicate",
          },
          Object {
            "$ref": "#/definitions/FieldValidPredicate",
          },
          Object {
            "$ref": "#/definitions/SelectionPredicate",
          },
          Object {
            "type": "string",
          },
        ],
      },
      "Projection": Object {
        "additionalProperties": false,
        "properties": Object {
          "center": Object {
            "$ref": "#/definitions/Vector2<number>",
            "description": "The projectionâ€™s center to the specified center, a two-element array of longitude and latitude in degrees.

__Default value:__ \`[0, 0]\`",
          },
          "clipAngle": Object {
            "description": "The projectionâ€™s clipping circle radius to the specified angle in degrees. If \`null\`, switches to [antimeridian](http://bl.ocks.org/mbostock/3788999) cutting rather than small-circle clipping.",
            "type": "number",
          },
          "clipExtent": Object {
            "$ref": "#/definitions/Vector2<Vector2<number>>",
            "description": "The projectionâ€™s viewport clip extent to the specified bounds in pixels. The extent bounds are specified as an array \`[[x0, y0], [x1, y1]]\`, where \`x0\` is the left-side of the viewport, \`y0\` is the top, \`x1\` is the right and \`y1\` is the bottom. If \`null\`, no viewport clipping is performed.",
          },
          "coefficient": Object {
            "type": "number",
          },
          "distance": Object {
            "type": "number",
          },
          "fraction": Object {
            "type": "number",
          },
          "lobes": Object {
            "type": "number",
          },
          "parallel": Object {
            "type": "number",
          },
          "parallels": Object {
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "precision": Object {
            "description": "The threshold for the projectionâ€™s [adaptive resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This value corresponds to the [Douglasâ€“Peucker distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm). If precision is not specified, returns the projectionâ€™s current resampling precision which defaults to \`âˆš0.5 â‰… 0.70710â€¦\`.",
            "type": "number",
          },
          "radius": Object {
            "type": "number",
          },
          "ratio": Object {
            "type": "number",
          },
          "reflectX": Object {
            "type": "boolean",
          },
          "reflectY": Object {
            "type": "boolean",
          },
          "rotate": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Vector2<number>",
              },
              Object {
                "$ref": "#/definitions/Vector3<number>",
              },
            ],
            "description": "The projectionâ€™s three-axis rotation to the specified angles, which must be a two- or three-element array of numbers [\`lambda\`, \`phi\`, \`gamma\`] specifying the rotation angles in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)

__Default value:__ \`[0, 0, 0]\`",
          },
          "scale": Object {
            "description": "The projection's scale (zoom) value, overriding automatic fitting.",
            "type": "number",
          },
          "spacing": Object {
            "type": "number",
          },
          "tilt": Object {
            "type": "number",
          },
          "translate": Object {
            "$ref": "#/definitions/Vector2<number>",
            "description": "The projection's translation (pan) value, overriding automatic fitting.",
          },
          "type": Object {
            "$ref": "#/definitions/ProjectionType",
            "description": "The cartographic projection to use. This value is case-insensitive, for example \`\\"albers\\"\` and \`\\"Albers\\"\` indicate the same projection type. You can find all valid projection types [in the documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).

__Default value:__ \`mercator\`",
          },
        },
        "type": "object",
      },
      "ProjectionConfig": Object {
        "$ref": "#/definitions/Projection",
        "description": "Any property of Projection can be in config",
      },
      "ProjectionType": Object {
        "enum": Array [
          "albers",
          "albersUsa",
          "azimuthalEqualArea",
          "azimuthalEquidistant",
          "conicConformal",
          "conicEqualArea",
          "conicEquidistant",
          "equalEarth",
          "equirectangular",
          "gnomonic",
          "identity",
          "mercator",
          "naturalEarth1",
          "orthographic",
          "stereographic",
          "transverseMercator",
        ],
        "type": "string",
      },
      "QuantileTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "description": "The output field names for the probability and quantile values.

__Default value:__ \`[\\"prob\\", \\"value\\"]\`",
            "items": Array [
              Object {
                "$ref": "#/definitions/FieldName",
              },
              Object {
                "$ref": "#/definitions/FieldName",
              },
            ],
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "groupby": Object {
            "description": "The data fields to group by. If not specified, a single group containing all data objects will be used.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "probs": Object {
            "description": "An array of probabilities in the range (0, 1) for which to compute quantile values. If not specified, the *step* parameter will be used.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "quantile": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field for which to perform quantile estimation.",
          },
          "step": Object {
            "description": "A probability step size (default 0.01) for sampling quantile values. All values from one-half the step size up to 1 (exclusive) will be sampled. This parameter is only used if the *probs* parameter is not provided.",
            "type": "number",
          },
        },
        "required": Array [
          "quantile",
        ],
        "type": "object",
      },
      "RadialGradient": Object {
        "additionalProperties": false,
        "properties": Object {
          "gradient": Object {
            "description": "The type of gradient. Use \`\\"radial\\"\` for a radial gradient.",
            "enum": Array [
              "radial",
            ],
            "type": "string",
          },
          "id": Object {
            "type": "string",
          },
          "r1": Object {
            "description": "The radius length, in normalized [0, 1] coordinates, of the inner circle for the gradient.

__Default value:__ \`0\`",
            "type": "number",
          },
          "r2": Object {
            "description": "The radius length, in normalized [0, 1] coordinates, of the outer circle for the gradient.

__Default value:__ \`0.5\`",
            "type": "number",
          },
          "stops": Object {
            "description": "An array of gradient stops defining the gradient color sequence.",
            "items": Object {
              "$ref": "#/definitions/GradientStop",
            },
            "type": "array",
          },
          "x1": Object {
            "description": "The x-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle for the gradient.

__Default value:__ \`0.5\`",
            "type": "number",
          },
          "x2": Object {
            "description": "The x-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle for the gradient.

__Default value:__ \`0.5\`",
            "type": "number",
          },
          "y1": Object {
            "description": "The y-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle for the gradient.

__Default value:__ \`0.5\`",
            "type": "number",
          },
          "y2": Object {
            "description": "The y-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle for the gradient.

__Default value:__ \`0.5\`",
            "type": "number",
          },
        },
        "required": Array [
          "gradient",
          "stops",
        ],
        "type": "object",
      },
      "RangeConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "category": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/RangeScheme",
              },
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
            ],
            "description": "Default [color scheme](https://vega.github.io/vega/docs/schemes/) for categorical data.",
          },
          "diverging": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/RangeScheme",
              },
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
            ],
            "description": "Default [color scheme](https://vega.github.io/vega/docs/schemes/) for diverging quantitative ramps.",
          },
          "heatmap": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/RangeScheme",
              },
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
            ],
            "description": "Default [color scheme](https://vega.github.io/vega/docs/schemes/) for quantitative heatmaps.",
          },
          "ordinal": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/RangeScheme",
              },
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
            ],
            "description": "Default [color scheme](https://vega.github.io/vega/docs/schemes/) for rank-ordered data.",
          },
          "ramp": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/RangeScheme",
              },
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
            ],
            "description": "Default [color scheme](https://vega.github.io/vega/docs/schemes/) for sequential quantitative ramps.",
          },
          "symbol": Object {
            "description": "Array of [symbol](https://vega.github.io/vega/docs/marks/symbol/) names or paths for the default shape palette.",
            "items": Object {
              "$ref": "#/definitions/SymbolShape",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "RangeEnum": Object {
        "enum": Array [
          "width",
          "height",
          "symbol",
          "category",
          "ordinal",
          "ramp",
          "diverging",
          "heatmap",
        ],
        "type": "string",
      },
      "RangeRaw": Object {
        "items": Object {
          "anyOf": Array [
            Object {
              "type": "null",
            },
            Object {
              "type": "boolean",
            },
            Object {
              "type": "string",
            },
            Object {
              "type": "number",
            },
            Object {
              "$ref": "#/definitions/SignalRef",
            },
            Object {
              "$ref": "#/definitions/RangeRawArray",
            },
          ],
        },
        "type": "array",
      },
      "RangeRawArray": Object {
        "items": Object {
          "anyOf": Array [
            Object {
              "type": "number",
            },
            Object {
              "$ref": "#/definitions/SignalRef",
            },
          ],
        },
        "type": "array",
      },
      "RangeScheme": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/RangeEnum",
          },
          Object {
            "$ref": "#/definitions/RangeRaw",
          },
          Object {
            "$ref": "#/definitions/SignalRef",
          },
          Object {
            "additionalProperties": false,
            "properties": Object {
              "count": Object {
                "anyOf": Array [
                  Object {
                    "type": "number",
                  },
                  Object {
                    "$ref": "#/definitions/SignalRef",
                  },
                ],
              },
              "extent": Object {
                "anyOf": Array [
                  Object {
                    "items": Object {
                      "anyOf": Array [
                        Object {
                          "type": "number",
                        },
                        Object {
                          "$ref": "#/definitions/SignalRef",
                        },
                      ],
                    },
                    "type": "array",
                  },
                  Object {
                    "$ref": "#/definitions/SignalRef",
                  },
                ],
              },
              "scheme": Object {
                "anyOf": Array [
                  Object {
                    "type": "string",
                  },
                  Object {
                    "items": Object {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  Object {
                    "$ref": "#/definitions/SignalRef",
                  },
                  Object {
                    "$ref": "#/definitions/ColorScheme",
                  },
                ],
              },
            },
            "required": Array [
              "scheme",
            ],
            "type": "object",
          },
        ],
      },
      "RectConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "align": Object {
            "$ref": "#/definitions/Align",
            "description": "The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"left\\"\`, \`\\"right\\"\`, \`\\"center\\"\`.",
          },
          "angle": Object {
            "description": "The rotation angle of the text, in degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
          },
          "aspect": Object {
            "description": "Whether to keep aspect ratio of image marks.",
            "type": "boolean",
          },
          "baseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "The vertical alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`.

__Default value:__ \`\\"middle\\"\`",
          },
          "binSpacing": Object {
            "description": "Offset between bars for binned field. The ideal value for this is either 0 (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).

__Default value:__ \`1\`",
            "minimum": 0,
            "type": "number",
          },
          "color": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
            ],
            "description": "Default color.

__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> \`\\"#4682b4\\"\`

__Note:__
- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
- The \`fill\` and \`stroke\` properties have higher precedence than \`color\` and will override \`color\`.",
          },
          "continuousBandSize": Object {
            "description": "The default size of the bars on continuous scales.

__Default value:__ \`5\`",
            "minimum": 0,
            "type": "number",
          },
          "cornerRadius": Object {
            "description": "The radius in pixels of rounded rectangle corners.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomLeft": Object {
            "description": "The radius in pixels of rounded rectangle bottom left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomRight": Object {
            "description": "The radius in pixels of rounded rectangle bottom right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopLeft": Object {
            "description": "The radius in pixels of rounded rectangle top right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopRight": Object {
            "description": "The radius in pixels of rounded rectangle top left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cursor": Object {
            "$ref": "#/definitions/Cursor",
            "description": "The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.",
          },
          "dir": Object {
            "$ref": "#/definitions/Dir",
            "description": "The direction of the text. One of \`\\"ltr\\"\` (left-to-right) or \`\\"rtl\\"\` (right-to-left). This property determines on which side is truncated in response to the limit parameter.

__Default value:__ \`\\"ltr\\"\`",
          },
          "discreteBandSize": Object {
            "description": "The default size of the bars with discrete dimensions. If unspecified, the default size is  \`step-2\`, which provides 2 pixel offset between bars.",
            "minimum": 0,
            "type": "number",
          },
          "dx": Object {
            "description": "The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "dy": Object {
            "description": "The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "ellipsis": Object {
            "description": "The ellipsis string for text truncated in response to the limit parameter.

__Default value:__ \`\\"â€¦\\"\`",
            "type": "string",
          },
          "fill": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Fill Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "fillOpacity": Object {
            "description": "The fill opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "filled": Object {
            "description": "Whether the mark's color should be used as fill color instead of stroke color.

__Default value:__ \`false\` for all \`point\`, \`line\`, and \`rule\` marks as well as \`geoshape\` marks for [\`graticule\`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, \`true\`.

__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",
            "type": "boolean",
          },
          "font": Object {
            "description": "The typeface to set the text in (e.g., \`\\"Helvetica Neue\\"\`).",
            "type": "string",
          },
          "fontSize": Object {
            "description": "The font size, in pixels.",
            "type": "number",
          },
          "fontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style (e.g., \`\\"italic\\"\`).",
          },
          "fontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "The font weight.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "height": Object {
            "description": "Height of the marks.",
            "type": "number",
          },
          "href": Object {
            "description": "A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",
            "format": "uri",
            "type": "string",
          },
          "interpolate": Object {
            "$ref": "#/definitions/Interpolate",
            "description": "The line interpolation method to use for line and area marks. One of the following:
- \`\\"linear\\"\`: piecewise linear segments, as in a polyline.
- \`\\"linear-closed\\"\`: close the linear segments to form a polygon.
- \`\\"step\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"step-before\\"\`: alternate between vertical and horizontal segments, as in a step function.
- \`\\"step-after\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"basis\\"\`: a B-spline, with control point duplication on the ends.
- \`\\"basis-open\\"\`: an open B-spline; may not intersect the start or end.
- \`\\"basis-closed\\"\`: a closed B-spline, as in a loop.
- \`\\"cardinal\\"\`: a Cardinal spline, with control point duplication on the ends.
- \`\\"cardinal-open\\"\`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
- \`\\"cardinal-closed\\"\`: a closed Cardinal spline, as in a loop.
- \`\\"bundle\\"\`: equivalent to basis, except the tension parameter is used to straighten the spline.
- \`\\"monotone\\"\`: cubic interpolation that preserves monotonicity in y.",
          },
          "invalid": Object {
            "description": "Defines how Vega-Lite should handle marks for invalid values (\`null\` and \`NaN\`).
- If set to \`\\"filter\\"\` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
- If \`null\`, all data items are included. In this case, invalid values will be interpreted as zeroes.",
            "enum": Array [
              "filter",
              null,
            ],
            "type": Array [
              "string",
              "null",
            ],
          },
          "limit": Object {
            "description": "The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.

__Default value:__ \`0\`, indicating no limit",
            "type": "number",
          },
          "lineBreak": Object {
            "description": "A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property will be ignored if the text property is array-valued.",
            "type": "string",
          },
          "lineHeight": Object {
            "description": "The height, in pixels, of each line of text in a multi-line text mark.",
            "type": "number",
          },
          "opacity": Object {
            "description": "The overall opacity (value between [0,1]).

__Default value:__ \`0.7\` for non-aggregate plots with \`point\`, \`tick\`, \`circle\`, or \`square\` marks or layered \`bar\` charts and \`1\` otherwise.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "order": Object {
            "description": "For line and trail marks, this \`order\` property can be set to \`null\` or \`false\` to make the lines use the original order in the data sources.",
            "type": Array [
              "null",
              "boolean",
            ],
          },
          "orient": Object {
            "$ref": "#/definitions/Orientation",
            "description": "The orientation of a non-stacked bar, tick, area, and line charts.
The value is either horizontal (default) or vertical.
- For bar, rule and tick, this determines whether the size of the bar and tick
should be applied to x or y dimension.
- For area, this property determines the orient property of the Vega output.
- For line and trail marks, this property determines the sort order of the points in the line
if \`config.sortLineBy\` is not specified.
For stacked charts, this is always determined by the orientation of the stack;
therefore explicitly specified value will be ignored.",
          },
          "radius": Object {
            "description": "Polar coordinate radial offset, in pixels, of the text label from the origin determined by the \`x\` and \`y\` properties.",
            "minimum": 0,
            "type": "number",
          },
          "shape": Object {
            "description": "Shape of the point marks. Supported values include:
- plotting shapes: \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"cross\\"\`, \`\\"diamond\\"\`, \`\\"triangle-up\\"\`, \`\\"triangle-down\\"\`, \`\\"triangle-right\\"\`, or \`\\"triangle-left\\"\`.
- the line symbol \`\\"stroke\\"\`
- centered directional shapes \`\\"arrow\\"\`, \`\\"wedge\\"\`, or \`\\"triangle\\"\`
- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)

__Default value:__ \`\\"circle\\"\`",
            "type": "string",
          },
          "size": Object {
            "description": "Default size for marks.
- For \`point\`/\`circle\`/\`square\`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.
- For \`bar\`, this represents the band size of the bar, in pixels.
- For \`text\`, this represents the font size, in pixels.

__Default value:__
- \`30\` for point, circle, square marks; width/height's \`step\`
- \`2\` for bar marks with discrete dimensions;
- \`5\` for bar marks with continuous dimensions;
- \`11\` for text marks.",
            "minimum": 0,
            "type": "number",
          },
          "stroke": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Stroke Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "strokeCap": Object {
            "$ref": "#/definitions/StrokeCap",
            "description": "The stroke cap for line ending style. One of \`\\"butt\\"\`, \`\\"round\\"\`, or \`\\"square\\"\`.

__Default value:__ \`\\"square\\"\`",
          },
          "strokeDash": Object {
            "description": "An array of alternating stroke, space lengths for creating dashed or dotted lines.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "strokeDashOffset": Object {
            "description": "The offset (in pixels) into which to begin drawing with the stroke dash array.",
            "type": "number",
          },
          "strokeJoin": Object {
            "$ref": "#/definitions/StrokeJoin",
            "description": "The stroke line join method. One of \`\\"miter\\"\`, \`\\"round\\"\` or \`\\"bevel\\"\`.

__Default value:__ \`\\"miter\\"\`",
          },
          "strokeMiterLimit": Object {
            "description": "The miter limit at which to bevel a line join.",
            "type": "number",
          },
          "strokeOpacity": Object {
            "description": "The stroke opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "strokeWidth": Object {
            "description": "The stroke width, in pixels.",
            "minimum": 0,
            "type": "number",
          },
          "tension": Object {
            "description": "Depending on the interpolation type, sets the tension parameter (for line and area marks).",
            "type": "number",
          },
          "text": Object {
            "$ref": "#/definitions/Text",
            "description": "Placeholder text if the \`text\` channel is not specified",
          },
          "theta": Object {
            "description": "Polar coordinate angle, in radians, of the text label from the origin determined by the \`x\` and \`y\` properties. Values for \`theta\` follow the same convention of \`arc\` mark \`startAngle\` and \`endAngle\` properties: angles are measured in radians, with \`0\` indicating \\"north\\".",
            "type": "number",
          },
          "timeUnitBand": Object {
            "description": "Default relative band size for a time unit. If set to \`1\`, the bandwidth of the marks will be equal to the time unit band step.
If set to \`0.5\`, bandwidth of the marks will be half of the time unit band step.",
            "type": "number",
          },
          "timeUnitBandPosition": Object {
            "description": "Default relative band position for a time unit. If set to \`0\`, the marks will be positioned at the beginning of the time unit band step.
If set to \`0.5\`, the marks will be positioned in the middle of the time unit band step.",
            "type": "number",
          },
          "tooltip": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Value",
              },
              Object {
                "$ref": "#/definitions/TooltipContent",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.

- If \`tooltip\` is \`true\` or \`{\\"content\\": \\"encoding\\"}\`, then all fields from \`encoding\` will be used.
- If \`tooltip\` is \`{\\"content\\": \\"data\\"}\`, then all fields that appear in the highlighted data point will be used.
- If set to \`null\` or \`false\`, then no tooltip will be used.

See the [\`tooltip\`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.

__Default value:__ \`null\`",
          },
          "width": Object {
            "description": "Width of the marks.",
            "type": "number",
          },
          "x": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X coordinates of the marks, or width of horizontal \`\\"bar\\"\` and \`\\"area\\"\` without specified \`x2\` or \`width\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "x2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "y": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y coordinates of the marks, or height of vertical \`\\"bar\\"\` and \`\\"area\\"\` without specified \`y2\` or \`height\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "y2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
        },
        "type": "object",
      },
      "RegressionTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "description": "The output field names for the smoothed points generated by the regression transform.

__Default value:__ The field names of the input x and y values.",
            "items": Array [
              Object {
                "$ref": "#/definitions/FieldName",
              },
              Object {
                "$ref": "#/definitions/FieldName",
              },
            ],
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "extent": Object {
            "description": "A [min, max] domain over the independent (x) field for the starting and ending points of the generated trend line.",
            "items": Array [
              Object {
                "type": "number",
              },
              Object {
                "type": "number",
              },
            ],
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
          },
          "groupby": Object {
            "description": "The data fields to group by. If not specified, a single group containing all data objects will be used.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "method": Object {
            "description": "The functional form of the regression model. One of \`\\"linear\\"\`, \`\\"log\\"\`, \`\\"exp\\"\`, \`\\"pow\\"\`, \`\\"quad\\"\`, or \`\\"poly\\"\`.

__Default value:__ \`\\"linear\\"\`",
            "enum": Array [
              "linear",
              "log",
              "exp",
              "pow",
              "quad",
              "poly",
            ],
            "type": "string",
          },
          "on": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field of the independent variable to use a predictor.",
          },
          "order": Object {
            "description": "The polynomial order (number of coefficients) for the 'poly' method.

__Default value:__ \`3\`",
            "type": "number",
          },
          "params": Object {
            "description": "A boolean flag indicating if the transform should return the regression model parameters (one object per group), rather than trend line points.
The resulting objects include a \`coef\` array of fitted coefficient values (starting with the intercept term and then including terms of increasing order)
and an \`rSquared\` value (indicating the total variance explained by the model).

__Default value:__ \`false\`",
            "type": "boolean",
          },
          "regression": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field of the dependent variable to predict.",
          },
        },
        "required": Array [
          "regression",
          "on",
        ],
        "type": "object",
      },
      "RepeatMapping": Object {
        "additionalProperties": false,
        "properties": Object {
          "column": Object {
            "description": "An array of fields to be repeated horizontally.",
            "items": Object {
              "type": "string",
            },
            "type": "array",
          },
          "row": Object {
            "description": "An array of fields to be repeated vertically.",
            "items": Object {
              "type": "string",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "RepeatRef": Object {
        "additionalProperties": false,
        "description": "Reference to a repeated value.",
        "properties": Object {
          "repeat": Object {
            "enum": Array [
              "row",
              "column",
              "repeat",
            ],
            "type": "string",
          },
        },
        "required": Array [
          "repeat",
        ],
        "type": "object",
      },
      "RepeatSpec": Object {
        "additionalProperties": false,
        "description": "Base interface for a repeat specification.",
        "properties": Object {
          "align": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LayoutAlign",
              },
              Object {
                "$ref": "#/definitions/RowCol<LayoutAlign>",
              },
            ],
            "description": "The alignment to apply to grid rows and columns.
The supported string values are \`\\"all\\"\`, \`\\"each\\"\`, and \`\\"none\\"\`.

- For \`\\"none\\"\`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
- For \`\\"each\\"\`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
- For \`\\"all\\"\`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.

Alternatively, an object value of the form \`{\\"row\\": string, \\"column\\": string}\` can be used to supply different alignments for rows and columns.

__Default value:__ \`\\"all\\"\`.",
          },
          "bounds": Object {
            "description": "The bounds calculation method to use for determining the extent of a sub-plot. One of \`full\` (the default) or \`flush\`.

- If set to \`full\`, the entire calculated bounds (including axes, title, and legend) will be used.
- If set to \`flush\`, only the specified width and height values for the sub-view will be used. The \`flush\` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.

__Default value:__ \`\\"full\\"\`",
            "enum": Array [
              "full",
              "flush",
            ],
            "type": "string",
          },
          "center": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/RowCol<boolean>",
              },
            ],
            "description": "Boolean flag indicating if subviews should be centered relative to their respective rows or columns.

An object value of the form \`{\\"row\\": boolean, \\"column\\": boolean}\` can be used to supply different centering values for rows and columns.

__Default value:__ \`false\`",
          },
          "columns": Object {
            "description": "The number of columns to include in the view composition layout.

__Default value__: \`undefined\` -- An infinite number of columns (a single row) will be assumed. This is equivalent to
\`hconcat\` (for \`concat\`) and to using the \`column\` channel (for \`facet\` and \`repeat\`).

__Note__:

1) This property is only for:
- the general (wrappable) \`concat\` operator (not \`hconcat\`/\`vconcat\`)
- the \`facet\` and \`repeat\` operator with one field/repetition definition (without row/column nesting)

2) Setting the \`columns\` to \`1\` is equivalent to \`vconcat\` (for \`concat\`) and to using the \`row\` channel (for \`facet\` and \`repeat\`).",
            "type": "number",
          },
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "repeat": Object {
            "anyOf": Array [
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
              Object {
                "$ref": "#/definitions/RepeatMapping",
              },
            ],
            "description": "Definition for fields to be repeated. One of:
1) An array of fields to be repeated. If \`\\"repeat\\"\` is an array, the field can be referred using \`{\\"repeat\\": \\"repeat\\"}\`
2) An object that mapped \`\\"row\\"\` and/or \`\\"column\\"\` to the listed of fields to be repeated along the particular orientations. The objects \`{\\"repeat\\": \\"row\\"}\` and \`{\\"repeat\\": \\"column\\"}\` can be used to refer to the repeated field respectively.",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "spacing": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/RowCol<number>",
              },
            ],
            "description": "The spacing in pixels between sub-views of the composition operator.
An object of the form \`{\\"row\\": number, \\"column\\": number}\` can be used to set
different spacing values for rows and columns.

__Default value__: Depends on \`\\"spacing\\"\` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (\`20\` by default)",
          },
          "spec": Object {
            "$ref": "#/definitions/Spec",
            "description": "A specification of the view that gets repeated.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
        },
        "required": Array [
          "repeat",
          "spec",
        ],
        "type": "object",
      },
      "Resolve": Object {
        "additionalProperties": false,
        "description": "Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from \`scale\`, \`axis\`, and \`legend\` to a mapping from channels to resolutions. Scales and guides can be resolved to be \`\\"independent\\"\` or \`\\"shared\\"\`.",
        "properties": Object {
          "axis": Object {
            "$ref": "#/definitions/AxisResolveMap",
          },
          "legend": Object {
            "$ref": "#/definitions/LegendResolveMap",
          },
          "scale": Object {
            "$ref": "#/definitions/ScaleResolveMap",
          },
        },
        "type": "object",
      },
      "ResolveMode": Object {
        "enum": Array [
          "independent",
          "shared",
        ],
        "type": "string",
      },
      "RowCol<LayoutAlign>": Object {
        "additionalProperties": false,
        "properties": Object {
          "column": Object {
            "$ref": "#/definitions/LayoutAlign",
          },
          "row": Object {
            "$ref": "#/definitions/LayoutAlign",
          },
        },
        "type": "object",
      },
      "RowCol<boolean>": Object {
        "additionalProperties": false,
        "properties": Object {
          "column": Object {
            "type": "boolean",
          },
          "row": Object {
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "RowCol<number>": Object {
        "additionalProperties": false,
        "properties": Object {
          "column": Object {
            "type": "number",
          },
          "row": Object {
            "type": "number",
          },
        },
        "type": "object",
      },
      "RowColumnEncodingFieldDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "align": Object {
            "$ref": "#/definitions/LayoutAlign",
            "description": "The alignment to apply to row/column facet's subplot.
The supported string values are \`\\"all\\"\`, \`\\"each\\"\`, and \`\\"none\\"\`.

- For \`\\"none\\"\`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
- For \`\\"each\\"\`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
- For \`\\"all\\"\`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.

__Default value:__ \`\\"all\\"\`.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "center": Object {
            "description": "Boolean flag indicating if facet's subviews should be centered relative to their respective rows or columns.

__Default value:__ \`false\`",
            "type": "boolean",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "header": Object {
            "$ref": "#/definitions/Header",
            "description": "An object defining properties of a facet's header.",
          },
          "sort": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SortArray",
              },
              Object {
                "$ref": "#/definitions/SortOrder",
              },
              Object {
                "$ref": "#/definitions/EncodingSortField",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Sort order for the encoded field.

For continuous fields (quantitative or temporal), \`sort\` can be either \`\\"ascending\\"\` or \`\\"descending\\"\`.

For discrete fields, \`sort\` can be one of the following:
- \`\\"ascending\\"\` or \`\\"descending\\"\` -- for sorting by the values' natural order in JavaScript.
- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units \`\\"month\\"\` and \`\\"day\\"\`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., \`\\"Mon\\"\`, \`\\"Tue\\"\`).
- \`null\` indicating no sort.

__Default value:__ \`\\"ascending\\"\`

__Note:__ \`null\` is not supported for \`row\` and \`column\`.",
          },
          "spacing": Object {
            "description": "The spacing in pixels between facet's sub-views.

__Default value__: Depends on \`\\"spacing\\"\` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (\`20\` by default)",
            "type": "number",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "SampleTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "sample": Object {
            "description": "The maximum number of data objects to include in the sample.

__Default value:__ \`1000\`",
            "type": "number",
          },
        },
        "required": Array [
          "sample",
        ],
        "type": "object",
      },
      "Scale": Object {
        "additionalProperties": false,
        "properties": Object {
          "align": Object {
            "description": "The alignment of the steps within the scale range.

This value must lie in the range \`[0,1]\`. A value of \`0.5\` indicates that the steps should be centered within the range. A value of \`0\` or \`1\` may be used to shift the bands to one side, say to position them adjacent to an axis.

__Default value:__ \`0.5\`",
            "type": "number",
          },
          "base": Object {
            "description": "The logarithm base of the \`log\` scale (default \`10\`).",
            "type": "number",
          },
          "bins": Object {
            "description": "An array of bin boundaries over the scale domain. If provided, axes and legends will use the bin boundaries to inform the choice of tick marks and text labels.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "clamp": Object {
            "description": "If \`true\`, values that exceed the data domain are clamped to either the minimum or maximum range value

__Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/config.html#scale-config)'s \`clamp\` (\`true\` by default).",
            "type": "boolean",
          },
          "constant": Object {
            "description": "A constant determining the slope of the symlog function around zero. Only used for \`symlog\` scales.

__Default value:__ \`1\`",
            "type": "number",
          },
          "domain": Object {
            "anyOf": Array [
              Object {
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
              Object {
                "items": Object {
                  "type": "boolean",
                },
                "type": "array",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/DateTime",
                },
                "type": "array",
              },
              Object {
                "enum": Array [
                  "unaggregated",
                ],
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/SelectionExtent",
              },
            ],
            "description": "Customized domain values.

For _quantitative_ fields, \`domain\` can take the form of a two-element array with minimum and maximum values. [Piecewise scales](https://vega.github.io/vega-lite/docs/scale.html#piecewise) can be created by providing a \`domain\` with more than two entries.
If the input field is aggregated, \`domain\` can also be a string value \`\\"unaggregated\\"\`, indicating that the domain should include the raw data values prior to the aggregation.

For _temporal_ fields, \`domain\` can be a two-element array minimum and maximum values, in the form of either timestamps or the [DateTime definition objects](https://vega.github.io/vega-lite/docs/types.html#datetime).

For _ordinal_ and _nominal_ fields, \`domain\` can be an array that lists valid input values.

The \`selection\` property can be used to [interactively determine](https://vega.github.io/vega-lite/docs/selection.html#scale-domains) the scale domain.",
          },
          "exponent": Object {
            "description": "The exponent of the \`pow\` scale.",
            "type": "number",
          },
          "interpolate": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ScaleInterpolate",
              },
              Object {
                "$ref": "#/definitions/ScaleInterpolateParams",
              },
            ],
            "description": "The interpolation method for range values. By default, a general interpolator for numbers, dates, strings and colors (in HCL space) is used. For color ranges, this property allows interpolation in alternative color spaces. Legal values include \`rgb\`, \`hsl\`, \`hsl-long\`, \`lab\`, \`hcl\`, \`hcl-long\`, \`cubehelix\` and \`cubehelix-long\` ('-long' variants use longer paths in polar coordinate spaces). If object-valued, this property accepts an object with a string-valued _type_ property and an optional numeric _gamma_ property applicable to rgb and cubehelix interpolators. For more, see the [d3-interpolate documentation](https://github.com/d3/d3-interpolate).

* __Default value:__ \`hcl\`",
          },
          "nice": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/NiceTime",
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "interval": Object {
                    "type": "string",
                  },
                  "step": Object {
                    "type": "number",
                  },
                },
                "required": Array [
                  "interval",
                  "step",
                ],
                "type": "object",
              },
            ],
            "description": "Extending the domain so that it starts and ends on nice round values. This method typically modifies the scaleâ€™s domain, and may only extend the bounds to the nearest round value. Nicing is useful if the domain is computed from data and may be irregular. For example, for a domain of _[0.201479â€¦, 0.996679â€¦]_, a nice domain might be _[0.2, 1.0]_.

For quantitative scales such as linear, \`nice\` can be either a boolean flag or a number. If \`nice\` is a number, it will represent a desired tick count. This allows greater control over the step size used to extend the bounds, guaranteeing that the returned ticks will exactly cover the domain.

For temporal fields with time and utc scales, the \`nice\` value can be a string indicating the desired time interval. Legal values are \`\\"millisecond\\"\`, \`\\"second\\"\`, \`\\"minute\\"\`, \`\\"hour\\"\`, \`\\"day\\"\`, \`\\"week\\"\`, \`\\"month\\"\`, and \`\\"year\\"\`. Alternatively, \`time\` and \`utc\` scales can accept an object-valued interval specifier of the form \`{\\"interval\\": \\"month\\", \\"step\\": 3}\`, which includes a desired number of interval steps. Here, the domain would snap to quarter (Jan, Apr, Jul, Oct) boundaries.

__Default value:__ \`true\` for unbinned _quantitative_ fields; \`false\` otherwise.",
          },
          "padding": Object {
            "description": "For _[continuous](https://vega.github.io/vega-lite/docs/scale.html#continuous)_ scales, expands the scale domain to accommodate the specified number of pixels on each of the scale range. The scale range must represent pixels for this parameter to function as intended. Padding adjustment is performedÂ priorÂ to all other adjustments, including the effects of theÂ \`zero\`,Â \`nice\`,Â \`domainMin\`, andÂ \`domainMax\`Â properties.

For _[band](https://vega.github.io/vega-lite/docs/scale.html#band)_ scales, shortcut for setting \`paddingInner\` and \`paddingOuter\` to the same value.

For _[point](https://vega.github.io/vega-lite/docs/scale.html#point)_ scales, alias for \`paddingOuter\`.

__Default value:__ For _continuous_ scales, derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s \`continuousPadding\`.
For _band and point_ scales, see \`paddingInner\` and \`paddingOuter\`. By default, Vega-Lite sets padding such that _width/height = number of unique values * step_.",
            "minimum": 0,
            "type": "number",
          },
          "paddingInner": Object {
            "description": "The inner padding (spacing) within each band step of band scales, as a fraction of the step size. This value must lie in the range [0,1].

For point scale, this property is invalid as point scales do not have internal band widths (only step sizes between bands).

__Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s \`bandPaddingInner\`.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "paddingOuter": Object {
            "description": "The outer padding (spacing) at the ends of the range of band and point scales,
as a fraction of the step size. This value must lie in the range [0,1].

__Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s \`bandPaddingOuter\` for band scales and \`pointPadding\` for point scales.
By default, Vega-Lite sets outer padding such that _width/height = number of unique values * step_.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "range": Object {
            "anyOf": Array [
              Object {
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
              Object {
                "$ref": "#/definitions/RangeEnum",
              },
            ],
            "description": "The range of the scale. One of:

- A string indicating a [pre-defined named scale range](https://vega.github.io/vega-lite/docs/scale.html#range-config) (e.g., example, \`\\"symbol\\"\`, or \`\\"diverging\\"\`).

- For [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous), two-element array indicating  minimum and maximum values, or an array with more than two entries for specifying a [piecewise scale](https://vega.github.io/vega-lite/docs/scale.html#piecewise).

- For [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) and [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales, an array of desired output values.

__Notes:__

1) For color scales you can also specify a color [\`scheme\`](https://vega.github.io/vega-lite/docs/scale.html#scheme) instead of \`range\`.

2) Any directly specified \`range\` for \`x\` and \`y\` channels will be ignored. Range can be customized via the view's corresponding [size](https://vega.github.io/vega-lite/docs/size.html) (\`width\` and \`height\`).",
          },
          "round": Object {
            "description": "If \`true\`, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid.

__Default value:__ \`false\`.",
            "type": "boolean",
          },
          "scheme": Object {
            "anyOf": Array [
              Object {
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/SchemeParams",
              },
            ],
            "description": "A string indicating a color [scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme) name (e.g., \`\\"category10\\"\` or \`\\"blues\\"\`) or a [scheme parameter object](https://vega.github.io/vega-lite/docs/scale.html#scheme-params).

Discrete color schemes may be used with [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) or [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales. Continuous color schemes are intended for use with color scales.

For the full list of supported schemes, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.",
          },
          "type": Object {
            "$ref": "#/definitions/ScaleType",
            "description": "The type of scale. Vega-Lite supports the following categories of scale types:

1) [**Continuous Scales**](https://vega.github.io/vega-lite/docs/scale.html#continuous) -- mapping continuous domains to continuous output ranges ([\`\\"linear\\"\`](https://vega.github.io/vega-lite/docs/scale.html#linear), [\`\\"pow\\"\`](https://vega.github.io/vega-lite/docs/scale.html#pow), [\`\\"sqrt\\"\`](https://vega.github.io/vega-lite/docs/scale.html#sqrt), [\`\\"symlog\\"\`](https://vega.github.io/vega-lite/docs/scale.html#symlog), [\`\\"log\\"\`](https://vega.github.io/vega-lite/docs/scale.html#log), [\`\\"time\\"\`](https://vega.github.io/vega-lite/docs/scale.html#time), [\`\\"utc\\"\`](https://vega.github.io/vega-lite/docs/scale.html#utc).

2) [**Discrete Scales**](https://vega.github.io/vega-lite/docs/scale.html#discrete) -- mapping discrete domains to discrete ([\`\\"ordinal\\"\`](https://vega.github.io/vega-lite/docs/scale.html#ordinal)) or continuous ([\`\\"band\\"\`](https://vega.github.io/vega-lite/docs/scale.html#band) and [\`\\"point\\"\`](https://vega.github.io/vega-lite/docs/scale.html#point)) output ranges.

3) [**Discretizing Scales**](https://vega.github.io/vega-lite/docs/scale.html#discretizing) -- mapping continuous domains to discrete output ranges [\`\\"bin-ordinal\\"\`](https://vega.github.io/vega-lite/docs/scale.html#bin-ordinal), [\`\\"quantile\\"\`](https://vega.github.io/vega-lite/docs/scale.html#quantile), [\`\\"quantize\\"\`](https://vega.github.io/vega-lite/docs/scale.html#quantize) and [\`\\"threshold\\"\`](https://vega.github.io/vega-lite/docs/scale.html#threshold).

__Default value:__ please see the [scale type table](https://vega.github.io/vega-lite/docs/scale.html#type).",
          },
          "zero": Object {
            "description": "If \`true\`, ensures that a zero baseline value is included in the scale domain.

__Default value:__ \`true\` for x and y channels if the quantitative field is not binned and no custom \`domain\` is provided; \`false\` otherwise.

__Note:__ Log, time, and utc scales do not support \`zero\`.",
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "ScaleConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "bandPaddingInner": Object {
            "description": "Default inner padding for \`x\` and \`y\` band-ordinal scales.

__Default value:__
- \`barBandPaddingInner\` for bar marks (\`0.1\` by default)
- \`rectBandPaddingInner\` for rect and other marks (\`0\` by default)",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "bandPaddingOuter": Object {
            "description": "Default outer padding for \`x\` and \`y\` band-ordinal scales.

__Default value:__ \`paddingInner/2\` (which makes _width/height = number of unique values * step_)",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "barBandPaddingInner": Object {
            "description": "Default inner padding for \`x\` and \`y\` band-ordinal scales of \`\\"bar\\"\` marks.

__Default value:__ \`0.1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "clamp": Object {
            "description": "If true, values that exceed the data domain are clamped to either the minimum or maximum range value",
            "type": "boolean",
          },
          "continuousPadding": Object {
            "description": "Default padding for continuous scales.

__Default:__ \`5\` for continuous x-scale of a vertical bar and continuous y-scale of a horizontal bar.; \`0\` otherwise.",
            "minimum": 0,
            "type": "number",
          },
          "maxBandSize": Object {
            "description": "The default max value for mapping quantitative fields to bar's size/bandSize.

If undefined (default), we will use the axis's size (width or height) - 1.",
            "minimum": 0,
            "type": "number",
          },
          "maxFontSize": Object {
            "description": "The default max value for mapping quantitative fields to text's size/fontSize.

__Default value:__ \`40\`",
            "minimum": 0,
            "type": "number",
          },
          "maxOpacity": Object {
            "description": "Default max opacity for mapping a field to opacity.

__Default value:__ \`0.8\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "maxSize": Object {
            "description": "Default max value for point size scale.",
            "minimum": 0,
            "type": "number",
          },
          "maxStrokeWidth": Object {
            "description": "Default max strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks.

__Default value:__ \`4\`",
            "minimum": 0,
            "type": "number",
          },
          "minBandSize": Object {
            "description": "The default min value for mapping quantitative fields to bar and tick's size/bandSize scale with zero=false.

__Default value:__ \`2\`",
            "minimum": 0,
            "type": "number",
          },
          "minFontSize": Object {
            "description": "The default min value for mapping quantitative fields to tick's size/fontSize scale with zero=false

__Default value:__ \`8\`",
            "minimum": 0,
            "type": "number",
          },
          "minOpacity": Object {
            "description": "Default minimum opacity for mapping a field to opacity.

__Default value:__ \`0.3\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "minSize": Object {
            "description": "Default minimum value for point size scale with zero=false.

__Default value:__ \`9\`",
            "minimum": 0,
            "type": "number",
          },
          "minStrokeWidth": Object {
            "description": "Default minimum strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks with zero=false.

__Default value:__ \`1\`",
            "minimum": 0,
            "type": "number",
          },
          "pointPadding": Object {
            "description": "Default outer padding for \`x\` and \`y\` point-ordinal scales.

__Default value:__ \`0.5\` (which makes _width/height = number of unique values * step_)",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "quantileCount": Object {
            "description": "Default range cardinality for [\`quantile\`](https://vega.github.io/vega-lite/docs/scale.html#quantile) scale.

__Default value:__ \`4\`",
            "minimum": 0,
            "type": "number",
          },
          "quantizeCount": Object {
            "description": "Default range cardinality for [\`quantize\`](https://vega.github.io/vega-lite/docs/scale.html#quantize) scale.

__Default value:__ \`4\`",
            "minimum": 0,
            "type": "number",
          },
          "rectBandPaddingInner": Object {
            "description": "Default inner padding for \`x\` and \`y\` band-ordinal scales of \`\\"rect\\"\` marks.

__Default value:__ \`0\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "round": Object {
            "description": "If true, rounds numeric output values to integers.
This can be helpful for snapping to the pixel grid.
(Only available for \`x\`, \`y\`, and \`size\` scales.)",
            "type": "boolean",
          },
          "useUnaggregatedDomain": Object {
            "description": "Use the source data range before aggregation as scale domain instead of aggregated data for aggregate axis.

This is equivalent to setting \`domain\` to \`\\"unaggregate\\"\` for aggregated _quantitative_ fields by default.

This property only works with aggregate functions that produce values within the raw data domain (\`\\"mean\\"\`, \`\\"average\\"\`, \`\\"median\\"\`, \`\\"q1\\"\`, \`\\"q3\\"\`, \`\\"min\\"\`, \`\\"max\\"\`). For other aggregations that produce values outside of the raw data domain (e.g. \`\\"count\\"\`, \`\\"sum\\"\`), this property is ignored.

__Default value:__ \`false\`",
            "type": "boolean",
          },
        },
        "type": "object",
      },
      "ScaleInterpolate": Object {
        "enum": Array [
          "rgb",
          "lab",
          "hcl",
          "hsl",
          "hsl-long",
          "hcl-long",
          "cubehelix",
          "cubehelix-long",
        ],
        "type": "string",
      },
      "ScaleInterpolateParams": Object {
        "additionalProperties": false,
        "properties": Object {
          "gamma": Object {
            "type": "number",
          },
          "type": Object {
            "enum": Array [
              "rgb",
              "cubehelix",
              "cubehelix-long",
            ],
            "type": "string",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "ScaleResolveMap": Object {
        "additionalProperties": false,
        "properties": Object {
          "color": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "fill": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "fillOpacity": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "opacity": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "shape": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "size": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "stroke": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "strokeOpacity": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "strokeWidth": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "x": Object {
            "$ref": "#/definitions/ResolveMode",
          },
          "y": Object {
            "$ref": "#/definitions/ResolveMode",
          },
        },
        "type": "object",
      },
      "ScaleType": Object {
        "enum": Array [
          "linear",
          "log",
          "pow",
          "sqrt",
          "symlog",
          "time",
          "utc",
          "quantile",
          "quantize",
          "threshold",
          "bin-ordinal",
          "ordinal",
          "point",
          "band",
        ],
        "type": "string",
      },
      "SchemeParams": Object {
        "additionalProperties": false,
        "properties": Object {
          "count": Object {
            "description": "The number of colors to use in the scheme. This can be useful for scale types such as \`\\"quantize\\"\`, which use the length of the scale range to determine the number of discrete bins for the scale domain.",
            "type": "number",
          },
          "extent": Object {
            "description": "The extent of the color range to use. For example \`[0.2, 1]\` will rescale the color scheme such that color values in the range _[0, 0.2)_ are excluded from the scheme.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "name": Object {
            "description": "A color scheme name for ordinal scales (e.g., \`\\"category10\\"\` or \`\\"blues\\"\`).

For the full list of supported schemes, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.",
            "type": "string",
          },
        },
        "required": Array [
          "name",
        ],
        "type": "object",
      },
      "SecondaryFieldDef": Object {
        "additionalProperties": false,
        "description": "A field definition of a secondary channel that shares a scale with another primary channel. For example, \`x2\`, \`xError\` and \`xError2\` share the same scale with \`x\`.",
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
            "type": "null",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
        },
        "type": "object",
      },
      "SelectionAnd": Object {
        "additionalProperties": false,
        "properties": Object {
          "and": Object {
            "items": Object {
              "$ref": "#/definitions/SelectionOperand",
            },
            "type": "array",
          },
        },
        "required": Array [
          "and",
        ],
        "type": "object",
      },
      "SelectionConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "interval": Object {
            "$ref": "#/definitions/IntervalSelectionConfig",
            "description": "The default definition for an [\`interval\`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All properties and transformations
for an interval selection definition (except \`type\`) may be specified here.

For instance, setting \`interval\` to \`{\\"translate\\": false}\` disables the ability to move
interval selections by default.",
          },
          "multi": Object {
            "$ref": "#/definitions/MultiSelectionConfig",
            "description": "The default definition for a [\`multi\`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All properties and transformations
for a multi selection definition (except \`type\`) may be specified here.

For instance, setting \`multi\` to \`{\\"toggle\\": \\"event.altKey\\"}\` adds additional values to
multi selections when clicking with the alt-key pressed by default.",
          },
          "single": Object {
            "$ref": "#/definitions/SingleSelectionConfig",
            "description": "The default definition for a [\`single\`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All properties and transformations
  for a single selection definition (except \`type\`) may be specified here.

For instance, setting \`single\` to \`{\\"on\\": \\"dblclick\\"}\` populates single selections on double-click by default.",
          },
        },
        "type": "object",
      },
      "SelectionDef": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/SingleSelection",
          },
          Object {
            "$ref": "#/definitions/MultiSelection",
          },
          Object {
            "$ref": "#/definitions/IntervalSelection",
          },
        ],
      },
      "SelectionExtent": Object {
        "anyOf": Array [
          Object {
            "additionalProperties": false,
            "properties": Object {
              "field": Object {
                "$ref": "#/definitions/FieldName",
                "description": "The field name to extract selected values for, when a selection is [projected](https://vega.github.io/vega-lite/docs/project.html)
over multiple fields or encodings.",
              },
              "selection": Object {
                "description": "The name of a selection.",
                "type": "string",
              },
            },
            "required": Array [
              "selection",
            ],
            "type": "object",
          },
          Object {
            "additionalProperties": false,
            "properties": Object {
              "encoding": Object {
                "$ref": "#/definitions/SingleDefUnitChannel",
                "description": "The encoding channel to extract selected values for, when a selection is [projected](https://vega.github.io/vega-lite/docs/project.html)
over multiple fields or encodings.",
              },
              "selection": Object {
                "description": "The name of a selection.",
                "type": "string",
              },
            },
            "required": Array [
              "selection",
            ],
            "type": "object",
          },
        ],
      },
      "SelectionInit": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/Value",
          },
          Object {
            "$ref": "#/definitions/DateTime",
          },
        ],
      },
      "SelectionInitInterval": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/Vector2<boolean>",
          },
          Object {
            "$ref": "#/definitions/Vector2<number>",
          },
          Object {
            "$ref": "#/definitions/Vector2<string>",
          },
          Object {
            "$ref": "#/definitions/Vector2<DateTime>",
          },
        ],
      },
      "SelectionInitIntervalMapping": Object {
        "$ref": "#/definitions/Dict<SelectionInitInterval>",
      },
      "SelectionInitMapping": Object {
        "$ref": "#/definitions/Dict<SelectionInit>",
      },
      "SelectionNot": Object {
        "additionalProperties": false,
        "properties": Object {
          "not": Object {
            "$ref": "#/definitions/SelectionOperand",
          },
        },
        "required": Array [
          "not",
        ],
        "type": "object",
      },
      "SelectionOperand": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/SelectionNot",
          },
          Object {
            "$ref": "#/definitions/SelectionAnd",
          },
          Object {
            "$ref": "#/definitions/SelectionOr",
          },
          Object {
            "type": "string",
          },
        ],
      },
      "SelectionOr": Object {
        "additionalProperties": false,
        "properties": Object {
          "or": Object {
            "items": Object {
              "$ref": "#/definitions/SelectionOperand",
            },
            "type": "array",
          },
        },
        "required": Array [
          "or",
        ],
        "type": "object",
      },
      "SelectionPredicate": Object {
        "additionalProperties": false,
        "properties": Object {
          "selection": Object {
            "$ref": "#/definitions/SelectionOperand",
            "description": "Filter using a selection name.",
          },
        },
        "required": Array [
          "selection",
        ],
        "type": "object",
      },
      "SelectionResolution": Object {
        "enum": Array [
          "global",
          "union",
          "intersect",
        ],
        "type": "string",
      },
      "SequenceGenerator": Object {
        "additionalProperties": false,
        "properties": Object {
          "name": Object {
            "description": "Provide a placeholder name and bind data at runtime.",
            "type": "string",
          },
          "sequence": Object {
            "$ref": "#/definitions/SequenceParams",
            "description": "Generate a sequence of numbers.",
          },
        },
        "required": Array [
          "sequence",
        ],
        "type": "object",
      },
      "SequenceParams": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The name of the generated sequence field.

__Default value:__ \`\\"data\\"\`",
          },
          "start": Object {
            "description": "The starting value of the sequence (inclusive).",
            "type": "number",
          },
          "step": Object {
            "description": "The step value between sequence entries.

__Default value:__ \`1\`",
            "type": "number",
          },
          "stop": Object {
            "description": "The ending value of the sequence (exclusive).",
            "type": "number",
          },
        },
        "required": Array [
          "start",
          "stop",
        ],
        "type": "object",
      },
      "SequentialMultiHue": Object {
        "enum": Array [
          "viridis",
          "inferno",
          "magma",
          "plasma",
          "bluegreen",
          "bluegreen-3",
          "bluegreen-4",
          "bluegreen-5",
          "bluegreen-6",
          "bluegreen-7",
          "bluegreen-8",
          "bluegreen-9",
          "bluepurple",
          "bluepurple-3",
          "bluepurple-4",
          "bluepurple-5",
          "bluepurple-6",
          "bluepurple-7",
          "bluepurple-8",
          "bluepurple-9",
          "greenblue",
          "greenblue-3",
          "greenblue-4",
          "greenblue-5",
          "greenblue-6",
          "greenblue-7",
          "greenblue-8",
          "greenblue-9",
          "orangered",
          "orangered-3",
          "orangered-4",
          "orangered-5",
          "orangered-6",
          "orangered-7",
          "orangered-8",
          "orangered-9",
          "purplebluegreen",
          "purplebluegreen-3",
          "purplebluegreen-4",
          "purplebluegreen-5",
          "purplebluegreen-6",
          "purplebluegreen-7",
          "purplebluegreen-8",
          "purplebluegreen-9",
          "purpleblue",
          "purpleblue-3",
          "purpleblue-4",
          "purpleblue-5",
          "purpleblue-6",
          "purpleblue-7",
          "purpleblue-8",
          "purpleblue-9",
          "purplered",
          "purplered-3",
          "purplered-4",
          "purplered-5",
          "purplered-6",
          "purplered-7",
          "purplered-8",
          "purplered-9",
          "redpurple",
          "redpurple-3",
          "redpurple-4",
          "redpurple-5",
          "redpurple-6",
          "redpurple-7",
          "redpurple-8",
          "redpurple-9",
          "yellowgreenblue",
          "yellowgreenblue-3",
          "yellowgreenblue-4",
          "yellowgreenblue-5",
          "yellowgreenblue-6",
          "yellowgreenblue-7",
          "yellowgreenblue-8",
          "yellowgreenblue-9",
          "yellowgreen",
          "yellowgreen-3",
          "yellowgreen-4",
          "yellowgreen-5",
          "yellowgreen-6",
          "yellowgreen-7",
          "yellowgreen-8",
          "yellowgreen-9",
          "yelloworangebrown",
          "yelloworangebrown-3",
          "yelloworangebrown-4",
          "yelloworangebrown-5",
          "yelloworangebrown-6",
          "yelloworangebrown-7",
          "yelloworangebrown-8",
          "yelloworangebrown-9",
          "yelloworangered",
          "yelloworangered-3",
          "yelloworangered-4",
          "yelloworangered-5",
          "yelloworangered-6",
          "yelloworangered-7",
          "yelloworangered-8",
          "yelloworangered-9",
        ],
        "type": "string",
      },
      "SequentialSingleHue": Object {
        "enum": Array [
          "blues",
          "greens",
          "greys",
          "purples",
          "reds",
          "oranges",
        ],
        "type": "string",
      },
      "ShapeFieldDefWithCondition": Object {
        "$ref": "#/definitions/FieldDefWithCondition<MarkPropFieldDef<TypeForShape>,(string|null)>",
      },
      "ShapeValueDefWithCondition": Object {
        "$ref": "#/definitions/StringValueDefWithCondition<TypeForShape>",
      },
      "SignalRef": Object {
        "additionalProperties": false,
        "properties": Object {
          "signal": Object {
            "type": "string",
          },
        },
        "required": Array [
          "signal",
        ],
        "type": "object",
      },
      "SingleDefUnitChannel": Object {
        "enum": Array [
          "x",
          "y",
          "x2",
          "y2",
          "longitude",
          "latitude",
          "longitude2",
          "latitude2",
          "color",
          "fill",
          "stroke",
          "opacity",
          "fillOpacity",
          "strokeOpacity",
          "strokeWidth",
          "size",
          "shape",
          "key",
          "text",
          "href",
          "url",
        ],
        "type": "string",
      },
      "SingleSelection": Object {
        "additionalProperties": false,
        "properties": Object {
          "bind": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Binding",
              },
              Object {
                "additionalProperties": Object {
                  "$ref": "#/definitions/Binding",
                },
                "type": "object",
              },
              Object {
                "$ref": "#/definitions/LegendBinding",
              },
            ],
            "description": "When set, a selection is populated by input elements (also known as dynamic query widgets)
or by interacting with the corresponding legend. Direct manipulation interaction is disabled by default;
to re-enable it, set the selection's [\`on\`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties) property.

Legend bindings are restricted to selections that only specify a single field or encoding.

Query widget binding takes the form of Vega's [input element binding definition](https://vega.github.io/vega/docs/signals/#bind)
or can be a mapping between projected field/encodings and binding definitions.

__See also:__ [\`bind\`](https://vega.github.io/vega-lite/docs/bind.html) documentation.",
          },
          "clear": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Stream",
              },
              Object {
                "type": "string",
              },
              Object {
                "type": "boolean",
              },
            ],
            "description": "Clears the selection, emptying it of all values. Can be a
[Event Stream](https://vega.github.io/vega/docs/event-streams/) or \`false\` to disable.

__Default value:__ \`dblclick\`.

__See also:__ [\`clear\`](https://vega.github.io/vega-lite/docs/clear.html) documentation.",
          },
          "empty": Object {
            "description": "By default, \`all\` data values are considered to lie within an empty selection.
When set to \`none\`, empty selections contain no data values.",
            "enum": Array [
              "all",
              "none",
            ],
            "type": "string",
          },
          "encodings": Object {
            "description": "An array of encoding channels. The corresponding data field values
must match for a data tuple to fall within the selection.

__See also:__ [\`encodings\`](https://vega.github.io/vega-lite/docs/project.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/SingleDefUnitChannel",
            },
            "type": "array",
          },
          "fields": Object {
            "description": "An array of field names whose values must match for a data tuple to
fall within the selection.

__See also:__ [\`fields\`](https://vega.github.io/vega-lite/docs/project.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "init": Object {
            "$ref": "#/definitions/SelectionInitMapping",
            "description": "Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and initial values.

__See also:__ [\`init\`](https://vega.github.io/vega-lite/docs/init.html) documentation.",
          },
          "nearest": Object {
            "description": "When true, an invisible voronoi diagram is computed to accelerate discrete
selection. The data value _nearest_ the mouse cursor is added to the selection.

__See also:__ [\`nearest\`](https://vega.github.io/vega-lite/docs/nearest.html) documentation.",
            "type": "boolean",
          },
          "on": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Stream",
              },
              Object {
                "type": "string",
              },
            ],
            "description": "A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.
For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).",
          },
          "resolve": Object {
            "$ref": "#/definitions/SelectionResolution",
            "description": "With layered and multi-view displays, a strategy that determines how
selections' data queries are resolved when applied in a filter transform,
conditional encoding rule, or scale domain.

__See also:__ [\`resolve\`](https://vega.github.io/vega-lite/docs/selection-resolve.html) documentation.",
          },
          "type": Object {
            "description": "Determines the default event processing and data query for the selection. Vega-Lite currently supports three selection types:

- \`\\"single\\"\` -- to select a single discrete data value on \`click\`.
- \`\\"multi\\"\` -- to select multiple discrete data value; the first value is selected on \`click\` and additional values toggled on shift-\`click\`.
- \`\\"interval\\"\` -- to select a continuous range of data values on \`drag\`.",
            "enum": Array [
              "single",
            ],
            "type": "string",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "SingleSelectionConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "bind": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Binding",
              },
              Object {
                "additionalProperties": Object {
                  "$ref": "#/definitions/Binding",
                },
                "type": "object",
              },
              Object {
                "$ref": "#/definitions/LegendBinding",
              },
            ],
            "description": "When set, a selection is populated by input elements (also known as dynamic query widgets)
or by interacting with the corresponding legend. Direct manipulation interaction is disabled by default;
to re-enable it, set the selection's [\`on\`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties) property.

Legend bindings are restricted to selections that only specify a single field or encoding.

Query widget binding takes the form of Vega's [input element binding definition](https://vega.github.io/vega/docs/signals/#bind)
or can be a mapping between projected field/encodings and binding definitions.

__See also:__ [\`bind\`](https://vega.github.io/vega-lite/docs/bind.html) documentation.",
          },
          "clear": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Stream",
              },
              Object {
                "type": "string",
              },
              Object {
                "type": "boolean",
              },
            ],
            "description": "Clears the selection, emptying it of all values. Can be a
[Event Stream](https://vega.github.io/vega/docs/event-streams/) or \`false\` to disable.

__Default value:__ \`dblclick\`.

__See also:__ [\`clear\`](https://vega.github.io/vega-lite/docs/clear.html) documentation.",
          },
          "empty": Object {
            "description": "By default, \`all\` data values are considered to lie within an empty selection.
When set to \`none\`, empty selections contain no data values.",
            "enum": Array [
              "all",
              "none",
            ],
            "type": "string",
          },
          "encodings": Object {
            "description": "An array of encoding channels. The corresponding data field values
must match for a data tuple to fall within the selection.

__See also:__ [\`encodings\`](https://vega.github.io/vega-lite/docs/project.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/SingleDefUnitChannel",
            },
            "type": "array",
          },
          "fields": Object {
            "description": "An array of field names whose values must match for a data tuple to
fall within the selection.

__See also:__ [\`fields\`](https://vega.github.io/vega-lite/docs/project.html) documentation.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "init": Object {
            "$ref": "#/definitions/SelectionInitMapping",
            "description": "Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and initial values.

__See also:__ [\`init\`](https://vega.github.io/vega-lite/docs/init.html) documentation.",
          },
          "nearest": Object {
            "description": "When true, an invisible voronoi diagram is computed to accelerate discrete
selection. The data value _nearest_ the mouse cursor is added to the selection.

__See also:__ [\`nearest\`](https://vega.github.io/vega-lite/docs/nearest.html) documentation.",
            "type": "boolean",
          },
          "on": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Stream",
              },
              Object {
                "type": "string",
              },
            ],
            "description": "A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.
For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).",
          },
          "resolve": Object {
            "$ref": "#/definitions/SelectionResolution",
            "description": "With layered and multi-view displays, a strategy that determines how
selections' data queries are resolved when applied in a filter transform,
conditional encoding rule, or scale domain.

__See also:__ [\`resolve\`](https://vega.github.io/vega-lite/docs/selection-resolve.html) documentation.",
          },
        },
        "type": "object",
      },
      "SingleTimeUnit": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/LocalSingleTimeUnit",
          },
          Object {
            "$ref": "#/definitions/UtcSingleTimeUnit",
          },
        ],
      },
      "Sort": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/SortArray",
          },
          Object {
            "$ref": "#/definitions/AllSortString",
          },
          Object {
            "$ref": "#/definitions/EncodingSortField",
          },
          Object {
            "$ref": "#/definitions/SortByEncoding",
          },
          Object {
            "type": "null",
          },
        ],
      },
      "SortArray": Object {
        "anyOf": Array [
          Object {
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          Object {
            "items": Object {
              "type": "string",
            },
            "type": "array",
          },
          Object {
            "items": Object {
              "type": "boolean",
            },
            "type": "array",
          },
          Object {
            "items": Object {
              "$ref": "#/definitions/DateTime",
            },
            "type": "array",
          },
        ],
      },
      "SortByChannel": Object {
        "enum": Array [
          "x",
          "y",
          "color",
          "fill",
          "stroke",
          "strokeWidth",
          "size",
          "shape",
          "fillOpacity",
          "strokeOpacity",
          "opacity",
          "text",
        ],
        "type": "string",
      },
      "SortByChannelDesc": Object {
        "enum": Array [
          "-x",
          "-y",
          "-color",
          "-fill",
          "-stroke",
          "-strokeWidth",
          "-size",
          "-shape",
          "-fillOpacity",
          "-strokeOpacity",
          "-opacity",
          "-text",
        ],
        "type": "string",
      },
      "SortByEncoding": Object {
        "additionalProperties": false,
        "properties": Object {
          "encoding": Object {
            "$ref": "#/definitions/SortByChannel",
            "description": "The [encoding channel](https://vega.github.io/vega-lite/docs/encoding.html#channels) to sort by (e.g., \`\\"x\\"\`, \`\\"y\\"\`)",
          },
          "order": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SortOrder",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The sort order. One of \`\\"ascending\\"\` (default), \`\\"descending\\"\`, or \`null\` (no not sort).",
          },
        },
        "required": Array [
          "encoding",
        ],
        "type": "object",
      },
      "SortField": Object {
        "additionalProperties": false,
        "description": "A sort definition for transform",
        "properties": Object {
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The name of the field to sort.",
          },
          "order": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/SortOrder",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Whether to sort the field in ascending or descending order. One of \`\\"ascending\\"\` (default), \`\\"descending\\"\`, or \`null\` (no not sort).",
          },
        },
        "required": Array [
          "field",
        ],
        "type": "object",
      },
      "SortOrder": Object {
        "enum": Array [
          "ascending",
          "descending",
        ],
        "type": "string",
      },
      "Spec": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/FacetedUnitSpec",
          },
          Object {
            "$ref": "#/definitions/LayerSpec",
          },
          Object {
            "$ref": "#/definitions/FacetSpec",
          },
          Object {
            "$ref": "#/definitions/RepeatSpec",
          },
          Object {
            "$ref": "#/definitions/ConcatSpec",
          },
          Object {
            "$ref": "#/definitions/VConcatSpec",
          },
          Object {
            "$ref": "#/definitions/HConcatSpec",
          },
        ],
        "description": "Any specification in Vega-Lite.",
      },
      "SphereGenerator": Object {
        "additionalProperties": false,
        "properties": Object {
          "name": Object {
            "description": "Provide a placeholder name and bind data at runtime.",
            "type": "string",
          },
          "sphere": Object {
            "anyOf": Array [
              Object {
                "enum": Array [
                  true,
                ],
                "type": "boolean",
              },
              Object {
                "additionalProperties": false,
                "type": "object",
              },
            ],
            "description": "Generate sphere GeoJSON data for the full globe.",
          },
        },
        "required": Array [
          "sphere",
        ],
        "type": "object",
      },
      "StackOffset": Object {
        "enum": Array [
          "zero",
          "center",
          "normalize",
        ],
        "type": "string",
      },
      "StackTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FieldName",
              },
              Object {
                "items": Array [
                  Object {
                    "$ref": "#/definitions/FieldName",
                  },
                  Object {
                    "$ref": "#/definitions/FieldName",
                  },
                ],
                "maxItems": 2,
                "minItems": 2,
                "type": "array",
              },
            ],
            "description": "Output field names. This can be either a string or an array of strings with two elements denoting the name for the fields for stack start and stack end respectively.
If a single string(e.g., \`\\"val\\"\`) is provided, the end field will be \`\\"val_end\\"\`.",
          },
          "groupby": Object {
            "description": "The data fields to group by.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "offset": Object {
            "description": "Mode for stacking marks. One of \`\\"zero\\"\` (default), \`\\"center\\"\`, or \`\\"normalize\\"\`.
The \`\\"zero\\"\` offset will stack starting at \`0\`. The \`\\"center\\"\` offset will center the stacks. The \`\\"normalize\\"\` offset will compute percentage values for each stack point, with output values in the range \`[0,1]\`.

__Default value:__ \`\\"zero\\"\`",
            "enum": Array [
              "zero",
              "center",
              "normalize",
            ],
            "type": "string",
          },
          "sort": Object {
            "description": "Field that determines the order of leaves in the stacked charts.",
            "items": Object {
              "$ref": "#/definitions/SortField",
            },
            "type": "array",
          },
          "stack": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The field which is stacked.",
          },
        },
        "required": Array [
          "stack",
          "groupby",
          "as",
        ],
        "type": "object",
      },
      "StandardType": Object {
        "enum": Array [
          "quantitative",
          "ordinal",
          "temporal",
          "nominal",
        ],
        "type": "string",
      },
      "Step": Object {
        "additionalProperties": false,
        "properties": Object {
          "step": Object {
            "description": "The size (width/height) per discrete step.",
            "type": "number",
          },
        },
        "required": Array [
          "step",
        ],
        "type": "object",
      },
      "Stream": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/EventStream",
          },
          Object {
            "$ref": "#/definitions/DerivedStream",
          },
          Object {
            "$ref": "#/definitions/MergedStream",
          },
        ],
      },
      "StringFieldDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "enum": Array [
                  "binned",
                ],
                "type": "string",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "format": Object {
            "description": "The text formatting pattern for labels of guides (axes, legends, headers) and text marks.

- If the format type is \`\\"number\\"\` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
- If the format type is \`\\"time\\"\` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).

See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.

__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.",
            "type": "string",
          },
          "formatType": Object {
            "description": "The format type for labels (\`\\"number\\"\` or \`\\"time\\"\`).

__Default value:__
- \`\\"time\\"\` for temporal fields and ordinal and nomimal fields with \`timeUnit\`.
- \`\\"number\\"\` for quantitative fields as well as ordinal and nomimal fields without \`timeUnit\`.",
            "enum": Array [
              "number",
              "time",
            ],
            "type": "string",
          },
          "labelExpr": Object {
            "description": "[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels text.

__Note:__ The label text and value can be assessed via the \`label\` and \`value\` properties of the axis's backing \`datum\` object.",
            "type": "string",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "StringFieldDefWithCondition": Object {
        "$ref": "#/definitions/FieldDefWithCondition<StringFieldDef,string>",
      },
      "StringValueDefWithCondition": Object {
        "$ref": "#/definitions/ValueDefWithCondition<MarkPropFieldDef,(string|null)>",
      },
      "StringValueDefWithCondition<TypeForShape>": Object {
        "$ref": "#/definitions/ValueDefWithCondition<MarkPropFieldDef<TypeForShape>,(string|null)>",
      },
      "StrokeCap": Object {
        "enum": Array [
          "butt",
          "round",
          "square",
        ],
        "type": "string",
      },
      "StrokeJoin": Object {
        "enum": Array [
          "miter",
          "round",
          "bevel",
        ],
        "type": "string",
      },
      "StyleConfigIndex": Object {
        "additionalProperties": Object {
          "$ref": "#/definitions/BaseMarkConfig",
        },
        "type": "object",
      },
      "SymbolShape": Object {
        "type": "string",
      },
      "Text": Object {
        "anyOf": Array [
          Object {
            "type": "string",
          },
          Object {
            "items": Object {
              "type": "string",
            },
            "type": "array",
          },
        ],
      },
      "TextBaseline": Object {
        "anyOf": Array [
          Object {
            "enum": Array [
              "alphabetic",
            ],
            "type": "string",
          },
          Object {
            "$ref": "#/definitions/Baseline",
          },
        ],
      },
      "TextFieldDefWithCondition": Object {
        "$ref": "#/definitions/FieldDefWithCondition<StringFieldDef,Text>",
      },
      "TextValueDefWithCondition": Object {
        "$ref": "#/definitions/ValueDefWithCondition<StringFieldDef,Text>",
      },
      "TickConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "align": Object {
            "$ref": "#/definitions/Align",
            "description": "The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"left\\"\`, \`\\"right\\"\`, \`\\"center\\"\`.",
          },
          "angle": Object {
            "description": "The rotation angle of the text, in degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
          },
          "aspect": Object {
            "description": "Whether to keep aspect ratio of image marks.",
            "type": "boolean",
          },
          "bandSize": Object {
            "description": "The width of the ticks.

__Default value:__  3/4 of step (width step for horizontal ticks and height step for vertical ticks).",
            "minimum": 0,
            "type": "number",
          },
          "baseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "The vertical alignment of the text or ranged marks (area, bar, image, rect, rule). One of \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`.

__Default value:__ \`\\"middle\\"\`",
          },
          "color": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
            ],
            "description": "Default color.

__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> \`\\"#4682b4\\"\`

__Note:__
- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
- The \`fill\` and \`stroke\` properties have higher precedence than \`color\` and will override \`color\`.",
          },
          "cornerRadius": Object {
            "description": "The radius in pixels of rounded rectangle corners.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomLeft": Object {
            "description": "The radius in pixels of rounded rectangle bottom left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusBottomRight": Object {
            "description": "The radius in pixels of rounded rectangle bottom right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopLeft": Object {
            "description": "The radius in pixels of rounded rectangle top right corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cornerRadiusTopRight": Object {
            "description": "The radius in pixels of rounded rectangle top left corner.

__Default value:__ \`0\`",
            "type": "number",
          },
          "cursor": Object {
            "$ref": "#/definitions/Cursor",
            "description": "The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.",
          },
          "dir": Object {
            "$ref": "#/definitions/Dir",
            "description": "The direction of the text. One of \`\\"ltr\\"\` (left-to-right) or \`\\"rtl\\"\` (right-to-left). This property determines on which side is truncated in response to the limit parameter.

__Default value:__ \`\\"ltr\\"\`",
          },
          "dx": Object {
            "description": "The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "dy": Object {
            "description": "The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",
            "type": "number",
          },
          "ellipsis": Object {
            "description": "The ellipsis string for text truncated in response to the limit parameter.

__Default value:__ \`\\"â€¦\\"\`",
            "type": "string",
          },
          "fill": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Fill Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "fillOpacity": Object {
            "description": "The fill opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "filled": Object {
            "description": "Whether the mark's color should be used as fill color instead of stroke color.

__Default value:__ \`false\` for all \`point\`, \`line\`, and \`rule\` marks as well as \`geoshape\` marks for [\`graticule\`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, \`true\`.

__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",
            "type": "boolean",
          },
          "font": Object {
            "description": "The typeface to set the text in (e.g., \`\\"Helvetica Neue\\"\`).",
            "type": "string",
          },
          "fontSize": Object {
            "description": "The font size, in pixels.",
            "type": "number",
          },
          "fontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "The font style (e.g., \`\\"italic\\"\`).",
          },
          "fontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "The font weight.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "height": Object {
            "description": "Height of the marks.",
            "type": "number",
          },
          "href": Object {
            "description": "A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",
            "format": "uri",
            "type": "string",
          },
          "interpolate": Object {
            "$ref": "#/definitions/Interpolate",
            "description": "The line interpolation method to use for line and area marks. One of the following:
- \`\\"linear\\"\`: piecewise linear segments, as in a polyline.
- \`\\"linear-closed\\"\`: close the linear segments to form a polygon.
- \`\\"step\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"step-before\\"\`: alternate between vertical and horizontal segments, as in a step function.
- \`\\"step-after\\"\`: alternate between horizontal and vertical segments, as in a step function.
- \`\\"basis\\"\`: a B-spline, with control point duplication on the ends.
- \`\\"basis-open\\"\`: an open B-spline; may not intersect the start or end.
- \`\\"basis-closed\\"\`: a closed B-spline, as in a loop.
- \`\\"cardinal\\"\`: a Cardinal spline, with control point duplication on the ends.
- \`\\"cardinal-open\\"\`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
- \`\\"cardinal-closed\\"\`: a closed Cardinal spline, as in a loop.
- \`\\"bundle\\"\`: equivalent to basis, except the tension parameter is used to straighten the spline.
- \`\\"monotone\\"\`: cubic interpolation that preserves monotonicity in y.",
          },
          "invalid": Object {
            "description": "Defines how Vega-Lite should handle marks for invalid values (\`null\` and \`NaN\`).
- If set to \`\\"filter\\"\` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
- If \`null\`, all data items are included. In this case, invalid values will be interpreted as zeroes.",
            "enum": Array [
              "filter",
              null,
            ],
            "type": Array [
              "string",
              "null",
            ],
          },
          "limit": Object {
            "description": "The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.

__Default value:__ \`0\`, indicating no limit",
            "type": "number",
          },
          "lineBreak": Object {
            "description": "A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property will be ignored if the text property is array-valued.",
            "type": "string",
          },
          "lineHeight": Object {
            "description": "The height, in pixels, of each line of text in a multi-line text mark.",
            "type": "number",
          },
          "opacity": Object {
            "description": "The overall opacity (value between [0,1]).

__Default value:__ \`0.7\` for non-aggregate plots with \`point\`, \`tick\`, \`circle\`, or \`square\` marks or layered \`bar\` charts and \`1\` otherwise.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "order": Object {
            "description": "For line and trail marks, this \`order\` property can be set to \`null\` or \`false\` to make the lines use the original order in the data sources.",
            "type": Array [
              "null",
              "boolean",
            ],
          },
          "orient": Object {
            "$ref": "#/definitions/Orientation",
            "description": "The orientation of a non-stacked bar, tick, area, and line charts.
The value is either horizontal (default) or vertical.
- For bar, rule and tick, this determines whether the size of the bar and tick
should be applied to x or y dimension.
- For area, this property determines the orient property of the Vega output.
- For line and trail marks, this property determines the sort order of the points in the line
if \`config.sortLineBy\` is not specified.
For stacked charts, this is always determined by the orientation of the stack;
therefore explicitly specified value will be ignored.",
          },
          "radius": Object {
            "description": "Polar coordinate radial offset, in pixels, of the text label from the origin determined by the \`x\` and \`y\` properties.",
            "minimum": 0,
            "type": "number",
          },
          "shape": Object {
            "description": "Shape of the point marks. Supported values include:
- plotting shapes: \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"cross\\"\`, \`\\"diamond\\"\`, \`\\"triangle-up\\"\`, \`\\"triangle-down\\"\`, \`\\"triangle-right\\"\`, or \`\\"triangle-left\\"\`.
- the line symbol \`\\"stroke\\"\`
- centered directional shapes \`\\"arrow\\"\`, \`\\"wedge\\"\`, or \`\\"triangle\\"\`
- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)

__Default value:__ \`\\"circle\\"\`",
            "type": "string",
          },
          "size": Object {
            "description": "Default size for marks.
- For \`point\`/\`circle\`/\`square\`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.
- For \`bar\`, this represents the band size of the bar, in pixels.
- For \`text\`, this represents the font size, in pixels.

__Default value:__
- \`30\` for point, circle, square marks; width/height's \`step\`
- \`2\` for bar marks with discrete dimensions;
- \`5\` for bar marks with continuous dimensions;
- \`11\` for text marks.",
            "minimum": 0,
            "type": "number",
          },
          "stroke": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "Default Stroke Color. This has higher precedence than \`config.color\`.

__Default value:__ (None)",
          },
          "strokeCap": Object {
            "$ref": "#/definitions/StrokeCap",
            "description": "The stroke cap for line ending style. One of \`\\"butt\\"\`, \`\\"round\\"\`, or \`\\"square\\"\`.

__Default value:__ \`\\"square\\"\`",
          },
          "strokeDash": Object {
            "description": "An array of alternating stroke, space lengths for creating dashed or dotted lines.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "strokeDashOffset": Object {
            "description": "The offset (in pixels) into which to begin drawing with the stroke dash array.",
            "type": "number",
          },
          "strokeJoin": Object {
            "$ref": "#/definitions/StrokeJoin",
            "description": "The stroke line join method. One of \`\\"miter\\"\`, \`\\"round\\"\` or \`\\"bevel\\"\`.

__Default value:__ \`\\"miter\\"\`",
          },
          "strokeMiterLimit": Object {
            "description": "The miter limit at which to bevel a line join.",
            "type": "number",
          },
          "strokeOpacity": Object {
            "description": "The stroke opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "strokeWidth": Object {
            "description": "The stroke width, in pixels.",
            "minimum": 0,
            "type": "number",
          },
          "tension": Object {
            "description": "Depending on the interpolation type, sets the tension parameter (for line and area marks).",
            "type": "number",
          },
          "text": Object {
            "$ref": "#/definitions/Text",
            "description": "Placeholder text if the \`text\` channel is not specified",
          },
          "theta": Object {
            "description": "Polar coordinate angle, in radians, of the text label from the origin determined by the \`x\` and \`y\` properties. Values for \`theta\` follow the same convention of \`arc\` mark \`startAngle\` and \`endAngle\` properties: angles are measured in radians, with \`0\` indicating \\"north\\".",
            "type": "number",
          },
          "thickness": Object {
            "description": "Thickness of the tick mark.

__Default value:__  \`1\`",
            "minimum": 0,
            "type": "number",
          },
          "timeUnitBand": Object {
            "description": "Default relative band size for a time unit. If set to \`1\`, the bandwidth of the marks will be equal to the time unit band step.
If set to \`0.5\`, bandwidth of the marks will be half of the time unit band step.",
            "type": "number",
          },
          "timeUnitBandPosition": Object {
            "description": "Default relative band position for a time unit. If set to \`0\`, the marks will be positioned at the beginning of the time unit band step.
If set to \`0.5\`, the marks will be positioned in the middle of the time unit band step.",
            "type": "number",
          },
          "tooltip": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Value",
              },
              Object {
                "$ref": "#/definitions/TooltipContent",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.

- If \`tooltip\` is \`true\` or \`{\\"content\\": \\"encoding\\"}\`, then all fields from \`encoding\` will be used.
- If \`tooltip\` is \`{\\"content\\": \\"data\\"}\`, then all fields that appear in the highlighted data point will be used.
- If set to \`null\` or \`false\`, then no tooltip will be used.

See the [\`tooltip\`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.

__Default value:__ \`null\`",
          },
          "width": Object {
            "description": "Width of the marks.",
            "type": "number",
          },
          "x": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X coordinates of the marks, or width of horizontal \`\\"bar\\"\` and \`\\"area\\"\` without specified \`x2\` or \`width\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "x2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "X2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"width\\"\` for the width of the plot.",
          },
          "y": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y coordinates of the marks, or height of vertical \`\\"bar\\"\` and \`\\"area\\"\` without specified \`y2\` or \`height\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
          "y2": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "Y2 coordinates for ranged \`\\"area\\"\`, \`\\"bar\\"\`, \`\\"rect\\"\`, and  \`\\"rule\\"\`.

The \`value\` of this channel can be a number or a string \`\\"height\\"\` for the height of the plot.",
          },
        },
        "type": "object",
      },
      "TimeInterval": Object {
        "enum": Array [
          "millisecond",
          "second",
          "minute",
          "hour",
          "day",
          "week",
          "month",
          "year",
        ],
        "type": "string",
      },
      "TimeUnit": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/SingleTimeUnit",
          },
          Object {
            "$ref": "#/definitions/MultiTimeUnit",
          },
        ],
      },
      "TimeUnitTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The output field to write the timeUnit value.",
          },
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field to apply time unit.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "The timeUnit.",
          },
        },
        "required": Array [
          "timeUnit",
          "field",
          "as",
        ],
        "type": "object",
      },
      "TitleAnchor": Object {
        "enum": Array [
          null,
          "start",
          "middle",
          "end",
        ],
        "type": Array [
          "null",
          "string",
        ],
      },
      "TitleConfig": Object {
        "$ref": "#/definitions/BaseTitleNoValueRefs",
      },
      "TitleFrame": Object {
        "enum": Array [
          "bounds",
          "group",
        ],
        "type": "string",
      },
      "TitleOrient": Object {
        "enum": Array [
          "none",
          "left",
          "right",
          "top",
          "bottom",
        ],
        "type": "string",
      },
      "TitleParams": Object {
        "additionalProperties": false,
        "properties": Object {
          "align": Object {
            "$ref": "#/definitions/Align",
            "description": "Horizontal text alignment for title text. One of \`\\"left\\"\`, \`\\"center\\"\`, or \`\\"right\\"\`.",
          },
          "anchor": Object {
            "$ref": "#/definitions/TitleAnchor",
            "description": "The anchor position for placing the title. One of \`\\"start\\"\`, \`\\"middle\\"\`, or \`\\"end\\"\`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.

__Default value:__ \`\\"middle\\"\` for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views.
\`\\"start\\"\` for other composite views.

__Note:__ [For now](https://github.com/vega/vega-lite/issues/2875), \`anchor\` is only customizable only for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views. For other composite views, \`anchor\` is always \`\\"start\\"\`.",
          },
          "angle": Object {
            "description": "Angle in degrees of title and subtitle text.",
            "type": "number",
          },
          "baseline": Object {
            "$ref": "#/definitions/TextBaseline",
            "description": "Vertical text baseline for title and subtitle text. One of \`\\"top\\"\`, \`\\"middle\\"\`, \`\\"bottom\\"\`, or \`\\"alphabetic\\"\`.",
          },
          "color": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Text color for title text.",
          },
          "dx": Object {
            "description": "Delta offset for title and subtitle text x-coordinate.",
            "type": "number",
          },
          "dy": Object {
            "description": "Delta offset for title and subtitle text y-coordinate.",
            "type": "number",
          },
          "font": Object {
            "description": "Font name for title text.",
            "type": "string",
          },
          "fontSize": Object {
            "description": "Font size in pixels for title text.",
            "minimum": 0,
            "type": "number",
          },
          "fontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "Font style for title text.",
          },
          "fontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "Font weight for title text.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "frame": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/TitleFrame",
              },
              Object {
                "type": "string",
              },
            ],
            "description": "The reference frame for the anchor position, one of \`\\"bounds\\"\` (to anchor relative to the full bounding box) or \`\\"group\\"\` (to anchor relative to the group width or height).",
          },
          "limit": Object {
            "description": "The maximum allowed length in pixels of title and subtitle text.",
            "minimum": 0,
            "type": "number",
          },
          "lineHeight": Object {
            "description": "Line height in pixels for multi-line title text.",
            "type": "number",
          },
          "offset": Object {
            "description": "The orthogonal offset in pixels by which to displace the title group from its position along the edge of the chart.",
            "type": "number",
          },
          "orient": Object {
            "$ref": "#/definitions/TitleOrient",
            "description": "Default title orientation (\`\\"top\\"\`, \`\\"bottom\\"\`, \`\\"left\\"\`, or \`\\"right\\"\`)",
          },
          "style": Object {
            "anyOf": Array [
              Object {
                "type": "string",
              },
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
            ],
            "description": "A [mark style property](https://vega.github.io/vega-lite/docs/config.html#style) to apply to the title text mark.

__Default value:__ \`\\"group-title\\"\`.",
          },
          "subtitle": Object {
            "$ref": "#/definitions/Text",
            "description": "The subtitle Text.",
          },
          "subtitleColor": Object {
            "anyOf": Array [
              Object {
                "type": "null",
              },
              Object {
                "$ref": "#/definitions/Color",
              },
            ],
            "description": "Text color for subtitle text.",
          },
          "subtitleFont": Object {
            "description": "Font name for subtitle text.",
            "type": "string",
          },
          "subtitleFontSize": Object {
            "description": "Font size in pixels for subtitle text.",
            "minimum": 0,
            "type": "number",
          },
          "subtitleFontStyle": Object {
            "$ref": "#/definitions/FontStyle",
            "description": "Font style for subtitle text.",
          },
          "subtitleFontWeight": Object {
            "$ref": "#/definitions/FontWeight",
            "description": "Font weight for subtitle text.
This can be either a string (e.g \`\\"bold\\"\`, \`\\"normal\\"\`) or a number (\`100\`, \`200\`, \`300\`, ..., \`900\` where \`\\"normal\\"\` = \`400\` and \`\\"bold\\"\` = \`700\`).",
          },
          "subtitleLineHeight": Object {
            "description": "Line height in pixels for multi-line subtitle text.",
            "type": "number",
          },
          "subtitlePadding": Object {
            "description": "The padding in pixels between title and subtitle text.",
            "type": "number",
          },
          "text": Object {
            "$ref": "#/definitions/Text",
            "description": "The title text.",
          },
          "zindex": Object {
            "description": "The integer z-index indicating the layering of the title group relative to other axis, mark and legend groups.

__Default value:__ \`0\`.",
            "minimum": 0,
            "type": "number",
          },
        },
        "required": Array [
          "text",
        ],
        "type": "object",
      },
      "TooltipContent": Object {
        "additionalProperties": false,
        "properties": Object {
          "content": Object {
            "enum": Array [
              "encoding",
              "data",
            ],
            "type": "string",
          },
        },
        "required": Array [
          "content",
        ],
        "type": "object",
      },
      "TopLevelConcatSpec": Object {
        "additionalProperties": false,
        "properties": Object {
          "$schema": Object {
            "description": "URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use \`https://vega.github.io/schema/vega-lite/v4.json\`. Setting the \`$schema\` property allows automatic validation and autocomplete in editors that support JSON schema.",
            "format": "uri",
            "type": "string",
          },
          "align": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LayoutAlign",
              },
              Object {
                "$ref": "#/definitions/RowCol<LayoutAlign>",
              },
            ],
            "description": "The alignment to apply to grid rows and columns.
The supported string values are \`\\"all\\"\`, \`\\"each\\"\`, and \`\\"none\\"\`.

- For \`\\"none\\"\`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
- For \`\\"each\\"\`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
- For \`\\"all\\"\`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.

Alternatively, an object value of the form \`{\\"row\\": string, \\"column\\": string}\` can be used to supply different alignments for rows and columns.

__Default value:__ \`\\"all\\"\`.",
          },
          "autosize": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/AutosizeType",
              },
              Object {
                "$ref": "#/definitions/AutoSizeParams",
              },
            ],
            "description": "How the visualization size should be determined. If a string, should be one of \`\\"pad\\"\`, \`\\"fit\\"\` or \`\\"none\\"\`.
Object values can additionally specify parameters for content sizing and automatic resizing.

__Default value__: \`pad\`",
          },
          "background": Object {
            "$ref": "#/definitions/Color",
            "description": "CSS color property to use as the background of the entire view.

__Default value:__ \`\\"white\\"\`",
          },
          "bounds": Object {
            "description": "The bounds calculation method to use for determining the extent of a sub-plot. One of \`full\` (the default) or \`flush\`.

- If set to \`full\`, the entire calculated bounds (including axes, title, and legend) will be used.
- If set to \`flush\`, only the specified width and height values for the sub-view will be used. The \`flush\` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.

__Default value:__ \`\\"full\\"\`",
            "enum": Array [
              "full",
              "flush",
            ],
            "type": "string",
          },
          "center": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/RowCol<boolean>",
              },
            ],
            "description": "Boolean flag indicating if subviews should be centered relative to their respective rows or columns.

An object value of the form \`{\\"row\\": boolean, \\"column\\": boolean}\` can be used to supply different centering values for rows and columns.

__Default value:__ \`false\`",
          },
          "columns": Object {
            "description": "The number of columns to include in the view composition layout.

__Default value__: \`undefined\` -- An infinite number of columns (a single row) will be assumed. This is equivalent to
\`hconcat\` (for \`concat\`) and to using the \`column\` channel (for \`facet\` and \`repeat\`).

__Note__:

1) This property is only for:
- the general (wrappable) \`concat\` operator (not \`hconcat\`/\`vconcat\`)
- the \`facet\` and \`repeat\` operator with one field/repetition definition (without row/column nesting)

2) Setting the \`columns\` to \`1\` is equivalent to \`vconcat\` (for \`concat\`) and to using the \`row\` channel (for \`facet\` and \`repeat\`).",
            "type": "number",
          },
          "concat": Object {
            "description": "A list of views to be concatenated.",
            "items": Object {
              "$ref": "#/definitions/Spec",
            },
            "type": "array",
          },
          "config": Object {
            "$ref": "#/definitions/Config",
            "description": "Vega-Lite configuration object. This property can only be defined at the top-level of a specification.",
          },
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "datasets": Object {
            "$ref": "#/definitions/Datasets",
            "description": "A global data store for named datasets. This is a mapping from names to inline datasets.
This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a \`data\` property.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "padding": Object {
            "$ref": "#/definitions/Padding",
            "description": "The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides.
If an object, the value should have the format \`{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}\` to specify padding for each side of the visualization.

__Default value__: \`5\`",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "spacing": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/RowCol<number>",
              },
            ],
            "description": "The spacing in pixels between sub-views of the composition operator.
An object of the form \`{\\"row\\": number, \\"column\\": number}\` can be used to set
different spacing values for rows and columns.

__Default value__: Depends on \`\\"spacing\\"\` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (\`20\` by default)",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
          "usermeta": Object {
            "description": "Optional metadata that will be passed to Vega.
This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",
            "type": "object",
          },
        },
        "required": Array [
          "concat",
        ],
        "type": "object",
      },
      "TopLevelFacetSpec": Object {
        "additionalProperties": false,
        "properties": Object {
          "$schema": Object {
            "description": "URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use \`https://vega.github.io/schema/vega-lite/v4.json\`. Setting the \`$schema\` property allows automatic validation and autocomplete in editors that support JSON schema.",
            "format": "uri",
            "type": "string",
          },
          "align": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LayoutAlign",
              },
              Object {
                "$ref": "#/definitions/RowCol<LayoutAlign>",
              },
            ],
            "description": "The alignment to apply to grid rows and columns.
The supported string values are \`\\"all\\"\`, \`\\"each\\"\`, and \`\\"none\\"\`.

- For \`\\"none\\"\`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
- For \`\\"each\\"\`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
- For \`\\"all\\"\`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.

Alternatively, an object value of the form \`{\\"row\\": string, \\"column\\": string}\` can be used to supply different alignments for rows and columns.

__Default value:__ \`\\"all\\"\`.",
          },
          "autosize": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/AutosizeType",
              },
              Object {
                "$ref": "#/definitions/AutoSizeParams",
              },
            ],
            "description": "How the visualization size should be determined. If a string, should be one of \`\\"pad\\"\`, \`\\"fit\\"\` or \`\\"none\\"\`.
Object values can additionally specify parameters for content sizing and automatic resizing.

__Default value__: \`pad\`",
          },
          "background": Object {
            "$ref": "#/definitions/Color",
            "description": "CSS color property to use as the background of the entire view.

__Default value:__ \`\\"white\\"\`",
          },
          "bounds": Object {
            "description": "The bounds calculation method to use for determining the extent of a sub-plot. One of \`full\` (the default) or \`flush\`.

- If set to \`full\`, the entire calculated bounds (including axes, title, and legend) will be used.
- If set to \`flush\`, only the specified width and height values for the sub-view will be used. The \`flush\` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.

__Default value:__ \`\\"full\\"\`",
            "enum": Array [
              "full",
              "flush",
            ],
            "type": "string",
          },
          "center": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/RowCol<boolean>",
              },
            ],
            "description": "Boolean flag indicating if subviews should be centered relative to their respective rows or columns.

An object value of the form \`{\\"row\\": boolean, \\"column\\": boolean}\` can be used to supply different centering values for rows and columns.

__Default value:__ \`false\`",
          },
          "columns": Object {
            "description": "The number of columns to include in the view composition layout.

__Default value__: \`undefined\` -- An infinite number of columns (a single row) will be assumed. This is equivalent to
\`hconcat\` (for \`concat\`) and to using the \`column\` channel (for \`facet\` and \`repeat\`).

__Note__:

1) This property is only for:
- the general (wrappable) \`concat\` operator (not \`hconcat\`/\`vconcat\`)
- the \`facet\` and \`repeat\` operator with one field/repetition definition (without row/column nesting)

2) Setting the \`columns\` to \`1\` is equivalent to \`vconcat\` (for \`concat\`) and to using the \`row\` channel (for \`facet\` and \`repeat\`).",
            "type": "number",
          },
          "config": Object {
            "$ref": "#/definitions/Config",
            "description": "Vega-Lite configuration object. This property can only be defined at the top-level of a specification.",
          },
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "datasets": Object {
            "$ref": "#/definitions/Datasets",
            "description": "A global data store for named datasets. This is a mapping from names to inline datasets.
This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a \`data\` property.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "facet": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/FacetFieldDef",
              },
              Object {
                "$ref": "#/definitions/FacetMapping",
              },
            ],
            "description": "Definition for how to facet the data. One of:
1) [a field definition for faceting the plot by one field](https://vega.github.io/vega-lite/docs/facet.html#field-def)
2) [An object that maps \`row\` and \`column\` channels to their field definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "padding": Object {
            "$ref": "#/definitions/Padding",
            "description": "The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides.
If an object, the value should have the format \`{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}\` to specify padding for each side of the visualization.

__Default value__: \`5\`",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "spacing": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/RowCol<number>",
              },
            ],
            "description": "The spacing in pixels between sub-views of the composition operator.
An object of the form \`{\\"row\\": number, \\"column\\": number}\` can be used to set
different spacing values for rows and columns.

__Default value__: Depends on \`\\"spacing\\"\` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (\`20\` by default)",
          },
          "spec": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LayerSpec",
              },
              Object {
                "$ref": "#/definitions/FacetedUnitSpec",
              },
            ],
            "description": "A specification of the view that gets faceted.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
          "usermeta": Object {
            "description": "Optional metadata that will be passed to Vega.
This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",
            "type": "object",
          },
        },
        "required": Array [
          "data",
          "facet",
          "spec",
        ],
        "type": "object",
      },
      "TopLevelHConcatSpec": Object {
        "additionalProperties": false,
        "properties": Object {
          "$schema": Object {
            "description": "URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use \`https://vega.github.io/schema/vega-lite/v4.json\`. Setting the \`$schema\` property allows automatic validation and autocomplete in editors that support JSON schema.",
            "format": "uri",
            "type": "string",
          },
          "autosize": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/AutosizeType",
              },
              Object {
                "$ref": "#/definitions/AutoSizeParams",
              },
            ],
            "description": "How the visualization size should be determined. If a string, should be one of \`\\"pad\\"\`, \`\\"fit\\"\` or \`\\"none\\"\`.
Object values can additionally specify parameters for content sizing and automatic resizing.

__Default value__: \`pad\`",
          },
          "background": Object {
            "$ref": "#/definitions/Color",
            "description": "CSS color property to use as the background of the entire view.

__Default value:__ \`\\"white\\"\`",
          },
          "bounds": Object {
            "description": "The bounds calculation method to use for determining the extent of a sub-plot. One of \`full\` (the default) or \`flush\`.

- If set to \`full\`, the entire calculated bounds (including axes, title, and legend) will be used.
- If set to \`flush\`, only the specified width and height values for the sub-view will be used. The \`flush\` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.

__Default value:__ \`\\"full\\"\`",
            "enum": Array [
              "full",
              "flush",
            ],
            "type": "string",
          },
          "center": Object {
            "description": "Boolean flag indicating if subviews should be centered relative to their respective rows or columns.

__Default value:__ \`false\`",
            "type": "boolean",
          },
          "config": Object {
            "$ref": "#/definitions/Config",
            "description": "Vega-Lite configuration object. This property can only be defined at the top-level of a specification.",
          },
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "datasets": Object {
            "$ref": "#/definitions/Datasets",
            "description": "A global data store for named datasets. This is a mapping from names to inline datasets.
This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a \`data\` property.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "hconcat": Object {
            "description": "A list of views to be concatenated and put into a row.",
            "items": Object {
              "$ref": "#/definitions/Spec",
            },
            "type": "array",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "padding": Object {
            "$ref": "#/definitions/Padding",
            "description": "The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides.
If an object, the value should have the format \`{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}\` to specify padding for each side of the visualization.

__Default value__: \`5\`",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "spacing": Object {
            "description": "The spacing in pixels between sub-views of the concat operator.

__Default value__: \`10\`",
            "type": "number",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
          "usermeta": Object {
            "description": "Optional metadata that will be passed to Vega.
This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",
            "type": "object",
          },
        },
        "required": Array [
          "hconcat",
        ],
        "type": "object",
      },
      "TopLevelLayerSpec": Object {
        "additionalProperties": false,
        "properties": Object {
          "$schema": Object {
            "description": "URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use \`https://vega.github.io/schema/vega-lite/v4.json\`. Setting the \`$schema\` property allows automatic validation and autocomplete in editors that support JSON schema.",
            "format": "uri",
            "type": "string",
          },
          "autosize": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/AutosizeType",
              },
              Object {
                "$ref": "#/definitions/AutoSizeParams",
              },
            ],
            "description": "How the visualization size should be determined. If a string, should be one of \`\\"pad\\"\`, \`\\"fit\\"\` or \`\\"none\\"\`.
Object values can additionally specify parameters for content sizing and automatic resizing.

__Default value__: \`pad\`",
          },
          "background": Object {
            "$ref": "#/definitions/Color",
            "description": "CSS color property to use as the background of the entire view.

__Default value:__ \`\\"white\\"\`",
          },
          "config": Object {
            "$ref": "#/definitions/Config",
            "description": "Vega-Lite configuration object. This property can only be defined at the top-level of a specification.",
          },
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "datasets": Object {
            "$ref": "#/definitions/Datasets",
            "description": "A global data store for named datasets. This is a mapping from names to inline datasets.
This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a \`data\` property.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "encoding": Object {
            "$ref": "#/definitions/Encoding",
            "description": "A shared key-value mapping between encoding channels and definition of fields in the underlying layers.",
          },
          "height": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "container",
                ],
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/Step",
              },
            ],
            "description": "The height of a visualization.

- For a plot with a continuous y-field, height should be a number.
- For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of \`{step: number}\` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
- To enable responsive sizing on height, it should be set to \`\\"container\\"\`.

__Default value:__ Based on \`config.view.continuousHeight\` for a plot with a continuous y-field and \`config.view.discreteHeight\` otherwise.

__Note:__ For plots with [\`row\` and \`column\` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the \`\\"container\\"\` option cannot be used.

__See also:__ [\`height\`](https://vega.github.io/vega-lite/docs/size.html) documentation.",
          },
          "layer": Object {
            "description": "Layer or single view specifications to be layered.

__Note__: Specifications inside \`layer\` cannot use \`row\` and \`column\` channels as layering facet specifications is not allowed. Instead, use the [facet operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a facet.",
            "items": Object {
              "anyOf": Array [
                Object {
                  "$ref": "#/definitions/LayerSpec",
                },
                Object {
                  "$ref": "#/definitions/UnitSpec",
                },
              ],
            },
            "type": "array",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "padding": Object {
            "$ref": "#/definitions/Padding",
            "description": "The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides.
If an object, the value should have the format \`{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}\` to specify padding for each side of the visualization.

__Default value__: \`5\`",
          },
          "projection": Object {
            "$ref": "#/definitions/Projection",
            "description": "An object defining properties of the geographic projection shared by underlying layers.",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
          "usermeta": Object {
            "description": "Optional metadata that will be passed to Vega.
This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",
            "type": "object",
          },
          "view": Object {
            "$ref": "#/definitions/ViewBackground",
            "description": "An object defining the view background's fill and stroke.

__Default value:__ none (transparent)",
          },
          "width": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "container",
                ],
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/Step",
              },
            ],
            "description": "The width of a visualization.

- For a plot with a continuous x-field, width should be a number.
- For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of \`{step: number}\` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
- To enable responsive sizing on width, it should be set to \`\\"container\\"\`.

__Default value:__
Based on \`config.view.continuousWidth\` for a plot with a continuous x-field and \`config.view.discreteWidth\` otherwise.

__Note:__ For plots with [\`row\` and \`column\` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the \`\\"container\\"\` option cannot be used.

__See also:__ [\`width\`](https://vega.github.io/vega-lite/docs/size.html) documentation.",
          },
        },
        "required": Array [
          "layer",
        ],
        "type": "object",
      },
      "TopLevelRepeatSpec": Object {
        "additionalProperties": false,
        "properties": Object {
          "$schema": Object {
            "description": "URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use \`https://vega.github.io/schema/vega-lite/v4.json\`. Setting the \`$schema\` property allows automatic validation and autocomplete in editors that support JSON schema.",
            "format": "uri",
            "type": "string",
          },
          "align": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/LayoutAlign",
              },
              Object {
                "$ref": "#/definitions/RowCol<LayoutAlign>",
              },
            ],
            "description": "The alignment to apply to grid rows and columns.
The supported string values are \`\\"all\\"\`, \`\\"each\\"\`, and \`\\"none\\"\`.

- For \`\\"none\\"\`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
- For \`\\"each\\"\`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
- For \`\\"all\\"\`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.

Alternatively, an object value of the form \`{\\"row\\": string, \\"column\\": string}\` can be used to supply different alignments for rows and columns.

__Default value:__ \`\\"all\\"\`.",
          },
          "autosize": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/AutosizeType",
              },
              Object {
                "$ref": "#/definitions/AutoSizeParams",
              },
            ],
            "description": "How the visualization size should be determined. If a string, should be one of \`\\"pad\\"\`, \`\\"fit\\"\` or \`\\"none\\"\`.
Object values can additionally specify parameters for content sizing and automatic resizing.

__Default value__: \`pad\`",
          },
          "background": Object {
            "$ref": "#/definitions/Color",
            "description": "CSS color property to use as the background of the entire view.

__Default value:__ \`\\"white\\"\`",
          },
          "bounds": Object {
            "description": "The bounds calculation method to use for determining the extent of a sub-plot. One of \`full\` (the default) or \`flush\`.

- If set to \`full\`, the entire calculated bounds (including axes, title, and legend) will be used.
- If set to \`flush\`, only the specified width and height values for the sub-view will be used. The \`flush\` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.

__Default value:__ \`\\"full\\"\`",
            "enum": Array [
              "full",
              "flush",
            ],
            "type": "string",
          },
          "center": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/RowCol<boolean>",
              },
            ],
            "description": "Boolean flag indicating if subviews should be centered relative to their respective rows or columns.

An object value of the form \`{\\"row\\": boolean, \\"column\\": boolean}\` can be used to supply different centering values for rows and columns.

__Default value:__ \`false\`",
          },
          "columns": Object {
            "description": "The number of columns to include in the view composition layout.

__Default value__: \`undefined\` -- An infinite number of columns (a single row) will be assumed. This is equivalent to
\`hconcat\` (for \`concat\`) and to using the \`column\` channel (for \`facet\` and \`repeat\`).

__Note__:

1) This property is only for:
- the general (wrappable) \`concat\` operator (not \`hconcat\`/\`vconcat\`)
- the \`facet\` and \`repeat\` operator with one field/repetition definition (without row/column nesting)

2) Setting the \`columns\` to \`1\` is equivalent to \`vconcat\` (for \`concat\`) and to using the \`row\` channel (for \`facet\` and \`repeat\`).",
            "type": "number",
          },
          "config": Object {
            "$ref": "#/definitions/Config",
            "description": "Vega-Lite configuration object. This property can only be defined at the top-level of a specification.",
          },
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "datasets": Object {
            "$ref": "#/definitions/Datasets",
            "description": "A global data store for named datasets. This is a mapping from names to inline datasets.
This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a \`data\` property.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "padding": Object {
            "$ref": "#/definitions/Padding",
            "description": "The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides.
If an object, the value should have the format \`{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}\` to specify padding for each side of the visualization.

__Default value__: \`5\`",
          },
          "repeat": Object {
            "anyOf": Array [
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
              Object {
                "$ref": "#/definitions/RepeatMapping",
              },
            ],
            "description": "Definition for fields to be repeated. One of:
1) An array of fields to be repeated. If \`\\"repeat\\"\` is an array, the field can be referred using \`{\\"repeat\\": \\"repeat\\"}\`
2) An object that mapped \`\\"row\\"\` and/or \`\\"column\\"\` to the listed of fields to be repeated along the particular orientations. The objects \`{\\"repeat\\": \\"row\\"}\` and \`{\\"repeat\\": \\"column\\"}\` can be used to refer to the repeated field respectively.",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "spacing": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "$ref": "#/definitions/RowCol<number>",
              },
            ],
            "description": "The spacing in pixels between sub-views of the composition operator.
An object of the form \`{\\"row\\": number, \\"column\\": number}\` can be used to set
different spacing values for rows and columns.

__Default value__: Depends on \`\\"spacing\\"\` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (\`20\` by default)",
          },
          "spec": Object {
            "$ref": "#/definitions/Spec",
            "description": "A specification of the view that gets repeated.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
          "usermeta": Object {
            "description": "Optional metadata that will be passed to Vega.
This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",
            "type": "object",
          },
        },
        "required": Array [
          "repeat",
          "spec",
        ],
        "type": "object",
      },
      "TopLevelSpec": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/TopLevelUnitSpec",
          },
          Object {
            "$ref": "#/definitions/TopLevelFacetSpec",
          },
          Object {
            "$ref": "#/definitions/TopLevelLayerSpec",
          },
          Object {
            "$ref": "#/definitions/TopLevelRepeatSpec",
          },
          Object {
            "$ref": "#/definitions/TopLevelConcatSpec",
          },
          Object {
            "$ref": "#/definitions/TopLevelVConcatSpec",
          },
          Object {
            "$ref": "#/definitions/TopLevelHConcatSpec",
          },
        ],
        "description": "A Vega-Lite top-level specification.
This is the root class for all Vega-Lite specifications.
(The json schema is generated from this type.)",
      },
      "TopLevelUnitSpec": Object {
        "additionalProperties": false,
        "properties": Object {
          "$schema": Object {
            "description": "URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use \`https://vega.github.io/schema/vega-lite/v4.json\`. Setting the \`$schema\` property allows automatic validation and autocomplete in editors that support JSON schema.",
            "format": "uri",
            "type": "string",
          },
          "autosize": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/AutosizeType",
              },
              Object {
                "$ref": "#/definitions/AutoSizeParams",
              },
            ],
            "description": "How the visualization size should be determined. If a string, should be one of \`\\"pad\\"\`, \`\\"fit\\"\` or \`\\"none\\"\`.
Object values can additionally specify parameters for content sizing and automatic resizing.

__Default value__: \`pad\`",
          },
          "background": Object {
            "$ref": "#/definitions/Color",
            "description": "CSS color property to use as the background of the entire view.

__Default value:__ \`\\"white\\"\`",
          },
          "bounds": Object {
            "description": "The bounds calculation method to use for determining the extent of a sub-plot. One of \`full\` (the default) or \`flush\`.

- If set to \`full\`, the entire calculated bounds (including axes, title, and legend) will be used.
- If set to \`flush\`, only the specified width and height values for the sub-view will be used. The \`flush\` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.

__Default value:__ \`\\"full\\"\`",
            "enum": Array [
              "full",
              "flush",
            ],
            "type": "string",
          },
          "config": Object {
            "$ref": "#/definitions/Config",
            "description": "Vega-Lite configuration object. This property can only be defined at the top-level of a specification.",
          },
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "datasets": Object {
            "$ref": "#/definitions/Datasets",
            "description": "A global data store for named datasets. This is a mapping from names to inline datasets.
This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a \`data\` property.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "encoding": Object {
            "$ref": "#/definitions/FacetedEncoding",
            "description": "A key-value mapping between encoding channels and definition of fields.",
          },
          "height": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "container",
                ],
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/Step",
              },
            ],
            "description": "The height of a visualization.

- For a plot with a continuous y-field, height should be a number.
- For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of \`{step: number}\` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
- To enable responsive sizing on height, it should be set to \`\\"container\\"\`.

__Default value:__ Based on \`config.view.continuousHeight\` for a plot with a continuous y-field and \`config.view.discreteHeight\` otherwise.

__Note:__ For plots with [\`row\` and \`column\` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the \`\\"container\\"\` option cannot be used.

__See also:__ [\`height\`](https://vega.github.io/vega-lite/docs/size.html) documentation.",
          },
          "mark": Object {
            "$ref": "#/definitions/AnyMark",
            "description": "A string describing the mark type (one of \`\\"bar\\"\`, \`\\"circle\\"\`, \`\\"square\\"\`, \`\\"tick\\"\`, \`\\"line\\"\`,
\`\\"area\\"\`, \`\\"point\\"\`, \`\\"rule\\"\`, \`\\"geoshape\\"\`, and \`\\"text\\"\`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "padding": Object {
            "$ref": "#/definitions/Padding",
            "description": "The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides.
If an object, the value should have the format \`{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}\` to specify padding for each side of the visualization.

__Default value__: \`5\`",
          },
          "projection": Object {
            "$ref": "#/definitions/Projection",
            "description": "An object defining properties of geographic projection, which will be applied to \`shape\` path for \`\\"geoshape\\"\` marks
and to \`latitude\` and \`\\"longitude\\"\` channels for other marks.",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "selection": Object {
            "additionalProperties": Object {
              "$ref": "#/definitions/SelectionDef",
            },
            "description": "A key-value mapping between selection names and definitions.",
            "type": "object",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
          "usermeta": Object {
            "description": "Optional metadata that will be passed to Vega.
This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",
            "type": "object",
          },
          "view": Object {
            "$ref": "#/definitions/ViewBackground",
            "description": "An object defining the view background's fill and stroke.

__Default value:__ none (transparent)",
          },
          "width": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "container",
                ],
                "type": "string",
              },
              Object {
                "$ref": "#/definitions/Step",
              },
            ],
            "description": "The width of a visualization.

- For a plot with a continuous x-field, width should be a number.
- For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of \`{step: number}\` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
- To enable responsive sizing on width, it should be set to \`\\"container\\"\`.

__Default value:__
Based on \`config.view.continuousWidth\` for a plot with a continuous x-field and \`config.view.discreteWidth\` otherwise.

__Note:__ For plots with [\`row\` and \`column\` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the \`\\"container\\"\` option cannot be used.

__See also:__ [\`width\`](https://vega.github.io/vega-lite/docs/size.html) documentation.",
          },
        },
        "required": Array [
          "data",
          "mark",
        ],
        "type": "object",
      },
      "TopLevelVConcatSpec": Object {
        "additionalProperties": false,
        "properties": Object {
          "$schema": Object {
            "description": "URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use \`https://vega.github.io/schema/vega-lite/v4.json\`. Setting the \`$schema\` property allows automatic validation and autocomplete in editors that support JSON schema.",
            "format": "uri",
            "type": "string",
          },
          "autosize": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/AutosizeType",
              },
              Object {
                "$ref": "#/definitions/AutoSizeParams",
              },
            ],
            "description": "How the visualization size should be determined. If a string, should be one of \`\\"pad\\"\`, \`\\"fit\\"\` or \`\\"none\\"\`.
Object values can additionally specify parameters for content sizing and automatic resizing.

__Default value__: \`pad\`",
          },
          "background": Object {
            "$ref": "#/definitions/Color",
            "description": "CSS color property to use as the background of the entire view.

__Default value:__ \`\\"white\\"\`",
          },
          "bounds": Object {
            "description": "The bounds calculation method to use for determining the extent of a sub-plot. One of \`full\` (the default) or \`flush\`.

- If set to \`full\`, the entire calculated bounds (including axes, title, and legend) will be used.
- If set to \`flush\`, only the specified width and height values for the sub-view will be used. The \`flush\` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.

__Default value:__ \`\\"full\\"\`",
            "enum": Array [
              "full",
              "flush",
            ],
            "type": "string",
          },
          "center": Object {
            "description": "Boolean flag indicating if subviews should be centered relative to their respective rows or columns.

__Default value:__ \`false\`",
            "type": "boolean",
          },
          "config": Object {
            "$ref": "#/definitions/Config",
            "description": "Vega-Lite configuration object. This property can only be defined at the top-level of a specification.",
          },
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "datasets": Object {
            "$ref": "#/definitions/Datasets",
            "description": "A global data store for named datasets. This is a mapping from names to inline datasets.
This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a \`data\` property.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "padding": Object {
            "$ref": "#/definitions/Padding",
            "description": "The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides.
If an object, the value should have the format \`{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}\` to specify padding for each side of the visualization.

__Default value__: \`5\`",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "spacing": Object {
            "description": "The spacing in pixels between sub-views of the concat operator.

__Default value__: \`10\`",
            "type": "number",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
          "usermeta": Object {
            "description": "Optional metadata that will be passed to Vega.
This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",
            "type": "object",
          },
          "vconcat": Object {
            "description": "A list of views to be concatenated and put into a column.",
            "items": Object {
              "$ref": "#/definitions/Spec",
            },
            "type": "array",
          },
        },
        "required": Array [
          "vconcat",
        ],
        "type": "object",
      },
      "TopoDataFormat": Object {
        "additionalProperties": false,
        "properties": Object {
          "feature": Object {
            "description": "The name of the TopoJSON object set to convert to a GeoJSON feature collection.
For example, in a map of the world, there may be an object set named \`\\"countries\\"\`.
Using the feature property, we can extract this set and generate a GeoJSON feature object for each country.",
            "type": "string",
          },
          "mesh": Object {
            "description": "The name of the TopoJSON object set to convert to mesh.
Similar to the \`feature\` option, \`mesh\` extracts a named TopoJSON object set.
  Unlike the \`feature\` option, the corresponding geo data is returned as a single, unified mesh instance, not as individual GeoJSON features.
Extracting a mesh is useful for more efficiently drawing borders or other geographic elements that you do not need to associate with specific regions such as individual countries, states or counties.",
            "type": "string",
          },
          "parse": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Parse",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "If set to \`null\`, disable type inference based on the spec and only use type inference based on the data.
Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of \`\\"number\\"\`, \`\\"boolean\\"\`, \`\\"date\\"\`, or null (do not parse the field)).
For example, \`\\"parse\\": {\\"modified_on\\": \\"date\\"}\` parses the \`modified_on\` field in each input record a Date value.

For \`\\"date\\"\`, we parse data based using Javascript's [\`Date.parse()\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
For Specific date formats can be provided (e.g., \`{foo: \\"date:'%m%d%Y'\\"}\`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., \`{foo: \\"utc:'%m%d%Y'\\"}\`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)",
          },
          "type": Object {
            "description": "Type of input data: \`\\"json\\"\`, \`\\"csv\\"\`, \`\\"tsv\\"\`, \`\\"dsv\\"\`.

__Default value:__  The default format type is determined by the extension of the file URL.
If no extension is detected, \`\\"json\\"\` will be used by default.",
            "enum": Array [
              "topojson",
            ],
            "type": "string",
          },
        },
        "type": "object",
      },
      "Transform": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/AggregateTransform",
          },
          Object {
            "$ref": "#/definitions/BinTransform",
          },
          Object {
            "$ref": "#/definitions/CalculateTransform",
          },
          Object {
            "$ref": "#/definitions/DensityTransform",
          },
          Object {
            "$ref": "#/definitions/FilterTransform",
          },
          Object {
            "$ref": "#/definitions/FlattenTransform",
          },
          Object {
            "$ref": "#/definitions/FoldTransform",
          },
          Object {
            "$ref": "#/definitions/ImputeTransform",
          },
          Object {
            "$ref": "#/definitions/JoinAggregateTransform",
          },
          Object {
            "$ref": "#/definitions/LoessTransform",
          },
          Object {
            "$ref": "#/definitions/LookupTransform",
          },
          Object {
            "$ref": "#/definitions/QuantileTransform",
          },
          Object {
            "$ref": "#/definitions/RegressionTransform",
          },
          Object {
            "$ref": "#/definitions/TimeUnitTransform",
          },
          Object {
            "$ref": "#/definitions/SampleTransform",
          },
          Object {
            "$ref": "#/definitions/StackTransform",
          },
          Object {
            "$ref": "#/definitions/WindowTransform",
          },
          Object {
            "$ref": "#/definitions/PivotTransform",
          },
        ],
      },
      "TypeForShape": Object {
        "enum": Array [
          "nominal",
          "ordinal",
          "geojson",
        ],
        "type": "string",
      },
      "TypedFieldDef": Object {
        "additionalProperties": false,
        "description": "Definition object for a data field, its type and transformation of an encoding channel.",
        "properties": Object {
          "aggregate": Object {
            "$ref": "#/definitions/Aggregate",
            "description": "Aggregation function for the field
(e.g., \`\\"mean\\"\`, \`\\"sum\\"\`, \`\\"median\\"\`, \`\\"min\\"\`, \`\\"max\\"\`, \`\\"count\\"\`).

__Default value:__ \`undefined\` (None)

__See also:__ [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.",
          },
          "bin": Object {
            "anyOf": Array [
              Object {
                "type": "boolean",
              },
              Object {
                "$ref": "#/definitions/BinParams",
              },
              Object {
                "enum": Array [
                  "binned",
                ],
                "type": "string",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A flag for binning a \`quantitative\` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for \`x\` or \`y\` channel are binned before they are imported into Vega-Lite (\`\\"binned\\"\`).

- If \`true\`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.

- If \`\\"binned\\"\`, this indicates that the data for the \`x\` (or \`y\`) channel are already binned. You can map the bin-start field to \`x\` (or \`y\`) and the bin-end field to \`x2\` (or \`y2\`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [\`tickMinStep\`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.

__Default value:__ \`false\`

__See also:__ [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html) documentation.",
          },
          "field": Object {
            "$ref": "#/definitions/Field",
            "description": "__Required.__ A string defining the name of the field from which to pull a data value
or an object defining iterated values from the [\`repeat\`](https://vega.github.io/vega-lite/docs/repeat.html) operator.

__See also:__ [\`field\`](https://vega.github.io/vega-lite/docs/field.html) documentation.

__Notes:__
1)  Dots (\`.\`) and brackets (\`[\` and \`]\`) can be used to access nested objects (e.g., \`\\"field\\": \\"foo.bar\\"\` and \`\\"field\\": \\"foo['bar']\\"\`).
If field names contain dots or brackets but are not nested, you can use \`\\\\\\\\\` to escape dots and brackets (e.g., \`\\"a\\\\\\\\.b\\"\` and \`\\"a\\\\\\\\[0\\\\\\\\]\\"\`).
See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).
2) \`field\` is not required if \`aggregate\` is \`count\`.",
          },
          "timeUnit": Object {
            "$ref": "#/definitions/TimeUnit",
            "description": "Time unit (e.g., \`year\`, \`yearmonth\`, \`month\`, \`hours\`) for a temporal field.
or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).

__Default value:__ \`undefined\` (None)

__See also:__ [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A title for the field. If \`null\`, the title will be removed.

__Default value:__  derived from the field's name and transformation function (\`aggregate\`, \`bin\` and \`timeUnit\`). If the field has an aggregate function, the function is displayed as part of the title (e.g., \`\\"Sum of Profit\\"\`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \`\\"Profit (binned)\\"\`, \`\\"Transaction Date (year-month)\\"\`). Otherwise, the title is simply the field name.

__Notes__:

1) You can customize the default field title format by providing the [\`fieldTitle\`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [\`fieldTitle\` function via the \`compile\` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).

2) If both field definition's \`title\` and axis, header, or legend \`title\` are defined, axis/header/legend title will be used.",
          },
          "type": Object {
            "$ref": "#/definitions/StandardType",
            "description": "The encoded field's type of measurement (\`\\"quantitative\\"\`, \`\\"temporal\\"\`, \`\\"ordinal\\"\`, or \`\\"nominal\\"\`).
It can also be a \`\\"geojson\\"\` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).


__Note:__

- Data values for a temporal field can be either a date-time string (e.g., \`\\"2015-03-07 12:32:17\\"\`, \`\\"17:01\\"\`, \`\\"2015-03-16\\"\`. \`\\"2015\\"\`) or a timestamp number (e.g., \`1552199579097\`).
- Data \`type\` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
- When using with [\`bin\`](https://vega.github.io/vega-lite/docs/bin.html), the \`type\` property can be either \`\\"quantitative\\"\` (for using a linear bin scale) or [\`\\"ordinal\\"\` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`timeUnit\`](https://vega.github.io/vega-lite/docs/timeunit.html), the \`type\` property can be either \`\\"temporal\\"\` (for using a temporal scale) or [\`\\"ordinal\\"\` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
- When using with [\`aggregate\`](https://vega.github.io/vega-lite/docs/aggregate.html), the \`type\` property refers to the post-aggregation data type. For example, we can calculate count \`distinct\` of a categorical field \`\\"cat\\"\` using \`{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\", \\"type\\": \\"quantitative\\"}\`. The \`\\"type\\"\` of the aggregate output is \`\\"quantitative\\"\`.
- Secondary channels (e.g., \`x2\`, \`y2\`, \`xError\`, \`yError\`) do not have \`type\` as they have exactly the same type as their primary channels (e.g., \`x\`, \`y\`).

__See also:__ [\`type\`](https://vega.github.io/vega-lite/docs/type.html) documentation.",
          },
        },
        "required": Array [
          "type",
        ],
        "type": "object",
      },
      "UnitSpec": Object {
        "$ref": "#/definitions/GenericUnitSpec<Encoding,AnyMark>",
        "description": "A unit specification, which can contain either [primitive marks or composite marks](https://vega.github.io/vega-lite/docs/mark.html#types).",
      },
      "UrlData": Object {
        "additionalProperties": false,
        "properties": Object {
          "format": Object {
            "$ref": "#/definitions/DataFormat",
            "description": "An object that specifies the format for parsing the data.",
          },
          "name": Object {
            "description": "Provide a placeholder name and bind data at runtime.",
            "type": "string",
          },
          "url": Object {
            "description": "An URL from which to load the data set. Use the \`format.type\` property
to ensure the loaded data is correctly parsed.",
            "type": "string",
          },
        },
        "required": Array [
          "url",
        ],
        "type": "object",
      },
      "UtcMultiTimeUnit": Object {
        "enum": Array [
          "utcyearquarter",
          "utcyearquartermonth",
          "utcyearmonth",
          "utcyearmonthdate",
          "utcyearmonthdatehours",
          "utcyearmonthdatehoursminutes",
          "utcyearmonthdatehoursminutesseconds",
          "utcquartermonth",
          "utcmonthdate",
          "utcmonthdatehours",
          "utchoursminutes",
          "utchoursminutesseconds",
          "utcminutesseconds",
          "utcsecondsmilliseconds",
        ],
        "type": "string",
      },
      "UtcSingleTimeUnit": Object {
        "enum": Array [
          "utcyear",
          "utcquarter",
          "utcmonth",
          "utcday",
          "utcdate",
          "utchours",
          "utcminutes",
          "utcseconds",
          "utcmilliseconds",
        ],
        "type": "string",
      },
      "VConcatSpec": Object {
        "additionalProperties": false,
        "description": "Base interface for a vertical concatenation specification.",
        "properties": Object {
          "bounds": Object {
            "description": "The bounds calculation method to use for determining the extent of a sub-plot. One of \`full\` (the default) or \`flush\`.

- If set to \`full\`, the entire calculated bounds (including axes, title, and legend) will be used.
- If set to \`flush\`, only the specified width and height values for the sub-view will be used. The \`flush\` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.

__Default value:__ \`\\"full\\"\`",
            "enum": Array [
              "full",
              "flush",
            ],
            "type": "string",
          },
          "center": Object {
            "description": "Boolean flag indicating if subviews should be centered relative to their respective rows or columns.

__Default value:__ \`false\`",
            "type": "boolean",
          },
          "data": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Data",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "An object describing the data source. Set to \`null\` to ignore the parent's data source. If no data is set, it is derived from the parent.",
          },
          "description": Object {
            "description": "Description of this mark for commenting purpose.",
            "type": "string",
          },
          "name": Object {
            "description": "Name of the visualization for later reference.",
            "type": "string",
          },
          "resolve": Object {
            "$ref": "#/definitions/Resolve",
            "description": "Scale, axis, and legend resolutions for view composition specifications.",
          },
          "spacing": Object {
            "description": "The spacing in pixels between sub-views of the concat operator.

__Default value__: \`10\`",
            "type": "number",
          },
          "title": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Text",
              },
              Object {
                "$ref": "#/definitions/TitleParams",
              },
            ],
            "description": "Title for the plot.",
          },
          "transform": Object {
            "description": "An array of data transformations such as filter and new field calculation.",
            "items": Object {
              "$ref": "#/definitions/Transform",
            },
            "type": "array",
          },
          "vconcat": Object {
            "description": "A list of views to be concatenated and put into a column.",
            "items": Object {
              "$ref": "#/definitions/Spec",
            },
            "type": "array",
          },
        },
        "required": Array [
          "vconcat",
        ],
        "type": "object",
      },
      "Value": Object {
        "type": Array [
          "number",
          "string",
          "boolean",
          "null",
        ],
      },
      "ValueDefWithCondition<MarkPropFieldDef,(Gradient|string|null)>": Object {
        "additionalProperties": false,
        "minProperties": 1,
        "properties": Object {
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalMarkPropFieldDef",
              },
              Object {
                "$ref": "#/definitions/ConditionalValueDef<(Gradient|string|null)>",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalValueDef<(Gradient|string|null)>",
                },
                "type": "array",
              },
            ],
            "description": "A field definition or one or more value definition(s) with a selection predicate.",
          },
          "value": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Gradient",
              },
              Object {
                "type": "string",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "type": "object",
      },
      "ValueDefWithCondition<MarkPropFieldDef,(string|null)>": Object {
        "additionalProperties": false,
        "minProperties": 1,
        "properties": Object {
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalMarkPropFieldDef",
              },
              Object {
                "$ref": "#/definitions/ConditionalStringValueDef",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalStringValueDef",
                },
                "type": "array",
              },
            ],
            "description": "A field definition or one or more value definition(s) with a selection predicate.",
          },
          "value": Object {
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
            "type": Array [
              "string",
              "null",
            ],
          },
        },
        "type": "object",
      },
      "ValueDefWithCondition<MarkPropFieldDef,number>": Object {
        "additionalProperties": false,
        "minProperties": 1,
        "properties": Object {
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalMarkPropFieldDef",
              },
              Object {
                "$ref": "#/definitions/ConditionalNumberValueDef",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalNumberValueDef",
                },
                "type": "array",
              },
            ],
            "description": "A field definition or one or more value definition(s) with a selection predicate.",
          },
          "value": Object {
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
            "type": "number",
          },
        },
        "type": "object",
      },
      "ValueDefWithCondition<MarkPropFieldDef<TypeForShape>,(string|null)>": Object {
        "additionalProperties": false,
        "minProperties": 1,
        "properties": Object {
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalMarkPropFieldDef<TypeForShape>",
              },
              Object {
                "$ref": "#/definitions/ConditionalStringValueDef",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalStringValueDef",
                },
                "type": "array",
              },
            ],
            "description": "A field definition or one or more value definition(s) with a selection predicate.",
          },
          "value": Object {
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
            "type": Array [
              "string",
              "null",
            ],
          },
        },
        "type": "object",
      },
      "ValueDefWithCondition<StringFieldDef,Text>": Object {
        "additionalProperties": false,
        "minProperties": 1,
        "properties": Object {
          "condition": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/ConditionalStringFieldDef",
              },
              Object {
                "$ref": "#/definitions/ConditionalValueDef<Text>",
              },
              Object {
                "items": Object {
                  "$ref": "#/definitions/ConditionalValueDef<Text>",
                },
                "type": "array",
              },
            ],
            "description": "A field definition or one or more value definition(s) with a selection predicate.",
          },
          "value": Object {
            "$ref": "#/definitions/Text",
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "type": "object",
      },
      "Vector2<DateTime>": Object {
        "items": Array [
          Object {
            "$ref": "#/definitions/DateTime",
          },
          Object {
            "$ref": "#/definitions/DateTime",
          },
        ],
        "maxItems": 2,
        "minItems": 2,
        "type": "array",
      },
      "Vector2<Vector2<number>>": Object {
        "items": Array [
          Object {
            "$ref": "#/definitions/Vector2<number>",
          },
          Object {
            "$ref": "#/definitions/Vector2<number>",
          },
        ],
        "maxItems": 2,
        "minItems": 2,
        "type": "array",
      },
      "Vector2<boolean>": Object {
        "items": Array [
          Object {
            "type": "boolean",
          },
          Object {
            "type": "boolean",
          },
        ],
        "maxItems": 2,
        "minItems": 2,
        "type": "array",
      },
      "Vector2<number>": Object {
        "items": Array [
          Object {
            "type": "number",
          },
          Object {
            "type": "number",
          },
        ],
        "maxItems": 2,
        "minItems": 2,
        "type": "array",
      },
      "Vector2<string>": Object {
        "items": Array [
          Object {
            "type": "string",
          },
          Object {
            "type": "string",
          },
        ],
        "maxItems": 2,
        "minItems": 2,
        "type": "array",
      },
      "Vector3<number>": Object {
        "items": Array [
          Object {
            "type": "number",
          },
          Object {
            "type": "number",
          },
          Object {
            "type": "number",
          },
        ],
        "maxItems": 3,
        "minItems": 3,
        "type": "array",
      },
      "ViewBackground": Object {
        "additionalProperties": false,
        "properties": Object {
          "cornerRadius": Object {
            "description": "The radius in pixels of rounded rectangle corners.

__Default value:__ \`0\`",
            "type": "number",
          },
          "fill": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The fill color.

__Default value:__ \`undefined\`",
          },
          "fillOpacity": Object {
            "description": "The fill opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "opacity": Object {
            "description": "The overall opacity (value between [0,1]).

__Default value:__ \`0.7\` for non-aggregate plots with \`point\`, \`tick\`, \`circle\`, or \`square\` marks or layered \`bar\` charts and \`1\` otherwise.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "stroke": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The stroke color.

__Default value:__ \`\\"#ddd\\"\`",
          },
          "strokeCap": Object {
            "$ref": "#/definitions/StrokeCap",
            "description": "The stroke cap for line ending style. One of \`\\"butt\\"\`, \`\\"round\\"\`, or \`\\"square\\"\`.

__Default value:__ \`\\"square\\"\`",
          },
          "strokeDash": Object {
            "description": "An array of alternating stroke, space lengths for creating dashed or dotted lines.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "strokeDashOffset": Object {
            "description": "The offset (in pixels) into which to begin drawing with the stroke dash array.",
            "type": "number",
          },
          "strokeJoin": Object {
            "$ref": "#/definitions/StrokeJoin",
            "description": "The stroke line join method. One of \`\\"miter\\"\`, \`\\"round\\"\` or \`\\"bevel\\"\`.

__Default value:__ \`\\"miter\\"\`",
          },
          "strokeMiterLimit": Object {
            "description": "The miter limit at which to bevel a line join.",
            "type": "number",
          },
          "strokeOpacity": Object {
            "description": "The stroke opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "strokeWidth": Object {
            "description": "The stroke width, in pixels.",
            "minimum": 0,
            "type": "number",
          },
          "style": Object {
            "anyOf": Array [
              Object {
                "type": "string",
              },
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
            ],
            "description": "A string or array of strings indicating the name of custom styles to apply to the view background. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles.

__Default value:__ \`\\"cell\\"\`
__Note:__ Any specified view background properties will augment the default style.",
          },
        },
        "type": "object",
      },
      "ViewConfig": Object {
        "additionalProperties": false,
        "properties": Object {
          "clip": Object {
            "description": "Whether the view should be clipped.",
            "type": "boolean",
          },
          "continuousHeight": Object {
            "description": "The default height when the plot has a continuous y-field.

__Default value:__ \`200\`",
            "type": "number",
          },
          "continuousWidth": Object {
            "description": "The default width when the plot has a continuous x-field.

__Default value:__ \`200\`",
            "type": "number",
          },
          "cornerRadius": Object {
            "description": "The radius in pixels of rounded rectangle corners.

__Default value:__ \`0\`",
            "type": "number",
          },
          "discreteHeight": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "step": Object {
                    "type": "number",
                  },
                },
                "required": Array [
                  "step",
                ],
                "type": "object",
              },
            ],
            "description": "The default height when the plot has either a discrete y-field or no y-field.

__Default value:__ a step size based on \`config.view.step\`.",
          },
          "discreteWidth": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "step": Object {
                    "type": "number",
                  },
                },
                "required": Array [
                  "step",
                ],
                "type": "object",
              },
            ],
            "description": "The default width when the plot has either a discrete x-field or no x-field.

__Default value:__ a step size based on \`config.view.step\`.",
          },
          "fill": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The fill color.

__Default value:__ \`undefined\`",
          },
          "fillOpacity": Object {
            "description": "The fill opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "height": Object {
            "deprecated": "Since Vega-Lite 4.0. Please use continuousHeight and discreteHeight instead.",
            "description": "Default height",
            "type": "number",
          },
          "opacity": Object {
            "description": "The overall opacity (value between [0,1]).

__Default value:__ \`0.7\` for non-aggregate plots with \`point\`, \`tick\`, \`circle\`, or \`square\` marks or layered \`bar\` charts and \`1\` otherwise.",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "step": Object {
            "description": "Default step size for x-/y- discrete fields.",
            "type": "number",
          },
          "stroke": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/Color",
              },
              Object {
                "type": "null",
              },
            ],
            "description": "The stroke color.

__Default value:__ \`\\"#ddd\\"\`",
          },
          "strokeCap": Object {
            "$ref": "#/definitions/StrokeCap",
            "description": "The stroke cap for line ending style. One of \`\\"butt\\"\`, \`\\"round\\"\`, or \`\\"square\\"\`.

__Default value:__ \`\\"square\\"\`",
          },
          "strokeDash": Object {
            "description": "An array of alternating stroke, space lengths for creating dashed or dotted lines.",
            "items": Object {
              "type": "number",
            },
            "type": "array",
          },
          "strokeDashOffset": Object {
            "description": "The offset (in pixels) into which to begin drawing with the stroke dash array.",
            "type": "number",
          },
          "strokeJoin": Object {
            "$ref": "#/definitions/StrokeJoin",
            "description": "The stroke line join method. One of \`\\"miter\\"\`, \`\\"round\\"\` or \`\\"bevel\\"\`.

__Default value:__ \`\\"miter\\"\`",
          },
          "strokeMiterLimit": Object {
            "description": "The miter limit at which to bevel a line join.",
            "type": "number",
          },
          "strokeOpacity": Object {
            "description": "The stroke opacity (value between [0,1]).

__Default value:__ \`1\`",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
          },
          "strokeWidth": Object {
            "description": "The stroke width, in pixels.",
            "minimum": 0,
            "type": "number",
          },
          "width": Object {
            "deprecated": "Since Vega-Lite 4.0. Please use continuousWidth and discreteWidth instead.",
            "description": "Default width",
            "type": "number",
          },
        },
        "type": "object",
      },
      "WindowEventType": Object {
        "anyOf": Array [
          Object {
            "$ref": "#/definitions/EventType",
          },
          Object {
            "type": "string",
          },
        ],
      },
      "WindowFieldDef": Object {
        "additionalProperties": false,
        "properties": Object {
          "as": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The output name for the window operation.",
          },
          "field": Object {
            "$ref": "#/definitions/FieldName",
            "description": "The data field for which to compute the aggregate or window function. This can be omitted for window functions that do not operate over a field such as \`\\"count\\"\`, \`\\"rank\\"\`, \`\\"dense_rank\\"\`.",
          },
          "op": Object {
            "anyOf": Array [
              Object {
                "$ref": "#/definitions/AggregateOp",
              },
              Object {
                "$ref": "#/definitions/WindowOnlyOp",
              },
            ],
            "description": "The window or aggregation operation to apply within a window (e.g., \`\\"rank\\"\`, \`\\"lead\\"\`, \`\\"sum\\"\`, \`\\"average\\"\` or \`\\"count\\"\`). See the list of all supported operations [here](https://vega.github.io/vega-lite/docs/window.html#ops).",
          },
          "param": Object {
            "description": "Parameter values for the window functions. Parameter values can be omitted for operations that do not accept a parameter.

See the list of all supported operations and their parameters [here](https://vega.github.io/vega-lite/docs/transforms/window.html).",
            "type": "number",
          },
        },
        "required": Array [
          "op",
          "as",
        ],
        "type": "object",
      },
      "WindowOnlyOp": Object {
        "enum": Array [
          "row_number",
          "rank",
          "dense_rank",
          "percent_rank",
          "cume_dist",
          "ntile",
          "lag",
          "lead",
          "first_value",
          "last_value",
          "nth_value",
        ],
        "type": "string",
      },
      "WindowTransform": Object {
        "additionalProperties": false,
        "properties": Object {
          "frame": Object {
            "description": "A frame specification as a two-element array indicating how the sliding window should proceed. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. The default value is \`[null, 0]\`, indicating that the sliding window includes the current object and all preceding objects. The value \`[-5, 5]\` indicates that the window should include five objects preceding and five objects following the current object. Finally, \`[null, null]\` indicates that the window frame should always include all data objects. If you this frame and want to assign the same value to add objects, you can use the simpler [join aggregate transform](https://vega.github.io/vega-lite/docs/joinaggregate.html). The only operators affected are the aggregation operations and the \`first_value\`, \`last_value\`, and \`nth_value\` window operations. The other window operations are not affected by this.

__Default value:__:  \`[null, 0]\` (includes the current object and all preceding objects)",
            "items": Object {
              "type": Array [
                "null",
                "number",
              ],
            },
            "type": "array",
          },
          "groupby": Object {
            "description": "The data fields for partitioning the data objects into separate windows. If unspecified, all data points will be in a single window.",
            "items": Object {
              "$ref": "#/definitions/FieldName",
            },
            "type": "array",
          },
          "ignorePeers": Object {
            "description": "Indicates if the sliding window frame should ignore peer values (data that are considered identical by the sort criteria). The default is false, causing the window frame to expand to include all peer values. If set to true, the window frame will be defined by offset values only. This setting only affects those operations that depend on the window frame, namely aggregation operations and the first_value, last_value, and nth_value window operations.

__Default value:__ \`false\`",
            "type": "boolean",
          },
          "sort": Object {
            "description": "A sort field definition for sorting data objects within a window. If two data objects are considered equal by the comparator, they are considered \\"peer\\" values of equal rank. If sort is not specified, the order is undefined: data objects are processed in the order they are observed and none are considered peers (the ignorePeers parameter is ignored and treated as if set to \`true\`).",
            "items": Object {
              "$ref": "#/definitions/SortField",
            },
            "type": "array",
          },
          "window": Object {
            "description": "The definition of the fields in the window, and what calculations to use.",
            "items": Object {
              "$ref": "#/definitions/WindowFieldDef",
            },
            "type": "array",
          },
        },
        "required": Array [
          "window",
        ],
        "type": "object",
      },
      "XValueDef": Object {
        "additionalProperties": false,
        "description": "Definition object for a constant value (primitive value or gradient definition) of an encoding channel.",
        "properties": Object {
          "value": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "width",
                ],
                "type": "string",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "value",
        ],
        "type": "object",
      },
      "YValueDef": Object {
        "additionalProperties": false,
        "description": "Definition object for a constant value (primitive value or gradient definition) of an encoding channel.",
        "properties": Object {
          "value": Object {
            "anyOf": Array [
              Object {
                "type": "number",
              },
              Object {
                "enum": Array [
                  "height",
                ],
                "type": "string",
              },
            ],
            "description": "A constant value in visual domain (e.g., \`\\"red\\"\` / \`\\"#0099ff\\"\` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between \`0\` to \`1\` for opacity).",
          },
        },
        "required": Array [
          "value",
        ],
        "type": "object",
      },
    },
  },
}
`;
